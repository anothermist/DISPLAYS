
HD44780.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000007a0  00000814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000878  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a30  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008a2  00000000  00000000  000023a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009d6  00000000  00000000  00002c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c8  00000000  00000000  00003620  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ba  00000000  00000000  000037e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c6d  00000000  00000000  00003ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  0000490f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	e2 01       	movw	r28, r4
  6a:	05 02       	muls	r16, r21
  6c:	29 02       	muls	r18, r25
  6e:	4c 02       	muls	r20, r28
  70:	6f 02       	muls	r22, r31
  72:	94 02       	muls	r25, r20
  74:	b7 02       	muls	r27, r23
  76:	da 02       	muls	r29, r26
  78:	fe 02       	muls	r31, r30
  7a:	21 03       	mulsu	r18, r17

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e0 ea       	ldi	r30, 0xA0	; 160
  90:	f7 e0       	ldi	r31, 0x07	; 7
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 36       	cpi	r26, 0x64	; 100
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 47 03 	call	0x68e	; 0x68e <main>
  a2:	0c 94 ce 03 	jmp	0x79c	; 0x79c <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <BusLinesState>:
	if (S_C == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (R_L == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	BusLinesState(&bus_data, 0);
}
  aa:	0f 93       	push	r16
  ac:	1f 93       	push	r17
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <BusLinesState+0xa>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
  b8:	dc 01       	movw	r26, r24
  ba:	8c 91       	ld	r24, X
  bc:	98 2f       	mov	r25, r24
  be:	92 95       	swap	r25
  c0:	9f 70       	andi	r25, 0x0F	; 15
  c2:	99 83       	std	Y+1, r25	; 0x01
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	8a 83       	std	Y+2, r24	; 0x02
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	8d c0       	rjmp	.+282    	; 0x1e6 <BusLinesState+0x13c>
  cc:	33 23       	and	r19, r19
  ce:	19 f0       	breq	.+6      	; 0xd6 <BusLinesState+0x2c>
  d0:	31 30       	cpi	r19, 0x01	; 1
  d2:	41 f4       	brne	.+16     	; 0xe4 <BusLinesState+0x3a>
  d4:	04 c0       	rjmp	.+8      	; 0xde <BusLinesState+0x34>
  d6:	8e 01       	movw	r16, r28
  d8:	0f 5f       	subi	r16, 0xFF	; 255
  da:	1f 4f       	sbci	r17, 0xFF	; 255
  dc:	03 c0       	rjmp	.+6      	; 0xe4 <BusLinesState+0x3a>
  de:	8e 01       	movw	r16, r28
  e0:	0e 5f       	subi	r16, 0xFE	; 254
  e2:	1f 4f       	sbci	r17, 0xFF	; 255
  e4:	20 e0       	ldi	r18, 0x00	; 0
  e6:	3c c0       	rjmp	.+120    	; 0x160 <BusLinesState+0xb6>
  e8:	f8 01       	movw	r30, r16
  ea:	80 81       	ld	r24, Z
  ec:	42 2f       	mov	r20, r18
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 2e       	mov	r0, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <BusLinesState+0x50>
  f6:	95 95       	asr	r25
  f8:	87 95       	ror	r24
  fa:	0a 94       	dec	r0
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <BusLinesState+0x4c>
  fe:	80 ff       	sbrs	r24, 0
 100:	17 c0       	rjmp	.+46     	; 0x130 <BusLinesState+0x86>
 102:	da 01       	movw	r26, r20
 104:	aa 0f       	add	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	ac 5f       	subi	r26, 0xFC	; 252
 10a:	be 4f       	sbci	r27, 0xFE	; 254
 10c:	0d 90       	ld	r0, X+
 10e:	bc 91       	ld	r27, X
 110:	a0 2d       	mov	r26, r0
 112:	40 50       	subi	r20, 0x00	; 0
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	fa 01       	movw	r30, r20
 11c:	00 80       	ld	r0, Z
 11e:	02 c0       	rjmp	.+4      	; 0x124 <BusLinesState+0x7a>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <BusLinesState+0x76>
 128:	9c 91       	ld	r25, X
 12a:	89 2b       	or	r24, r25
 12c:	8c 93       	st	X, r24
 12e:	17 c0       	rjmp	.+46     	; 0x15e <BusLinesState+0xb4>
 130:	da 01       	movw	r26, r20
 132:	aa 0f       	add	r26, r26
 134:	bb 1f       	adc	r27, r27
 136:	ac 5f       	subi	r26, 0xFC	; 252
 138:	be 4f       	sbci	r27, 0xFE	; 254
 13a:	0d 90       	ld	r0, X+
 13c:	bc 91       	ld	r27, X
 13e:	a0 2d       	mov	r26, r0
 140:	40 50       	subi	r20, 0x00	; 0
 142:	5f 4f       	sbci	r21, 0xFF	; 255
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	fa 01       	movw	r30, r20
 14a:	00 80       	ld	r0, Z
 14c:	02 c0       	rjmp	.+4      	; 0x152 <BusLinesState+0xa8>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	0a 94       	dec	r0
 154:	e2 f7       	brpl	.-8      	; 0x14e <BusLinesState+0xa4>
 156:	80 95       	com	r24
 158:	9c 91       	ld	r25, X
 15a:	89 23       	and	r24, r25
 15c:	8c 93       	st	X, r24
 15e:	2f 5f       	subi	r18, 0xFF	; 255
 160:	24 30       	cpi	r18, 0x04	; 4
 162:	10 f2       	brcs	.-124    	; 0xe8 <BusLinesState+0x3e>
 164:	61 11       	cpse	r22, r1
 166:	0f c0       	rjmp	.+30     	; 0x186 <BusLinesState+0xdc>
 168:	8b b1       	in	r24, 0x0b	; 11
 16a:	88 60       	ori	r24, 0x08	; 8
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	f5 ed       	ldi	r31, 0xD5	; 213
 170:	fa 95       	dec	r31
 172:	f1 f7       	brne	.-4      	; 0x170 <BusLinesState+0xc6>
 174:	00 00       	nop
 176:	8b b1       	in	r24, 0x0b	; 11
 178:	87 7f       	andi	r24, 0xF7	; 247
 17a:	8b b9       	out	0x0b, r24	; 11
 17c:	85 ed       	ldi	r24, 0xD5	; 213
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <BusLinesState+0xd4>
 182:	00 00       	nop
 184:	2f c0       	rjmp	.+94     	; 0x1e4 <BusLinesState+0x13a>
 186:	61 30       	cpi	r22, 0x01	; 1
 188:	c9 f4       	brne	.+50     	; 0x1bc <BusLinesState+0x112>
 18a:	31 11       	cpse	r19, r1
 18c:	03 c0       	rjmp	.+6      	; 0x194 <BusLinesState+0xea>
 18e:	8b b1       	in	r24, 0x0b	; 11
 190:	84 60       	ori	r24, 0x04	; 4
 192:	8b b9       	out	0x0b, r24	; 11
 194:	8b b1       	in	r24, 0x0b	; 11
 196:	88 60       	ori	r24, 0x08	; 8
 198:	8b b9       	out	0x0b, r24	; 11
 19a:	95 ed       	ldi	r25, 0xD5	; 213
 19c:	9a 95       	dec	r25
 19e:	f1 f7       	brne	.-4      	; 0x19c <BusLinesState+0xf2>
 1a0:	00 00       	nop
 1a2:	8b b1       	in	r24, 0x0b	; 11
 1a4:	87 7f       	andi	r24, 0xF7	; 247
 1a6:	8b b9       	out	0x0b, r24	; 11
 1a8:	31 30       	cpi	r19, 0x01	; 1
 1aa:	19 f4       	brne	.+6      	; 0x1b2 <BusLinesState+0x108>
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8b 7f       	andi	r24, 0xFB	; 251
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	a5 ed       	ldi	r26, 0xD5	; 213
 1b4:	aa 95       	dec	r26
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <BusLinesState+0x10a>
 1b8:	00 00       	nop
 1ba:	14 c0       	rjmp	.+40     	; 0x1e4 <BusLinesState+0x13a>
 1bc:	62 30       	cpi	r22, 0x02	; 2
 1be:	91 f4       	brne	.+36     	; 0x1e4 <BusLinesState+0x13a>
 1c0:	8b b1       	in	r24, 0x0b	; 11
 1c2:	88 60       	ori	r24, 0x08	; 8
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	ef e1       	ldi	r30, 0x1F	; 31
 1c8:	fe e4       	ldi	r31, 0x4E	; 78
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <BusLinesState+0x120>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <BusLinesState+0x126>
 1d0:	00 00       	nop
 1d2:	8b b1       	in	r24, 0x0b	; 11
 1d4:	87 7f       	andi	r24, 0xF7	; 247
 1d6:	8b b9       	out	0x0b, r24	; 11
 1d8:	8f e1       	ldi	r24, 0x1F	; 31
 1da:	9e e4       	ldi	r25, 0x4E	; 78
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <BusLinesState+0x132>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <BusLinesState+0x138>
 1e2:	00 00       	nop
 1e4:	3f 5f       	subi	r19, 0xFF	; 255
 1e6:	32 30       	cpi	r19, 0x02	; 2
 1e8:	08 f4       	brcc	.+2      	; 0x1ec <BusLinesState+0x142>
 1ea:	70 cf       	rjmp	.-288    	; 0xcc <BusLinesState+0x22>
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	08 95       	ret

000001fa <LCD_DisplEnable_CursOnOffBlink>:
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	1f 92       	push	r1
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
 204:	98 e0       	ldi	r25, 0x08	; 8
 206:	99 83       	std	Y+1, r25	; 0x01
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	11 f4       	brne	.+4      	; 0x210 <LCD_DisplEnable_CursOnOffBlink+0x16>
 20c:	8c e0       	ldi	r24, 0x0C	; 12
 20e:	89 83       	std	Y+1, r24	; 0x01
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	21 f4       	brne	.+8      	; 0x21c <LCD_DisplEnable_CursOnOffBlink+0x22>
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	82 60       	ori	r24, 0x02	; 2
 218:	89 83       	std	Y+1, r24	; 0x01
 21a:	03 c0       	rjmp	.+6      	; 0x222 <LCD_DisplEnable_CursOnOffBlink+0x28>
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	8d 7f       	andi	r24, 0xFD	; 253
 220:	89 83       	std	Y+1, r24	; 0x01
 222:	41 30       	cpi	r20, 0x01	; 1
 224:	21 f4       	brne	.+8      	; 0x22e <LCD_DisplEnable_CursOnOffBlink+0x34>
 226:	89 81       	ldd	r24, Y+1	; 0x01
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	89 83       	std	Y+1, r24	; 0x01
 22c:	03 c0       	rjmp	.+6      	; 0x234 <LCD_DisplEnable_CursOnOffBlink+0x3a>
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	8e 7f       	andi	r24, 0xFE	; 254
 232:	89 83       	std	Y+1, r24	; 0x01
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	ce 01       	movw	r24, r28
 238:	01 96       	adiw	r24, 0x01	; 1
 23a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 23e:	0f 90       	pop	r0
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <LCD_UserSymbolsWrite>:

void LCD_UserSymbolsWrite(uint8_t Addr, uint8_t *data)
{
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	1f 93       	push	r17
 24c:	cf 93       	push	r28
 24e:	df 93       	push	r29
 250:	1f 92       	push	r1
 252:	cd b7       	in	r28, 0x3d	; 61
 254:	de b7       	in	r29, 0x3e	; 62
 256:	7b 01       	movw	r14, r22
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
 258:	88 0f       	add	r24, r24
 25a:	88 0f       	add	r24, r24
 25c:	88 0f       	add	r24, r24
 25e:	80 64       	ori	r24, 0x40	; 64
 260:	89 83       	std	Y+1, r24	; 0x01
	BusLinesState(&bus_data, 0);
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	
	for (uint8_t i = 0; i < 8; i++)
 26c:	10 e0       	ldi	r17, 0x00	; 0
 26e:	08 c0       	rjmp	.+16     	; 0x280 <LCD_UserSymbolsWrite+0x3a>
	{
		BusLinesState(data, 1);
 270:	61 e0       	ldi	r22, 0x01	; 1
 272:	c7 01       	movw	r24, r14
 274:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		data++;
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	e8 1a       	sub	r14, r24
 27c:	f8 0a       	sbc	r15, r24
	uint8_t bus_data = 0b1000000;
	
	bus_data |= Addr*8;
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 8; i++)
 27e:	1f 5f       	subi	r17, 0xFF	; 255
 280:	18 30       	cpi	r17, 0x08	; 8
 282:	b0 f3       	brcs	.-20     	; 0x270 <LCD_UserSymbolsWrite+0x2a>
	{
		BusLinesState(data, 1);
		data++;
	}
}
 284:	0f 90       	pop	r0
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	ff 90       	pop	r15
 28e:	ef 90       	pop	r14
 290:	08 95       	ret

00000292 <LCD_Init>:
		}
	}
}

void LCD_Init(void)
{
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <LCD_Init+0x8>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 29e:	8f e5       	ldi	r24, 0x5F	; 95
 2a0:	9a ee       	ldi	r25, 0xEA	; 234
 2a2:	01 97       	sbiw	r24, 0x01	; 1
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <LCD_Init+0x10>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_Init+0x16>
 2a8:	00 00       	nop
	_delay_ms(15);
	
	uint8_t bus_data = 0b100000;
 2aa:	80 e2       	ldi	r24, 0x20	; 32
 2ac:	89 83       	std	Y+1, r24	; 0x01
	uint8_t empty_Init = 0x33;
 2ae:	83 e3       	ldi	r24, 0x33	; 51
 2b0:	8a 83       	std	Y+2, r24	; 0x02
	
	for (uint8_t i = 0; i < 2; i++)
 2b2:	10 e0       	ldi	r17, 0x00	; 0
 2b4:	13 c0       	rjmp	.+38     	; 0x2dc <LCD_Init+0x4a>
	{
		if (i == 0)
 2b6:	11 11       	cpse	r17, r1
 2b8:	06 c0       	rjmp	.+12     	; 0x2c6 <LCD_Init+0x34>
		BusLinesState(&empty_Init, 0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	ce 01       	movw	r24, r28
 2be:	02 96       	adiw	r24, 0x02	; 2
 2c0:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 2c4:	0a c0       	rjmp	.+20     	; 0x2da <LCD_Init+0x48>
		else if (i == 1)
 2c6:	11 30       	cpi	r17, 0x01	; 1
 2c8:	41 f4       	brne	.+16     	; 0x2da <LCD_Init+0x48>
		{
			empty_Init--;
 2ca:	8a 81       	ldd	r24, Y+2	; 0x02
 2cc:	81 50       	subi	r24, 0x01	; 1
 2ce:	8a 83       	std	Y+2, r24	; 0x02
			BusLinesState(&empty_Init, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	ce 01       	movw	r24, r28
 2d4:	02 96       	adiw	r24, 0x02	; 2
 2d6:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	_delay_ms(15);
	
	uint8_t bus_data = 0b100000;
	uint8_t empty_Init = 0x33;
	
	for (uint8_t i = 0; i < 2; i++)
 2da:	1f 5f       	subi	r17, 0xFF	; 255
 2dc:	12 30       	cpi	r17, 0x02	; 2
 2de:	58 f3       	brcs	.-42     	; 0x2b6 <LCD_Init+0x24>
			BusLinesState(&empty_Init, 0);
		}
	}
	
	if (Data_Length == 1) Sbit(bus_data, 4);
	else Cbit(bus_data, 4);
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	8f 7e       	andi	r24, 0xEF	; 239
	if (NumberOfLines == 1) Sbit(bus_data, 3);
	else Cbit(bus_data, 3);
	if (Font == 1) Sbit(bus_data, 2);
 2e4:	8c 60       	ori	r24, 0x0C	; 12
 2e6:	89 83       	std	Y+1, r24	; 0x01
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
 2e8:	60 e0       	ldi	r22, 0x00	; 0
 2ea:	ce 01       	movw	r24, r28
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	
	for (uint8_t i = 0; i < 8; i++)
 2f2:	10 e0       	ldi	r17, 0x00	; 0
 2f4:	0e c0       	rjmp	.+28     	; 0x312 <LCD_Init+0x80>
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
 2f6:	61 2f       	mov	r22, r17
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	66 0f       	add	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	66 0f       	add	r22, r22
 300:	77 1f       	adc	r23, r23
 302:	66 0f       	add	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	64 5f       	subi	r22, 0xF4	; 244
 308:	7e 4f       	sbci	r23, 0xFE	; 254
 30a:	81 2f       	mov	r24, r17
 30c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_UserSymbolsWrite>
	if (Font == 1) Sbit(bus_data, 2);
	else Cbit(bus_data, 2);
	
	BusLinesState(&bus_data, 0);
	
	for (uint8_t i = 0; i < 8; i++)
 310:	1f 5f       	subi	r17, 0xFF	; 255
 312:	18 30       	cpi	r17, 0x08	; 8
 314:	80 f3       	brcs	.-32     	; 0x2f6 <LCD_Init+0x64>
	LCD_UserSymbolsWrite(i, &UserSymbol[i][0]);
}
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	08 95       	ret

00000322 <LCD_Show>:
		data++;
	}
}

void LCD_Show(uint8_t Addr, uint8_t Str, uint8_t Cursor)
{
 322:	cf 93       	push	r28
 324:	df 93       	push	r29
 326:	00 d0       	rcall	.+0      	; 0x328 <LCD_Show+0x6>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t x = 0;
	
	if (Str == 0)
 32e:	61 11       	cpse	r22, r1
 330:	0c c0       	rjmp	.+24     	; 0x34a <LCD_Show+0x28>
	{
		x=FirstStr_StartPosition_DDRAM_Addr+Cursor;
 332:	40 58       	subi	r20, 0x80	; 128
 334:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
 336:	ce 01       	movw	r24, r28
 338:	01 96       	adiw	r24, 0x01	; 1
 33a:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		BusLinesState(&Addr, 1);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	ce 01       	movw	r24, r28
 342:	02 96       	adiw	r24, 0x02	; 2
 344:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
 348:	0e c0       	rjmp	.+28     	; 0x366 <LCD_Show+0x44>
	}
	else
	if (Str == 1)
 34a:	61 30       	cpi	r22, 0x01	; 1
 34c:	61 f4       	brne	.+24     	; 0x366 <LCD_Show+0x44>
	{
		x=SecondStr_StartPosition_DDRAM_Addr+Cursor;
 34e:	40 54       	subi	r20, 0x40	; 64
 350:	49 83       	std	Y+1, r20	; 0x01
		
		BusLinesState(&x, 0);
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	ce 01       	movw	r24, r28
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
		BusLinesState(&Addr, 1);
 35c:	61 e0       	ldi	r22, 0x01	; 1
 35e:	ce 01       	movw	r24, r28
 360:	02 96       	adiw	r24, 0x02	; 2
 362:	0e 94 55 00 	call	0xaa	; 0xaa <BusLinesState>
	}
}
 366:	0f 90       	pop	r0
 368:	0f 90       	pop	r0
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <LCD_String>:

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
 370:	ff 92       	push	r15
 372:	0f 93       	push	r16
 374:	1f 93       	push	r17
 376:	cf 93       	push	r28
 378:	df 93       	push	r29
 37a:	8c 01       	movw	r16, r24
 37c:	f6 2e       	mov	r15, r22
 37e:	d4 2f       	mov	r29, r20
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
 380:	c0 e0       	ldi	r28, 0x00	; 0
 382:	06 c0       	rjmp	.+12     	; 0x390 <LCD_String+0x20>
	LCD_Show(str1[n], y, n + x);
 384:	4c 2f       	mov	r20, r28
 386:	4d 0f       	add	r20, r29
 388:	6f 2d       	mov	r22, r15
 38a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
}

void LCD_String(char str1[], uint8_t y, uint8_t x)
{
	uint8_t n;
	for(n = 0; str1[n] != '\0'; n++)
 38e:	cf 5f       	subi	r28, 0xFF	; 255
 390:	f8 01       	movw	r30, r16
 392:	ec 0f       	add	r30, r28
 394:	f1 1d       	adc	r31, r1
 396:	80 81       	ld	r24, Z
 398:	81 11       	cpse	r24, r1
 39a:	f4 cf       	rjmp	.-24     	; 0x384 <LCD_String+0x14>
	LCD_Show(str1[n], y, n + x);
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	08 95       	ret

000003a8 <drawBigDigits>:

void drawBigDigits(uint8_t digit, uint8_t place)
{
 3a8:	1f 93       	push	r17
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
		switch (digit) {
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	8a 30       	cpi	r24, 0x0A	; 10
 3b2:	91 05       	cpc	r25, r1
 3b4:	08 f0       	brcs	.+2      	; 0x3b8 <drawBigDigits+0x10>
 3b6:	67 c1       	rjmp	.+718    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
 3b8:	c6 2f       	mov	r28, r22
 3ba:	fc 01       	movw	r30, r24
 3bc:	ec 5c       	subi	r30, 0xCC	; 204
 3be:	ff 4f       	sbci	r31, 0xFF	; 255
 3c0:	0c 94 c8 03 	jmp	0x790	; 0x790 <__tablejump2__>
			case 0:

			LCD_Show(0, 0, place);
 3c4:	46 2f       	mov	r20, r22
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(1, 0, place + 1);
 3ce:	11 e0       	ldi	r17, 0x01	; 1
 3d0:	1c 0f       	add	r17, r28
 3d2:	41 2f       	mov	r20, r17
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 3dc:	d2 e0       	ldi	r29, 0x02	; 2
 3de:	dc 0f       	add	r29, r28
 3e0:	4d 2f       	mov	r20, r29
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	82 e0       	ldi	r24, 0x02	; 2
 3e6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(3, 1, place);
 3ea:	4c 2f       	mov	r20, r28
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 3f4:	41 2f       	mov	r20, r17
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 3fe:	4d 2f       	mov	r20, r29
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	85 e0       	ldi	r24, 0x05	; 5
 404:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 408:	3e c1       	rjmp	.+636    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 1:
			LCD_Show(1, 0, place);
 40a:	46 2f       	mov	r20, r22
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	81 e0       	ldi	r24, 0x01	; 1
 410:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 1);
 414:	11 e0       	ldi	r17, 0x01	; 1
 416:	1c 0f       	add	r17, r28
 418:	41 2f       	mov	r20, r17
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	82 e0       	ldi	r24, 0x02	; 2
 41e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_String(" ", 0, place + 2);
 422:	d2 e0       	ldi	r29, 0x02	; 2
 424:	dc 0f       	add	r29, r28
 426:	4d 2f       	mov	r20, r29
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	8b e5       	ldi	r24, 0x5B	; 91
 42c:	91 e0       	ldi	r25, 0x01	; 1
 42e:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
			LCD_Show(4, 1, place);
 432:	4c 2f       	mov	r20, r28
 434:	61 e0       	ldi	r22, 0x01	; 1
 436:	84 e0       	ldi	r24, 0x04	; 4
 438:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(7, 1, place + 1);
 43c:	41 2f       	mov	r20, r17
 43e:	61 e0       	ldi	r22, 0x01	; 1
 440:	87 e0       	ldi	r24, 0x07	; 7
 442:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 2);
 446:	4d 2f       	mov	r20, r29
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	84 e0       	ldi	r24, 0x04	; 4
 44c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 450:	1a c1       	rjmp	.+564    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 2:
			LCD_Show(6, 0, place);
 452:	46 2f       	mov	r20, r22
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	86 e0       	ldi	r24, 0x06	; 6
 458:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 45c:	11 e0       	ldi	r17, 0x01	; 1
 45e:	1c 0f       	add	r17, r28
 460:	41 2f       	mov	r20, r17
 462:	60 e0       	ldi	r22, 0x00	; 0
 464:	86 e0       	ldi	r24, 0x06	; 6
 466:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 46a:	d2 e0       	ldi	r29, 0x02	; 2
 46c:	dc 0f       	add	r29, r28
 46e:	4d 2f       	mov	r20, r29
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	82 e0       	ldi	r24, 0x02	; 2
 474:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(3, 1, place);
 478:	4c 2f       	mov	r20, r28
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	83 e0       	ldi	r24, 0x03	; 3
 47e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 482:	41 2f       	mov	r20, r17
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	84 e0       	ldi	r24, 0x04	; 4
 488:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 2);
 48c:	4d 2f       	mov	r20, r29
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	84 e0       	ldi	r24, 0x04	; 4
 492:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 496:	f7 c0       	rjmp	.+494    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 3:
			LCD_Show(6, 0, place);
 498:	46 2f       	mov	r20, r22
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	86 e0       	ldi	r24, 0x06	; 6
 49e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 4a2:	11 e0       	ldi	r17, 0x01	; 1
 4a4:	1c 0f       	add	r17, r28
 4a6:	41 2f       	mov	r20, r17
 4a8:	60 e0       	ldi	r22, 0x00	; 0
 4aa:	86 e0       	ldi	r24, 0x06	; 6
 4ac:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 4b0:	d2 e0       	ldi	r29, 0x02	; 2
 4b2:	dc 0f       	add	r29, r28
 4b4:	4d 2f       	mov	r20, r29
 4b6:	60 e0       	ldi	r22, 0x00	; 0
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place);
 4be:	4c 2f       	mov	r20, r28
 4c0:	61 e0       	ldi	r22, 0x01	; 1
 4c2:	84 e0       	ldi	r24, 0x04	; 4
 4c4:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 4c8:	41 2f       	mov	r20, r17
 4ca:	61 e0       	ldi	r22, 0x01	; 1
 4cc:	84 e0       	ldi	r24, 0x04	; 4
 4ce:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 4d2:	4d 2f       	mov	r20, r29
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 4dc:	d4 c0       	rjmp	.+424    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 4:
			LCD_Show(3, 0, place);
 4de:	46 2f       	mov	r20, r22
 4e0:	60 e0       	ldi	r22, 0x00	; 0
 4e2:	83 e0       	ldi	r24, 0x03	; 3
 4e4:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 0, place + 1);
 4e8:	11 e0       	ldi	r17, 0x01	; 1
 4ea:	1c 0f       	add	r17, r28
 4ec:	41 2f       	mov	r20, r17
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	84 e0       	ldi	r24, 0x04	; 4
 4f2:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(7, 0, place + 2);
 4f6:	d2 e0       	ldi	r29, 0x02	; 2
 4f8:	dc 0f       	add	r29, r28
 4fa:	4d 2f       	mov	r20, r29
 4fc:	60 e0       	ldi	r22, 0x00	; 0
 4fe:	87 e0       	ldi	r24, 0x07	; 7
 500:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_String(" ", 1, place);
 504:	4c 2f       	mov	r20, r28
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	8b e5       	ldi	r24, 0x5B	; 91
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
			LCD_String(" ", 1, place + 1);
 510:	41 2f       	mov	r20, r17
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	8b e5       	ldi	r24, 0x5B	; 91
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
			LCD_Show(7, 1, place + 2);
 51c:	4d 2f       	mov	r20, r29
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	87 e0       	ldi	r24, 0x07	; 7
 522:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 526:	af c0       	rjmp	.+350    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 5:
			LCD_Show(3, 0, place);
 528:	46 2f       	mov	r20, r22
 52a:	60 e0       	ldi	r22, 0x00	; 0
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 532:	11 e0       	ldi	r17, 0x01	; 1
 534:	1c 0f       	add	r17, r28
 536:	41 2f       	mov	r20, r17
 538:	60 e0       	ldi	r22, 0x00	; 0
 53a:	86 e0       	ldi	r24, 0x06	; 6
 53c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 2);
 540:	d2 e0       	ldi	r29, 0x02	; 2
 542:	dc 0f       	add	r29, r28
 544:	4d 2f       	mov	r20, r29
 546:	60 e0       	ldi	r22, 0x00	; 0
 548:	86 e0       	ldi	r24, 0x06	; 6
 54a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place);
 54e:	4c 2f       	mov	r20, r28
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	84 e0       	ldi	r24, 0x04	; 4
 554:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 558:	41 2f       	mov	r20, r17
 55a:	61 e0       	ldi	r22, 0x01	; 1
 55c:	84 e0       	ldi	r24, 0x04	; 4
 55e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 562:	4d 2f       	mov	r20, r29
 564:	61 e0       	ldi	r22, 0x01	; 1
 566:	85 e0       	ldi	r24, 0x05	; 5
 568:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 56c:	8c c0       	rjmp	.+280    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 6:
			LCD_Show(0, 0, place);
 56e:	46 2f       	mov	r20, r22
 570:	60 e0       	ldi	r22, 0x00	; 0
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 578:	11 e0       	ldi	r17, 0x01	; 1
 57a:	1c 0f       	add	r17, r28
 57c:	41 2f       	mov	r20, r17
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 2);
 586:	d2 e0       	ldi	r29, 0x02	; 2
 588:	dc 0f       	add	r29, r28
 58a:	4d 2f       	mov	r20, r29
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(3, 1, place);
 594:	4c 2f       	mov	r20, r28
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	83 e0       	ldi	r24, 0x03	; 3
 59a:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 59e:	41 2f       	mov	r20, r17
 5a0:	61 e0       	ldi	r22, 0x01	; 1
 5a2:	84 e0       	ldi	r24, 0x04	; 4
 5a4:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 5a8:	4d 2f       	mov	r20, r29
 5aa:	61 e0       	ldi	r22, 0x01	; 1
 5ac:	85 e0       	ldi	r24, 0x05	; 5
 5ae:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 5b2:	69 c0       	rjmp	.+210    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 7:
			LCD_Show(1, 0, place);
 5b4:	46 2f       	mov	r20, r22
 5b6:	60 e0       	ldi	r22, 0x00	; 0
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(1, 0, place + 1);
 5be:	41 e0       	ldi	r20, 0x01	; 1
 5c0:	4c 0f       	add	r20, r28
 5c2:	60 e0       	ldi	r22, 0x00	; 0
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 5ca:	d2 e0       	ldi	r29, 0x02	; 2
 5cc:	dc 0f       	add	r29, r28
 5ce:	4d 2f       	mov	r20, r29
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	82 e0       	ldi	r24, 0x02	; 2
 5d4:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_String(" ", 1, place);
 5d8:	4c 2f       	mov	r20, r28
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	8b e5       	ldi	r24, 0x5B	; 91
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
			LCD_String(" ", 1, place + 2);
 5e4:	4d 2f       	mov	r20, r29
 5e6:	61 e0       	ldi	r22, 0x01	; 1
 5e8:	8b e5       	ldi	r24, 0x5B	; 91
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
			LCD_Show(7, 1, place + 2);
 5f0:	4d 2f       	mov	r20, r29
 5f2:	61 e0       	ldi	r22, 0x01	; 1
 5f4:	87 e0       	ldi	r24, 0x07	; 7
 5f6:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 5fa:	45 c0       	rjmp	.+138    	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 8:
			LCD_Show(0, 0, place);
 5fc:	46 2f       	mov	r20, r22
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	80 e0       	ldi	r24, 0x00	; 0
 602:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 606:	11 e0       	ldi	r17, 0x01	; 1
 608:	1c 0f       	add	r17, r28
 60a:	41 2f       	mov	r20, r17
 60c:	60 e0       	ldi	r22, 0x00	; 0
 60e:	86 e0       	ldi	r24, 0x06	; 6
 610:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 614:	d2 e0       	ldi	r29, 0x02	; 2
 616:	dc 0f       	add	r29, r28
 618:	4d 2f       	mov	r20, r29
 61a:	60 e0       	ldi	r22, 0x00	; 0
 61c:	82 e0       	ldi	r24, 0x02	; 2
 61e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(3, 1, place);
 622:	4c 2f       	mov	r20, r28
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	83 e0       	ldi	r24, 0x03	; 3
 628:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 62c:	41 2f       	mov	r20, r17
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	84 e0       	ldi	r24, 0x04	; 4
 632:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 636:	4d 2f       	mov	r20, r29
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	85 e0       	ldi	r24, 0x05	; 5
 63c:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
 640:	22 c0       	rjmp	.+68     	; 0x686 <__EEPROM_REGION_LENGTH__+0x286>
			
			case 9:
			LCD_Show(0, 0, place);
 642:	46 2f       	mov	r20, r22
 644:	60 e0       	ldi	r22, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
 648:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(6, 0, place + 1);
 64c:	11 e0       	ldi	r17, 0x01	; 1
 64e:	1c 0f       	add	r17, r28
 650:	41 2f       	mov	r20, r17
 652:	60 e0       	ldi	r22, 0x00	; 0
 654:	86 e0       	ldi	r24, 0x06	; 6
 656:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(2, 0, place + 2);
 65a:	d2 e0       	ldi	r29, 0x02	; 2
 65c:	dc 0f       	add	r29, r28
 65e:	4d 2f       	mov	r20, r29
 660:	60 e0       	ldi	r22, 0x00	; 0
 662:	82 e0       	ldi	r24, 0x02	; 2
 664:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place);
 668:	4c 2f       	mov	r20, r28
 66a:	61 e0       	ldi	r22, 0x01	; 1
 66c:	84 e0       	ldi	r24, 0x04	; 4
 66e:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(4, 1, place + 1);
 672:	41 2f       	mov	r20, r17
 674:	61 e0       	ldi	r22, 0x01	; 1
 676:	84 e0       	ldi	r24, 0x04	; 4
 678:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			LCD_Show(5, 1, place + 2);
 67c:	4d 2f       	mov	r20, r29
 67e:	61 e0       	ldi	r22, 0x01	; 1
 680:	85 e0       	ldi	r24, 0x05	; 5
 682:	0e 94 91 01 	call	0x322	; 0x322 <LCD_Show>
			break;
		}
}
 686:	df 91       	pop	r29
 688:	cf 91       	pop	r28
 68a:	1f 91       	pop	r17
 68c:	08 95       	ret

0000068e <main>:
#include "main.h"

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00;
 68e:	8f ef       	ldi	r24, 0xFF	; 255
 690:	8a b9       	out	0x0a, r24	; 10
 692:	1b b8       	out	0x0b, r1	; 11
	
	LCD_Init();
 694:	0e 94 49 01 	call	0x292	; 0x292 <LCD_Init>
	LCD_DisplEnable_CursOnOffBlink(1, 0, 0);
 698:	40 e0       	ldi	r20, 0x00	; 0
 69a:	60 e0       	ldi	r22, 0x00	; 0
 69c:	81 e0       	ldi	r24, 0x01	; 1
 69e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_DisplEnable_CursOnOffBlink>
	
	LCD_String("                ", 0, 0);
 6a2:	40 e0       	ldi	r20, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	8c e4       	ldi	r24, 0x4C	; 76
 6a8:	91 e0       	ldi	r25, 0x01	; 1
 6aa:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
	LCD_String("                ", 1, 0);
 6ae:	40 e0       	ldi	r20, 0x00	; 0
 6b0:	61 e0       	ldi	r22, 0x01	; 1
 6b2:	8c e4       	ldi	r24, 0x4C	; 76
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>

	drawBigDigits(0, 0);
 6ba:	60 e0       	ldi	r22, 0x00	; 0
 6bc:	80 e0       	ldi	r24, 0x00	; 0
 6be:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <drawBigDigits>
	drawBigDigits(1, 4);
 6c2:	64 e0       	ldi	r22, 0x04	; 4
 6c4:	81 e0       	ldi	r24, 0x01	; 1
 6c6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <drawBigDigits>
	drawBigDigits(2, 9);
 6ca:	69 e0       	ldi	r22, 0x09	; 9
 6cc:	82 e0       	ldi	r24, 0x02	; 2
 6ce:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <drawBigDigits>
	drawBigDigits(3, 13);
 6d2:	6d e0       	ldi	r22, 0x0D	; 13
 6d4:	83 e0       	ldi	r24, 0x03	; 3
 6d6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <drawBigDigits>
	
	while (1)
	{
		LCD_String("+ ", 0, 7);
 6da:	47 e0       	ldi	r20, 0x07	; 7
 6dc:	60 e0       	ldi	r22, 0x00	; 0
 6de:	8d e5       	ldi	r24, 0x5D	; 93
 6e0:	91 e0       	ldi	r25, 0x01	; 1
 6e2:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String(" +", 1, 7);
 6e6:	47 e0       	ldi	r20, 0x07	; 7
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	80 e6       	ldi	r24, 0x60	; 96
 6ec:	91 e0       	ldi	r25, 0x01	; 1
 6ee:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String("+", 1, 3);
 6f2:	43 e0       	ldi	r20, 0x03	; 3
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	81 e6       	ldi	r24, 0x61	; 97
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String("+", 0, 12);
 6fe:	4c e0       	ldi	r20, 0x0C	; 12
 700:	60 e0       	ldi	r22, 0x00	; 0
 702:	81 e6       	ldi	r24, 0x61	; 97
 704:	91 e0       	ldi	r25, 0x01	; 1
 706:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String(" ", 0, 3);
 70a:	43 e0       	ldi	r20, 0x03	; 3
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	8b e5       	ldi	r24, 0x5B	; 91
 710:	91 e0       	ldi	r25, 0x01	; 1
 712:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String(" ", 1, 12);
 716:	4c e0       	ldi	r20, 0x0C	; 12
 718:	61 e0       	ldi	r22, 0x01	; 1
 71a:	8b e5       	ldi	r24, 0x5B	; 91
 71c:	91 e0       	ldi	r25, 0x01	; 1
 71e:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
 722:	2f ef       	ldi	r18, 0xFF	; 255
 724:	83 ed       	ldi	r24, 0xD3	; 211
 726:	90 e3       	ldi	r25, 0x30	; 48
 728:	21 50       	subi	r18, 0x01	; 1
 72a:	80 40       	sbci	r24, 0x00	; 0
 72c:	90 40       	sbci	r25, 0x00	; 0
 72e:	e1 f7       	brne	.-8      	; 0x728 <main+0x9a>
 730:	00 c0       	rjmp	.+0      	; 0x732 <main+0xa4>
 732:	00 00       	nop
		
		_delay_ms(1000);
		
		LCD_String(" +", 0, 7);
 734:	47 e0       	ldi	r20, 0x07	; 7
 736:	60 e0       	ldi	r22, 0x00	; 0
 738:	80 e6       	ldi	r24, 0x60	; 96
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String("+ ", 1, 7);
 740:	47 e0       	ldi	r20, 0x07	; 7
 742:	61 e0       	ldi	r22, 0x01	; 1
 744:	8d e5       	ldi	r24, 0x5D	; 93
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String("+", 1, 3);
 74c:	43 e0       	ldi	r20, 0x03	; 3
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	81 e6       	ldi	r24, 0x61	; 97
 752:	91 e0       	ldi	r25, 0x01	; 1
 754:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String("+", 0, 12);
 758:	4c e0       	ldi	r20, 0x0C	; 12
 75a:	60 e0       	ldi	r22, 0x00	; 0
 75c:	81 e6       	ldi	r24, 0x61	; 97
 75e:	91 e0       	ldi	r25, 0x01	; 1
 760:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String(" ", 0, 3);
 764:	43 e0       	ldi	r20, 0x03	; 3
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	8b e5       	ldi	r24, 0x5B	; 91
 76a:	91 e0       	ldi	r25, 0x01	; 1
 76c:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
		LCD_String(" ", 1, 12);
 770:	4c e0       	ldi	r20, 0x0C	; 12
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	8b e5       	ldi	r24, 0x5B	; 91
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 b8 01 	call	0x370	; 0x370 <LCD_String>
 77c:	2f ef       	ldi	r18, 0xFF	; 255
 77e:	83 ed       	ldi	r24, 0xD3	; 211
 780:	90 e3       	ldi	r25, 0x30	; 48
 782:	21 50       	subi	r18, 0x01	; 1
 784:	80 40       	sbci	r24, 0x00	; 0
 786:	90 40       	sbci	r25, 0x00	; 0
 788:	e1 f7       	brne	.-8      	; 0x782 <main+0xf4>
 78a:	00 c0       	rjmp	.+0      	; 0x78c <main+0xfe>
 78c:	00 00       	nop
 78e:	a5 cf       	rjmp	.-182    	; 0x6da <main+0x4c>

00000790 <__tablejump2__>:
 790:	ee 0f       	add	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	05 90       	lpm	r0, Z+
 796:	f4 91       	lpm	r31, Z
 798:	e0 2d       	mov	r30, r0
 79a:	09 94       	ijmp

0000079c <_exit>:
 79c:	f8 94       	cli

0000079e <__stop_program>:
 79e:	ff cf       	rjmp	.-2      	; 0x79e <__stop_program>
