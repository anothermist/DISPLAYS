
HD44780.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000632  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000632  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800168  00800168  0000072e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000760  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a7a  00000000  00000000  000008a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  00002322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009df  00000000  00000000  00002bba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000359c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ba  00000000  00000000  000037d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a10  00000000  00000000  00003d92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  000047a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	57 01       	movw	r10, r14
  6a:	7a 01       	movw	r14, r20
  6c:	9e 01       	movw	r18, r28
  6e:	c1 01       	movw	r24, r2
  70:	e4 01       	movw	r28, r8
  72:	09 02       	muls	r16, r25
  74:	2c 02       	muls	r18, r28
  76:	4f 02       	muls	r20, r31
  78:	74 02       	muls	r23, r20
  7a:	97 02       	muls	r25, r23

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e3       	ldi	r30, 0x32	; 50
  90:	f6 e0       	ldi	r31, 0x06	; 6
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a8 36       	cpi	r26, 0x68	; 104
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a8 e6       	ldi	r26, 0x68	; 104
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 36       	cpi	r26, 0x69	; 105
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  b2:	0c 94 17 03 	jmp	0x62e	; 0x62e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <lcd_write_nibble>:
	va_list args;
	va_start(args, format);
	vsnprintf(lcd_buffer, LCD_COL_COUNT + 1, format, args);
	va_end(args);
	lcd_puts(lcd_buffer);
}
  ba:	2b b1       	in	r18, 0x0b	; 11
  bc:	30 e1       	ldi	r19, 0x10	; 16
  be:	83 9f       	mul	r24, r19
  c0:	c0 01       	movw	r24, r0
  c2:	11 24       	eor	r1, r1
  c4:	2f 70       	andi	r18, 0x0F	; 15
  c6:	82 2b       	or	r24, r18
  c8:	8b b9       	out	0x0b, r24	; 11
  ca:	8b b1       	in	r24, 0x0b	; 11
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	8b b9       	out	0x0b, r24	; 11
  d0:	8b b1       	in	r24, 0x0b	; 11
  d2:	88 60       	ori	r24, 0x08	; 8
  d4:	8b b9       	out	0x0b, r24	; 11
  d6:	8b b1       	in	r24, 0x0b	; 11
  d8:	87 7f       	andi	r24, 0xF7	; 247
  da:	8b b9       	out	0x0b, r24	; 11
  dc:	8f ea       	ldi	r24, 0xAF	; 175
  de:	94 e0       	ldi	r25, 0x04	; 4
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_write_nibble+0x26>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_write_nibble+0x2c>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <lcd_send>:
  ea:	cf 93       	push	r28
  ec:	c8 2f       	mov	r28, r24
  ee:	66 23       	and	r22, r22
  f0:	21 f0       	breq	.+8      	; 0xfa <lcd_send+0x10>
  f2:	8b b1       	in	r24, 0x0b	; 11
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	8b b9       	out	0x0b, r24	; 11
  f8:	03 c0       	rjmp	.+6      	; 0x100 <lcd_send+0x16>
  fa:	8b b1       	in	r24, 0x0b	; 11
  fc:	8b 7f       	andi	r24, 0xFB	; 251
  fe:	8b b9       	out	0x0b, r24	; 11
 100:	8c 2f       	mov	r24, r28
 102:	82 95       	swap	r24
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 110:	cf 91       	pop	r28
 112:	08 95       	ret

00000114 <lcd_command>:
 114:	60 e0       	ldi	r22, 0x00	; 0
 116:	0e 94 75 00 	call	0xea	; 0xea <lcd_send>
 11a:	08 95       	ret

0000011c <lcd_write>:
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 75 00 	call	0xea	; 0xea <lcd_send>
 122:	08 95       	ret

00000124 <lcd_on>:
 124:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <__data_end>
 128:	98 2f       	mov	r25, r24
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	90 93 68 01 	sts	0x0168, r25	; 0x800168 <__data_end>
 130:	8c 60       	ori	r24, 0x0C	; 12
 132:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 136:	08 95       	ret

00000138 <lcd_clear>:
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 13e:	8f e3       	ldi	r24, 0x3F	; 63
 140:	9f e1       	ldi	r25, 0x1F	; 31
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <lcd_clear+0xa>
 146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_clear+0x10>
 148:	00 00       	nop
 14a:	08 95       	ret

0000014c <lcd_create_char>:
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	8b 01       	movw	r16, r22
 156:	87 70       	andi	r24, 0x07	; 7
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	80 64       	ori	r24, 0x40	; 64
 168:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	07 c0       	rjmp	.+14     	; 0x180 <lcd_create_char+0x34>
 172:	f8 01       	movw	r30, r16
 174:	ec 0f       	add	r30, r28
 176:	fd 1f       	adc	r31, r29
 178:	80 81       	ld	r24, Z
 17a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
 17e:	21 96       	adiw	r28, 0x01	; 1
 180:	c8 30       	cpi	r28, 0x08	; 8
 182:	d1 05       	cpc	r29, r1
 184:	b4 f3       	brlt	.-20     	; 0x172 <lcd_create_char+0x26>
 186:	80 e8       	ldi	r24, 0x80	; 128
 188:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	1f 91       	pop	r17
 192:	0f 91       	pop	r16
 194:	08 95       	ret

00000196 <lcd_init>:
 196:	cf 93       	push	r28
 198:	8a b1       	in	r24, 0x0a	; 10
 19a:	8c 6f       	ori	r24, 0xFC	; 252
 19c:	8a b9       	out	0x0a, r24	; 10
 19e:	8f e5       	ldi	r24, 0x5F	; 95
 1a0:	9a ee       	ldi	r25, 0xEA	; 234
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <lcd_init+0xc>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <lcd_init+0x12>
 1a8:	00 00       	nop
 1aa:	8b b1       	in	r24, 0x0b	; 11
 1ac:	83 7f       	andi	r24, 0xF3	; 243
 1ae:	8b b9       	out	0x0b, r24	; 11
 1b0:	8f e0       	ldi	r24, 0x0F	; 15
 1b2:	90 e4       	ldi	r25, 0x40	; 64
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <lcd_init+0x1e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <lcd_init+0x24>
 1ba:	00 00       	nop
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	90 e4       	ldi	r25, 0x40	; 64
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x30>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <lcd_init+0x36>
 1cc:	00 00       	nop
 1ce:	83 e0       	ldi	r24, 0x03	; 3
 1d0:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 1d4:	8f e0       	ldi	r24, 0x0F	; 15
 1d6:	90 e4       	ldi	r25, 0x40	; 64
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <lcd_init+0x42>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <lcd_init+0x48>
 1de:	00 00       	nop
 1e0:	83 e0       	ldi	r24, 0x03	; 3
 1e2:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 1e6:	8f e0       	ldi	r24, 0x0F	; 15
 1e8:	90 e4       	ldi	r25, 0x40	; 64
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_init+0x54>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <lcd_init+0x5a>
 1f0:	00 00       	nop
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	0e 94 5d 00 	call	0xba	; 0xba <lcd_write_nibble>
 1f8:	88 e2       	ldi	r24, 0x28	; 40
 1fa:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 1fe:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <__data_end>
 202:	88 e0       	ldi	r24, 0x08	; 8
 204:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 208:	c0 e0       	ldi	r28, 0x00	; 0
 20a:	0e c0       	rjmp	.+28     	; 0x228 <lcd_init+0x92>
 20c:	6c 2f       	mov	r22, r28
 20e:	70 e0       	ldi	r23, 0x00	; 0
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	66 0f       	add	r22, r22
 216:	77 1f       	adc	r23, r23
 218:	66 0f       	add	r22, r22
 21a:	77 1f       	adc	r23, r23
 21c:	60 50       	subi	r22, 0x00	; 0
 21e:	7f 4f       	sbci	r23, 0xFF	; 255
 220:	8c 2f       	mov	r24, r28
 222:	0e 94 a6 00 	call	0x14c	; 0x14c <lcd_create_char>
 226:	cf 5f       	subi	r28, 0xFF	; 255
 228:	c8 30       	cpi	r28, 0x08	; 8
 22a:	80 f3       	brcs	.-32     	; 0x20c <lcd_init+0x76>
 22c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_on>
 230:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clear>
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <lcd_string>:
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	ec 01       	movw	r28, r24
 23e:	e6 2f       	mov	r30, r22
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	e0 5c       	subi	r30, 0xC0	; 192
 244:	fe 4f       	sbci	r31, 0xFE	; 254
 246:	80 81       	ld	r24, Z
 248:	84 0f       	add	r24, r20
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
 250:	03 c0       	rjmp	.+6      	; 0x258 <lcd_string+0x20>
 252:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
 256:	21 96       	adiw	r28, 0x01	; 1
 258:	88 81       	ld	r24, Y
 25a:	81 11       	cpse	r24, r1
 25c:	fa cf       	rjmp	.-12     	; 0x252 <lcd_string+0x1a>
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <lcd_symbol>:

#define FirstStr_StartPosition_DDRAM_Addr 0x80
#define SecondStr_StartPosition_DDRAM_Addr 0xC0

void lcd_symbol(unsigned char Addr, unsigned char Str, unsigned char Cursor) {
 264:	cf 93       	push	r28
 266:	c8 2f       	mov	r28, r24
	unsigned char x = 0;
	
	if (Str == 0) {
 268:	61 11       	cpse	r22, r1
 26a:	08 c0       	rjmp	.+16     	; 0x27c <lcd_symbol+0x18>
		x = FirstStr_StartPosition_DDRAM_Addr + Cursor;
		lcd_command(x);
 26c:	80 e8       	ldi	r24, 0x80	; 128
 26e:	84 0f       	add	r24, r20
 270:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
		lcd_write(Addr);
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
 27a:	09 c0       	rjmp	.+18     	; 0x28e <lcd_symbol+0x2a>
	}
	else
	if (Str == 1) {
 27c:	61 30       	cpi	r22, 0x01	; 1
 27e:	39 f4       	brne	.+14     	; 0x28e <lcd_symbol+0x2a>
		x = SecondStr_StartPosition_DDRAM_Addr + Cursor;
		lcd_command(x);
 280:	80 ec       	ldi	r24, 0xC0	; 192
 282:	84 0f       	add	r24, r20
 284:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_command>
		lcd_write(Addr);
 288:	8c 2f       	mov	r24, r28
 28a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_write>
	}
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <lcd_drawBigDigits>:

void lcd_drawBigDigits(unsigned char digit, unsigned char place) {
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
	
	switch (digit) {
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	8a 30       	cpi	r24, 0x0A	; 10
 29c:	91 05       	cpc	r25, r1
 29e:	08 f0       	brcs	.+2      	; 0x2a2 <lcd_drawBigDigits+0x10>
 2a0:	68 c1       	rjmp	.+720    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
 2a2:	c6 2f       	mov	r28, r22
 2a4:	fc 01       	movw	r30, r24
 2a6:	ec 5c       	subi	r30, 0xCC	; 204
 2a8:	ff 4f       	sbci	r31, 0xFF	; 255
 2aa:	0c 94 11 03 	jmp	0x622	; 0x622 <__tablejump2__>
		
		case 0:
		lcd_symbol(0, 0, place);
 2ae:	46 2f       	mov	r20, r22
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(1, 0, place + 1);
 2b8:	11 e0       	ldi	r17, 0x01	; 1
 2ba:	1c 0f       	add	r17, r28
 2bc:	41 2f       	mov	r20, r17
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 2c6:	d2 e0       	ldi	r29, 0x02	; 2
 2c8:	dc 0f       	add	r29, r28
 2ca:	4d 2f       	mov	r20, r29
 2cc:	60 e0       	ldi	r22, 0x00	; 0
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(3, 1, place);
 2d4:	4c 2f       	mov	r20, r28
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	83 e0       	ldi	r24, 0x03	; 3
 2da:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 2de:	41 2f       	mov	r20, r17
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	84 e0       	ldi	r24, 0x04	; 4
 2e4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 2e8:	4d 2f       	mov	r20, r29
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	85 e0       	ldi	r24, 0x05	; 5
 2ee:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 2f2:	3f c1       	rjmp	.+638    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 1:
		lcd_symbol(1, 0, place);
 2f4:	46 2f       	mov	r20, r22
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 1);
 2fe:	11 e0       	ldi	r17, 0x01	; 1
 300:	1c 0f       	add	r17, r28
 302:	41 2f       	mov	r20, r17
 304:	60 e0       	ldi	r22, 0x00	; 0
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_string(" ", 0, place + 2);
 30c:	d2 e0       	ldi	r29, 0x02	; 2
 30e:	dc 0f       	add	r29, r28
 310:	4d 2f       	mov	r20, r29
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	83 e6       	ldi	r24, 0x63	; 99
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_symbol(4, 1, place);
 31c:	4c 2f       	mov	r20, r28
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	84 e0       	ldi	r24, 0x04	; 4
 322:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(7, 1, place + 1);
 326:	41 2f       	mov	r20, r17
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	87 e0       	ldi	r24, 0x07	; 7
 32c:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 2);
 330:	4d 2f       	mov	r20, r29
 332:	61 e0       	ldi	r22, 0x01	; 1
 334:	84 e0       	ldi	r24, 0x04	; 4
 336:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 33a:	1b c1       	rjmp	.+566    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 2:
		lcd_symbol(6, 0, place);
 33c:	46 2f       	mov	r20, r22
 33e:	60 e0       	ldi	r22, 0x00	; 0
 340:	86 e0       	ldi	r24, 0x06	; 6
 342:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 346:	11 e0       	ldi	r17, 0x01	; 1
 348:	1c 0f       	add	r17, r28
 34a:	41 2f       	mov	r20, r17
 34c:	60 e0       	ldi	r22, 0x00	; 0
 34e:	86 e0       	ldi	r24, 0x06	; 6
 350:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 354:	d2 e0       	ldi	r29, 0x02	; 2
 356:	dc 0f       	add	r29, r28
 358:	4d 2f       	mov	r20, r29
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(3, 1, place);
 362:	4c 2f       	mov	r20, r28
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 36c:	41 2f       	mov	r20, r17
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	84 e0       	ldi	r24, 0x04	; 4
 372:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 2);
 376:	4d 2f       	mov	r20, r29
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	84 e0       	ldi	r24, 0x04	; 4
 37c:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 380:	f8 c0       	rjmp	.+496    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 3:
		lcd_symbol(6, 0, place);
 382:	46 2f       	mov	r20, r22
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	86 e0       	ldi	r24, 0x06	; 6
 388:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 38c:	11 e0       	ldi	r17, 0x01	; 1
 38e:	1c 0f       	add	r17, r28
 390:	41 2f       	mov	r20, r17
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	86 e0       	ldi	r24, 0x06	; 6
 396:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 39a:	d2 e0       	ldi	r29, 0x02	; 2
 39c:	dc 0f       	add	r29, r28
 39e:	4d 2f       	mov	r20, r29
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	82 e0       	ldi	r24, 0x02	; 2
 3a4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place);
 3a8:	4c 2f       	mov	r20, r28
 3aa:	61 e0       	ldi	r22, 0x01	; 1
 3ac:	84 e0       	ldi	r24, 0x04	; 4
 3ae:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 3b2:	41 2f       	mov	r20, r17
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	84 e0       	ldi	r24, 0x04	; 4
 3b8:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 3bc:	4d 2f       	mov	r20, r29
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	85 e0       	ldi	r24, 0x05	; 5
 3c2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 3c6:	d5 c0       	rjmp	.+426    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 4:
		lcd_symbol(3, 0, place);
 3c8:	46 2f       	mov	r20, r22
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 0, place + 1);
 3d2:	11 e0       	ldi	r17, 0x01	; 1
 3d4:	1c 0f       	add	r17, r28
 3d6:	41 2f       	mov	r20, r17
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	84 e0       	ldi	r24, 0x04	; 4
 3dc:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(7, 0, place + 2);
 3e0:	d2 e0       	ldi	r29, 0x02	; 2
 3e2:	dc 0f       	add	r29, r28
 3e4:	4d 2f       	mov	r20, r29
 3e6:	60 e0       	ldi	r22, 0x00	; 0
 3e8:	87 e0       	ldi	r24, 0x07	; 7
 3ea:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_string(" ", 1, place);
 3ee:	4c 2f       	mov	r20, r28
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	83 e6       	ldi	r24, 0x63	; 99
 3f4:	91 e0       	ldi	r25, 0x01	; 1
 3f6:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_string(" ", 1, place + 1);
 3fa:	41 2f       	mov	r20, r17
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	83 e6       	ldi	r24, 0x63	; 99
 400:	91 e0       	ldi	r25, 0x01	; 1
 402:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_symbol(7, 1, place + 2);
 406:	4d 2f       	mov	r20, r29
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	87 e0       	ldi	r24, 0x07	; 7
 40c:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 410:	b0 c0       	rjmp	.+352    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 5:
		lcd_symbol(3, 0, place);
 412:	46 2f       	mov	r20, r22
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	83 e0       	ldi	r24, 0x03	; 3
 418:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 41c:	11 e0       	ldi	r17, 0x01	; 1
 41e:	1c 0f       	add	r17, r28
 420:	41 2f       	mov	r20, r17
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	86 e0       	ldi	r24, 0x06	; 6
 426:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 2);
 42a:	d2 e0       	ldi	r29, 0x02	; 2
 42c:	dc 0f       	add	r29, r28
 42e:	4d 2f       	mov	r20, r29
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	86 e0       	ldi	r24, 0x06	; 6
 434:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place);
 438:	4c 2f       	mov	r20, r28
 43a:	61 e0       	ldi	r22, 0x01	; 1
 43c:	84 e0       	ldi	r24, 0x04	; 4
 43e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 442:	41 2f       	mov	r20, r17
 444:	61 e0       	ldi	r22, 0x01	; 1
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 44c:	4d 2f       	mov	r20, r29
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	85 e0       	ldi	r24, 0x05	; 5
 452:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 456:	8d c0       	rjmp	.+282    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 6:
		lcd_symbol(0, 0, place);
 458:	46 2f       	mov	r20, r22
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 462:	11 e0       	ldi	r17, 0x01	; 1
 464:	1c 0f       	add	r17, r28
 466:	41 2f       	mov	r20, r17
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	86 e0       	ldi	r24, 0x06	; 6
 46c:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 2);
 470:	d2 e0       	ldi	r29, 0x02	; 2
 472:	dc 0f       	add	r29, r28
 474:	4d 2f       	mov	r20, r29
 476:	60 e0       	ldi	r22, 0x00	; 0
 478:	86 e0       	ldi	r24, 0x06	; 6
 47a:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(3, 1, place);
 47e:	4c 2f       	mov	r20, r28
 480:	61 e0       	ldi	r22, 0x01	; 1
 482:	83 e0       	ldi	r24, 0x03	; 3
 484:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 488:	41 2f       	mov	r20, r17
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	84 e0       	ldi	r24, 0x04	; 4
 48e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 492:	4d 2f       	mov	r20, r29
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	85 e0       	ldi	r24, 0x05	; 5
 498:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 49c:	6a c0       	rjmp	.+212    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 7:
		lcd_symbol(1, 0, place);
 49e:	46 2f       	mov	r20, r22
 4a0:	60 e0       	ldi	r22, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(1, 0, place + 1);
 4a8:	11 e0       	ldi	r17, 0x01	; 1
 4aa:	1c 0f       	add	r17, r28
 4ac:	41 2f       	mov	r20, r17
 4ae:	60 e0       	ldi	r22, 0x00	; 0
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 4b6:	d2 e0       	ldi	r29, 0x02	; 2
 4b8:	dc 0f       	add	r29, r28
 4ba:	4d 2f       	mov	r20, r29
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	82 e0       	ldi	r24, 0x02	; 2
 4c0:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_string(" ", 1, place);
 4c4:	4c 2f       	mov	r20, r28
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	83 e6       	ldi	r24, 0x63	; 99
 4ca:	91 e0       	ldi	r25, 0x01	; 1
 4cc:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_string(" ", 1, place + 1);
 4d0:	41 2f       	mov	r20, r17
 4d2:	61 e0       	ldi	r22, 0x01	; 1
 4d4:	83 e6       	ldi	r24, 0x63	; 99
 4d6:	91 e0       	ldi	r25, 0x01	; 1
 4d8:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_symbol(7, 1, place + 2);
 4dc:	4d 2f       	mov	r20, r29
 4de:	61 e0       	ldi	r22, 0x01	; 1
 4e0:	87 e0       	ldi	r24, 0x07	; 7
 4e2:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 4e6:	45 c0       	rjmp	.+138    	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 8:
		lcd_symbol(0, 0, place);
 4e8:	46 2f       	mov	r20, r22
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	80 e0       	ldi	r24, 0x00	; 0
 4ee:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 4f2:	11 e0       	ldi	r17, 0x01	; 1
 4f4:	1c 0f       	add	r17, r28
 4f6:	41 2f       	mov	r20, r17
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	86 e0       	ldi	r24, 0x06	; 6
 4fc:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 500:	d2 e0       	ldi	r29, 0x02	; 2
 502:	dc 0f       	add	r29, r28
 504:	4d 2f       	mov	r20, r29
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	82 e0       	ldi	r24, 0x02	; 2
 50a:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(3, 1, place);
 50e:	4c 2f       	mov	r20, r28
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	83 e0       	ldi	r24, 0x03	; 3
 514:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 518:	41 2f       	mov	r20, r17
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	84 e0       	ldi	r24, 0x04	; 4
 51e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 522:	4d 2f       	mov	r20, r29
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	85 e0       	ldi	r24, 0x05	; 5
 528:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
 52c:	22 c0       	rjmp	.+68     	; 0x572 <__EEPROM_REGION_LENGTH__+0x172>
		
		case 9:
		lcd_symbol(0, 0, place);
 52e:	46 2f       	mov	r20, r22
 530:	60 e0       	ldi	r22, 0x00	; 0
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(6, 0, place + 1);
 538:	11 e0       	ldi	r17, 0x01	; 1
 53a:	1c 0f       	add	r17, r28
 53c:	41 2f       	mov	r20, r17
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	86 e0       	ldi	r24, 0x06	; 6
 542:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(2, 0, place + 2);
 546:	d2 e0       	ldi	r29, 0x02	; 2
 548:	dc 0f       	add	r29, r28
 54a:	4d 2f       	mov	r20, r29
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	82 e0       	ldi	r24, 0x02	; 2
 550:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place);
 554:	4c 2f       	mov	r20, r28
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	84 e0       	ldi	r24, 0x04	; 4
 55a:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(4, 1, place + 1);
 55e:	41 2f       	mov	r20, r17
 560:	61 e0       	ldi	r22, 0x01	; 1
 562:	84 e0       	ldi	r24, 0x04	; 4
 564:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		lcd_symbol(5, 1, place + 2);
 568:	4d 2f       	mov	r20, r29
 56a:	61 e0       	ldi	r22, 0x01	; 1
 56c:	85 e0       	ldi	r24, 0x05	; 5
 56e:	0e 94 32 01 	call	0x264	; 0x264 <lcd_symbol>
		break;
	}
}
 572:	df 91       	pop	r29
 574:	cf 91       	pop	r28
 576:	1f 91       	pop	r17
 578:	08 95       	ret

0000057a <main>:
#include "main.h"

int main(void) {

	lcd_init();
 57a:	0e 94 cb 00 	call	0x196	; 0x196 <lcd_init>

	lcd_string("LCD STRING 0 3", 0, 3);
 57e:	43 e0       	ldi	r20, 0x03	; 3
 580:	60 e0       	ldi	r22, 0x00	; 0
 582:	84 e4       	ldi	r24, 0x44	; 68
 584:	91 e0       	ldi	r25, 0x01	; 1
 586:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
	lcd_string("LCD STRING 1 3", 1, 3);
 58a:	43 e0       	ldi	r20, 0x03	; 3
 58c:	61 e0       	ldi	r22, 0x01	; 1
 58e:	83 e5       	ldi	r24, 0x53	; 83
 590:	91 e0       	ldi	r25, 0x01	; 1
 592:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 596:	2f ef       	ldi	r18, 0xFF	; 255
 598:	8b e7       	ldi	r24, 0x7B	; 123
 59a:	92 e9       	ldi	r25, 0x92	; 146
 59c:	21 50       	subi	r18, 0x01	; 1
 59e:	80 40       	sbci	r24, 0x00	; 0
 5a0:	90 40       	sbci	r25, 0x00	; 0
 5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x22>
 5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x2c>
 5a6:	00 00       	nop

	_delay_ms(3000);
	lcd_clear();
 5a8:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_clear>
	
	unsigned int rtc_Hrs = 12;
	unsigned int rtc_Min = 45;
	
	lcd_drawBigDigits(rtc_Hrs/10, 0);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_drawBigDigits>
	lcd_drawBigDigits(rtc_Hrs % 10, 4);
 5b4:	64 e0       	ldi	r22, 0x04	; 4
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_drawBigDigits>
	lcd_drawBigDigits(rtc_Min/10, 9);
 5bc:	69 e0       	ldi	r22, 0x09	; 9
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	0e 94 49 01 	call	0x292	; 0x292 <lcd_drawBigDigits>
	lcd_drawBigDigits(rtc_Min % 10, 13);
 5c4:	6d e0       	ldi	r22, 0x0D	; 13
 5c6:	85 e0       	ldi	r24, 0x05	; 5
 5c8:	0e 94 49 01 	call	0x292	; 0x292 <lcd_drawBigDigits>
	
	while (1) {
		lcd_string("* ", 0, 7);
 5cc:	47 e0       	ldi	r20, 0x07	; 7
 5ce:	60 e0       	ldi	r22, 0x00	; 0
 5d0:	82 e6       	ldi	r24, 0x62	; 98
 5d2:	91 e0       	ldi	r25, 0x01	; 1
 5d4:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_string(" *", 1, 7);
 5d8:	47 e0       	ldi	r20, 0x07	; 7
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	85 e6       	ldi	r24, 0x65	; 101
 5de:	91 e0       	ldi	r25, 0x01	; 1
 5e0:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
 5e4:	2f ef       	ldi	r18, 0xFF	; 255
 5e6:	83 ed       	ldi	r24, 0xD3	; 211
 5e8:	90 e3       	ldi	r25, 0x30	; 48
 5ea:	21 50       	subi	r18, 0x01	; 1
 5ec:	80 40       	sbci	r24, 0x00	; 0
 5ee:	90 40       	sbci	r25, 0x00	; 0
 5f0:	e1 f7       	brne	.-8      	; 0x5ea <main+0x70>
 5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <main+0x7a>
 5f4:	00 00       	nop
		_delay_ms(1000);
		lcd_string(" *", 0, 7);
 5f6:	47 e0       	ldi	r20, 0x07	; 7
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	85 e6       	ldi	r24, 0x65	; 101
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
		lcd_string("* ", 1, 7);
 602:	47 e0       	ldi	r20, 0x07	; 7
 604:	61 e0       	ldi	r22, 0x01	; 1
 606:	82 e6       	ldi	r24, 0x62	; 98
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_string>
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	83 ed       	ldi	r24, 0xD3	; 211
 612:	90 e3       	ldi	r25, 0x30	; 48
 614:	21 50       	subi	r18, 0x01	; 1
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	90 40       	sbci	r25, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <main+0x9a>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0xa4>
 61e:	00 00       	nop
 620:	d5 cf       	rjmp	.-86     	; 0x5cc <main+0x52>

00000622 <__tablejump2__>:
 622:	ee 0f       	add	r30, r30
 624:	ff 1f       	adc	r31, r31
 626:	05 90       	lpm	r0, Z+
 628:	f4 91       	lpm	r31, Z
 62a:	e0 2d       	mov	r30, r0
 62c:	09 94       	ijmp

0000062e <_exit>:
 62e:	f8 94       	cli

00000630 <__stop_program>:
 630:	ff cf       	rjmp	.-2      	; 0x630 <__stop_program>
