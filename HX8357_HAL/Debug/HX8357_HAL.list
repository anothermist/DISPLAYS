
HX8357_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035e4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b68  080036f0  080036f0  000046f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005258  08005258  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  08005258  08005258  00006258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005260  08005260  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005260  08005260  00006260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005264  08005264  00006264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005268  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  2000000c  08005274  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000120  08005274  00007120  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d89d  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6b  00000000  00000000  000148d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00016340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f7  00000000  00000000  00016ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017c1c  00000000  00000000  00017797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed0c  00000000  00000000  0002f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089126  00000000  00000000  0003e0bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c71e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fdc  00000000  00000000  000c7228  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000ca204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080036d8 	.word	0x080036d8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080036d8 	.word	0x080036d8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000160:	4b08      	ldr	r3, [pc, #32]	@ (8000184 <HAL_Init+0x28>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a07      	ldr	r2, [pc, #28]	@ (8000184 <HAL_Init+0x28>)
 8000166:	f043 0310 	orr.w	r3, r3, #16
 800016a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800016c:	2003      	movs	r0, #3
 800016e:	f000 f92b 	bl	80003c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000172:	2000      	movs	r0, #0
 8000174:	f000 f808 	bl	8000188 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000178:	f003 f8ca 	bl	8003310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800017c:	2300      	movs	r3, #0
}
 800017e:	4618      	mov	r0, r3
 8000180:	bd80      	pop	{r7, pc}
 8000182:	bf00      	nop
 8000184:	40022000 	.word	0x40022000

08000188 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
 800018e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000190:	4b12      	ldr	r3, [pc, #72]	@ (80001dc <HAL_InitTick+0x54>)
 8000192:	681a      	ldr	r2, [r3, #0]
 8000194:	4b12      	ldr	r3, [pc, #72]	@ (80001e0 <HAL_InitTick+0x58>)
 8000196:	781b      	ldrb	r3, [r3, #0]
 8000198:	4619      	mov	r1, r3
 800019a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800019e:	fbb3 f3f1 	udiv	r3, r3, r1
 80001a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 f935 	bl	8000416 <HAL_SYSTICK_Config>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80001b2:	2301      	movs	r3, #1
 80001b4:	e00e      	b.n	80001d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	d80a      	bhi.n	80001d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001bc:	2200      	movs	r2, #0
 80001be:	6879      	ldr	r1, [r7, #4]
 80001c0:	f04f 30ff 	mov.w	r0, #4294967295
 80001c4:	f000 f90b 	bl	80003de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001c8:	4a06      	ldr	r2, [pc, #24]	@ (80001e4 <HAL_InitTick+0x5c>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80001ce:	2300      	movs	r3, #0
 80001d0:	e000      	b.n	80001d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80001d2:	2301      	movs	r3, #1
}
 80001d4:	4618      	mov	r0, r3
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	20000004 	.word	0x20000004
 80001e4:	20000000 	.word	0x20000000

080001e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80001ec:	4b05      	ldr	r3, [pc, #20]	@ (8000204 <HAL_IncTick+0x1c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	461a      	mov	r2, r3
 80001f2:	4b05      	ldr	r3, [pc, #20]	@ (8000208 <HAL_IncTick+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4413      	add	r3, r2
 80001f8:	4a03      	ldr	r2, [pc, #12]	@ (8000208 <HAL_IncTick+0x20>)
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	20000004 	.word	0x20000004
 8000208:	20000028 	.word	0x20000028

0800020c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
  return uwTick;
 8000210:	4b02      	ldr	r3, [pc, #8]	@ (800021c <HAL_GetTick+0x10>)
 8000212:	681b      	ldr	r3, [r3, #0]
}
 8000214:	4618      	mov	r0, r3
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	20000028 	.word	0x20000028

08000220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000228:	f7ff fff0 	bl	800020c <HAL_GetTick>
 800022c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000238:	d005      	beq.n	8000246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800023a:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <HAL_Delay+0x44>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	461a      	mov	r2, r3
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	4413      	add	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000246:	bf00      	nop
 8000248:	f7ff ffe0 	bl	800020c <HAL_GetTick>
 800024c:	4602      	mov	r2, r0
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	1ad3      	subs	r3, r2, r3
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d8f7      	bhi.n	8000248 <HAL_Delay+0x28>
  {
  }
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	3710      	adds	r7, #16
 800025e:	46bd      	mov	sp, r7
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	20000004 	.word	0x20000004

08000268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	f003 0307 	and.w	r3, r3, #7
 8000276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000284:	4013      	ands	r3, r2
 8000286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000290:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000294:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000298:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800029a:	4a04      	ldr	r2, [pc, #16]	@ (80002ac <__NVIC_SetPriorityGrouping+0x44>)
 800029c:	68bb      	ldr	r3, [r7, #8]
 800029e:	60d3      	str	r3, [r2, #12]
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	e000ed00 	.word	0xe000ed00

080002b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__NVIC_GetPriorityGrouping+0x18>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	0a1b      	lsrs	r3, r3, #8
 80002ba:	f003 0307 	and.w	r3, r3, #7
}
 80002be:	4618      	mov	r0, r3
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	4603      	mov	r3, r0
 80002d4:	6039      	str	r1, [r7, #0]
 80002d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	db0a      	blt.n	80002f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	683b      	ldr	r3, [r7, #0]
 80002e2:	b2da      	uxtb	r2, r3
 80002e4:	490c      	ldr	r1, [pc, #48]	@ (8000318 <__NVIC_SetPriority+0x4c>)
 80002e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ea:	0112      	lsls	r2, r2, #4
 80002ec:	b2d2      	uxtb	r2, r2
 80002ee:	440b      	add	r3, r1
 80002f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002f4:	e00a      	b.n	800030c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	b2da      	uxtb	r2, r3
 80002fa:	4908      	ldr	r1, [pc, #32]	@ (800031c <__NVIC_SetPriority+0x50>)
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	f003 030f 	and.w	r3, r3, #15
 8000302:	3b04      	subs	r3, #4
 8000304:	0112      	lsls	r2, r2, #4
 8000306:	b2d2      	uxtb	r2, r2
 8000308:	440b      	add	r3, r1
 800030a:	761a      	strb	r2, [r3, #24]
}
 800030c:	bf00      	nop
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000320:	b480      	push	{r7}
 8000322:	b089      	sub	sp, #36	@ 0x24
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f003 0307 	and.w	r3, r3, #7
 8000332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	69fb      	ldr	r3, [r7, #28]
 8000336:	f1c3 0307 	rsb	r3, r3, #7
 800033a:	2b04      	cmp	r3, #4
 800033c:	bf28      	it	cs
 800033e:	2304      	movcs	r3, #4
 8000340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000342:	69fb      	ldr	r3, [r7, #28]
 8000344:	3304      	adds	r3, #4
 8000346:	2b06      	cmp	r3, #6
 8000348:	d902      	bls.n	8000350 <NVIC_EncodePriority+0x30>
 800034a:	69fb      	ldr	r3, [r7, #28]
 800034c:	3b03      	subs	r3, #3
 800034e:	e000      	b.n	8000352 <NVIC_EncodePriority+0x32>
 8000350:	2300      	movs	r3, #0
 8000352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000354:	f04f 32ff 	mov.w	r2, #4294967295
 8000358:	69bb      	ldr	r3, [r7, #24]
 800035a:	fa02 f303 	lsl.w	r3, r2, r3
 800035e:	43da      	mvns	r2, r3
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	401a      	ands	r2, r3
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000368:	f04f 31ff 	mov.w	r1, #4294967295
 800036c:	697b      	ldr	r3, [r7, #20]
 800036e:	fa01 f303 	lsl.w	r3, r1, r3
 8000372:	43d9      	mvns	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000378:	4313      	orrs	r3, r2
         );
}
 800037a:	4618      	mov	r0, r3
 800037c:	3724      	adds	r7, #36	@ 0x24
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	3b01      	subs	r3, #1
 8000390:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000394:	d301      	bcc.n	800039a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000396:	2301      	movs	r3, #1
 8000398:	e00f      	b.n	80003ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800039a:	4a0a      	ldr	r2, [pc, #40]	@ (80003c4 <SysTick_Config+0x40>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	3b01      	subs	r3, #1
 80003a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003a2:	210f      	movs	r1, #15
 80003a4:	f04f 30ff 	mov.w	r0, #4294967295
 80003a8:	f7ff ff90 	bl	80002cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003ac:	4b05      	ldr	r3, [pc, #20]	@ (80003c4 <SysTick_Config+0x40>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003b2:	4b04      	ldr	r3, [pc, #16]	@ (80003c4 <SysTick_Config+0x40>)
 80003b4:	2207      	movs	r2, #7
 80003b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003b8:	2300      	movs	r3, #0
}
 80003ba:	4618      	mov	r0, r3
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	e000e010 	.word	0xe000e010

080003c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f7ff ff49 	bl	8000268 <__NVIC_SetPriorityGrouping>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4603      	mov	r3, r0
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
 80003ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80003f0:	f7ff ff5e 	bl	80002b0 <__NVIC_GetPriorityGrouping>
 80003f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80003f6:	687a      	ldr	r2, [r7, #4]
 80003f8:	68b9      	ldr	r1, [r7, #8]
 80003fa:	6978      	ldr	r0, [r7, #20]
 80003fc:	f7ff ff90 	bl	8000320 <NVIC_EncodePriority>
 8000400:	4602      	mov	r2, r0
 8000402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000406:	4611      	mov	r1, r2
 8000408:	4618      	mov	r0, r3
 800040a:	f7ff ff5f 	bl	80002cc <__NVIC_SetPriority>
}
 800040e:	bf00      	nop
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b082      	sub	sp, #8
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800041e:	6878      	ldr	r0, [r7, #4]
 8000420:	f7ff ffb0 	bl	8000384 <SysTick_Config>
 8000424:	4603      	mov	r3, r0
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000430:	b480      	push	{r7}
 8000432:	b08b      	sub	sp, #44	@ 0x2c
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
 8000438:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800043a:	2300      	movs	r3, #0
 800043c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800043e:	2300      	movs	r3, #0
 8000440:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000442:	e169      	b.n	8000718 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000444:	2201      	movs	r2, #1
 8000446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800044e:	683b      	ldr	r3, [r7, #0]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	69fa      	ldr	r2, [r7, #28]
 8000454:	4013      	ands	r3, r2
 8000456:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000458:	69ba      	ldr	r2, [r7, #24]
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	429a      	cmp	r2, r3
 800045e:	f040 8158 	bne.w	8000712 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	4a9a      	ldr	r2, [pc, #616]	@ (80006d0 <HAL_GPIO_Init+0x2a0>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d05e      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 800046c:	4a98      	ldr	r2, [pc, #608]	@ (80006d0 <HAL_GPIO_Init+0x2a0>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d875      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 8000472:	4a98      	ldr	r2, [pc, #608]	@ (80006d4 <HAL_GPIO_Init+0x2a4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d058      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000478:	4a96      	ldr	r2, [pc, #600]	@ (80006d4 <HAL_GPIO_Init+0x2a4>)
 800047a:	4293      	cmp	r3, r2
 800047c:	d86f      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 800047e:	4a96      	ldr	r2, [pc, #600]	@ (80006d8 <HAL_GPIO_Init+0x2a8>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d052      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000484:	4a94      	ldr	r2, [pc, #592]	@ (80006d8 <HAL_GPIO_Init+0x2a8>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d869      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 800048a:	4a94      	ldr	r2, [pc, #592]	@ (80006dc <HAL_GPIO_Init+0x2ac>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d04c      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 8000490:	4a92      	ldr	r2, [pc, #584]	@ (80006dc <HAL_GPIO_Init+0x2ac>)
 8000492:	4293      	cmp	r3, r2
 8000494:	d863      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 8000496:	4a92      	ldr	r2, [pc, #584]	@ (80006e0 <HAL_GPIO_Init+0x2b0>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d046      	beq.n	800052a <HAL_GPIO_Init+0xfa>
 800049c:	4a90      	ldr	r2, [pc, #576]	@ (80006e0 <HAL_GPIO_Init+0x2b0>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d85d      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 80004a2:	2b12      	cmp	r3, #18
 80004a4:	d82a      	bhi.n	80004fc <HAL_GPIO_Init+0xcc>
 80004a6:	2b12      	cmp	r3, #18
 80004a8:	d859      	bhi.n	800055e <HAL_GPIO_Init+0x12e>
 80004aa:	a201      	add	r2, pc, #4	@ (adr r2, 80004b0 <HAL_GPIO_Init+0x80>)
 80004ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004b0:	0800052b 	.word	0x0800052b
 80004b4:	08000505 	.word	0x08000505
 80004b8:	08000517 	.word	0x08000517
 80004bc:	08000559 	.word	0x08000559
 80004c0:	0800055f 	.word	0x0800055f
 80004c4:	0800055f 	.word	0x0800055f
 80004c8:	0800055f 	.word	0x0800055f
 80004cc:	0800055f 	.word	0x0800055f
 80004d0:	0800055f 	.word	0x0800055f
 80004d4:	0800055f 	.word	0x0800055f
 80004d8:	0800055f 	.word	0x0800055f
 80004dc:	0800055f 	.word	0x0800055f
 80004e0:	0800055f 	.word	0x0800055f
 80004e4:	0800055f 	.word	0x0800055f
 80004e8:	0800055f 	.word	0x0800055f
 80004ec:	0800055f 	.word	0x0800055f
 80004f0:	0800055f 	.word	0x0800055f
 80004f4:	0800050d 	.word	0x0800050d
 80004f8:	08000521 	.word	0x08000521
 80004fc:	4a79      	ldr	r2, [pc, #484]	@ (80006e4 <HAL_GPIO_Init+0x2b4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d013      	beq.n	800052a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000502:	e02c      	b.n	800055e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	623b      	str	r3, [r7, #32]
          break;
 800050a:	e029      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	3304      	adds	r3, #4
 8000512:	623b      	str	r3, [r7, #32]
          break;
 8000514:	e024      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	3308      	adds	r3, #8
 800051c:	623b      	str	r3, [r7, #32]
          break;
 800051e:	e01f      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	330c      	adds	r3, #12
 8000526:	623b      	str	r3, [r7, #32]
          break;
 8000528:	e01a      	b.n	8000560 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d102      	bne.n	8000538 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000532:	2304      	movs	r3, #4
 8000534:	623b      	str	r3, [r7, #32]
          break;
 8000536:	e013      	b.n	8000560 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	2b01      	cmp	r3, #1
 800053e:	d105      	bne.n	800054c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000540:	2308      	movs	r3, #8
 8000542:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	69fa      	ldr	r2, [r7, #28]
 8000548:	611a      	str	r2, [r3, #16]
          break;
 800054a:	e009      	b.n	8000560 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800054c:	2308      	movs	r3, #8
 800054e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	69fa      	ldr	r2, [r7, #28]
 8000554:	615a      	str	r2, [r3, #20]
          break;
 8000556:	e003      	b.n	8000560 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000558:	2300      	movs	r3, #0
 800055a:	623b      	str	r3, [r7, #32]
          break;
 800055c:	e000      	b.n	8000560 <HAL_GPIO_Init+0x130>
          break;
 800055e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000560:	69bb      	ldr	r3, [r7, #24]
 8000562:	2bff      	cmp	r3, #255	@ 0xff
 8000564:	d801      	bhi.n	800056a <HAL_GPIO_Init+0x13a>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	e001      	b.n	800056e <HAL_GPIO_Init+0x13e>
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3304      	adds	r3, #4
 800056e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000570:	69bb      	ldr	r3, [r7, #24]
 8000572:	2bff      	cmp	r3, #255	@ 0xff
 8000574:	d802      	bhi.n	800057c <HAL_GPIO_Init+0x14c>
 8000576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	e002      	b.n	8000582 <HAL_GPIO_Init+0x152>
 800057c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800057e:	3b08      	subs	r3, #8
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	210f      	movs	r1, #15
 800058a:	693b      	ldr	r3, [r7, #16]
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	401a      	ands	r2, r3
 8000594:	6a39      	ldr	r1, [r7, #32]
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	fa01 f303 	lsl.w	r3, r1, r3
 800059c:	431a      	orrs	r2, r3
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	f000 80b1 	beq.w	8000712 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80005b0:	4b4d      	ldr	r3, [pc, #308]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a4c      	ldr	r2, [pc, #304]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <HAL_GPIO_Init+0x2b8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80005c8:	4a48      	ldr	r2, [pc, #288]	@ (80006ec <HAL_GPIO_Init+0x2bc>)
 80005ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	3302      	adds	r3, #2
 80005d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80005d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005d8:	f003 0303 	and.w	r3, r3, #3
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	220f      	movs	r2, #15
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	43db      	mvns	r3, r3
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4013      	ands	r3, r2
 80005ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a40      	ldr	r2, [pc, #256]	@ (80006f0 <HAL_GPIO_Init+0x2c0>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d013      	beq.n	800061c <HAL_GPIO_Init+0x1ec>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a3f      	ldr	r2, [pc, #252]	@ (80006f4 <HAL_GPIO_Init+0x2c4>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d00d      	beq.n	8000618 <HAL_GPIO_Init+0x1e8>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <HAL_GPIO_Init+0x2c8>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d007      	beq.n	8000614 <HAL_GPIO_Init+0x1e4>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a3d      	ldr	r2, [pc, #244]	@ (80006fc <HAL_GPIO_Init+0x2cc>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d101      	bne.n	8000610 <HAL_GPIO_Init+0x1e0>
 800060c:	2303      	movs	r3, #3
 800060e:	e006      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000610:	2304      	movs	r3, #4
 8000612:	e004      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000614:	2302      	movs	r3, #2
 8000616:	e002      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 8000618:	2301      	movs	r3, #1
 800061a:	e000      	b.n	800061e <HAL_GPIO_Init+0x1ee>
 800061c:	2300      	movs	r3, #0
 800061e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000620:	f002 0203 	and.w	r2, r2, #3
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	4093      	lsls	r3, r2
 8000628:	68fa      	ldr	r2, [r7, #12]
 800062a:	4313      	orrs	r3, r2
 800062c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800062e:	492f      	ldr	r1, [pc, #188]	@ (80006ec <HAL_GPIO_Init+0x2bc>)
 8000630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	3302      	adds	r3, #2
 8000636:	68fa      	ldr	r2, [r7, #12]
 8000638:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000644:	2b00      	cmp	r3, #0
 8000646:	d006      	beq.n	8000656 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000648:	4b2d      	ldr	r3, [pc, #180]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	492c      	ldr	r1, [pc, #176]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	4313      	orrs	r3, r2
 8000652:	608b      	str	r3, [r1, #8]
 8000654:	e006      	b.n	8000664 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000656:	4b2a      	ldr	r3, [pc, #168]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	69bb      	ldr	r3, [r7, #24]
 800065c:	43db      	mvns	r3, r3
 800065e:	4928      	ldr	r1, [pc, #160]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000660:	4013      	ands	r3, r2
 8000662:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800066c:	2b00      	cmp	r3, #0
 800066e:	d006      	beq.n	800067e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000670:	4b23      	ldr	r3, [pc, #140]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000672:	68da      	ldr	r2, [r3, #12]
 8000674:	4922      	ldr	r1, [pc, #136]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000676:	69bb      	ldr	r3, [r7, #24]
 8000678:	4313      	orrs	r3, r2
 800067a:	60cb      	str	r3, [r1, #12]
 800067c:	e006      	b.n	800068c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800067e:	4b20      	ldr	r3, [pc, #128]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	43db      	mvns	r3, r3
 8000686:	491e      	ldr	r1, [pc, #120]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 8000688:	4013      	ands	r3, r2
 800068a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000694:	2b00      	cmp	r3, #0
 8000696:	d006      	beq.n	80006a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	4918      	ldr	r1, [pc, #96]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	604b      	str	r3, [r1, #4]
 80006a4:	e006      	b.n	80006b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80006a6:	4b16      	ldr	r3, [pc, #88]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006a8:	685a      	ldr	r2, [r3, #4]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	43db      	mvns	r3, r3
 80006ae:	4914      	ldr	r1, [pc, #80]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d021      	beq.n	8000704 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	490e      	ldr	r1, [pc, #56]	@ (8000700 <HAL_GPIO_Init+0x2d0>)
 80006c6:	69bb      	ldr	r3, [r7, #24]
 80006c8:	4313      	orrs	r3, r2
 80006ca:	600b      	str	r3, [r1, #0]
 80006cc:	e021      	b.n	8000712 <HAL_GPIO_Init+0x2e2>
 80006ce:	bf00      	nop
 80006d0:	10320000 	.word	0x10320000
 80006d4:	10310000 	.word	0x10310000
 80006d8:	10220000 	.word	0x10220000
 80006dc:	10210000 	.word	0x10210000
 80006e0:	10120000 	.word	0x10120000
 80006e4:	10110000 	.word	0x10110000
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40010000 	.word	0x40010000
 80006f0:	40010800 	.word	0x40010800
 80006f4:	40010c00 	.word	0x40010c00
 80006f8:	40011000 	.word	0x40011000
 80006fc:	40011400 	.word	0x40011400
 8000700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000704:	4b0b      	ldr	r3, [pc, #44]	@ (8000734 <HAL_GPIO_Init+0x304>)
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	69bb      	ldr	r3, [r7, #24]
 800070a:	43db      	mvns	r3, r3
 800070c:	4909      	ldr	r1, [pc, #36]	@ (8000734 <HAL_GPIO_Init+0x304>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000714:	3301      	adds	r3, #1
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071e:	fa22 f303 	lsr.w	r3, r2, r3
 8000722:	2b00      	cmp	r3, #0
 8000724:	f47f ae8e 	bne.w	8000444 <HAL_GPIO_Init+0x14>
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	372c      	adds	r7, #44	@ 0x2c
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr
 8000734:	40010400 	.word	0x40010400

08000738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	460b      	mov	r3, r1
 8000742:	807b      	strh	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000748:	787b      	ldrb	r3, [r7, #1]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800074e:	887a      	ldrh	r2, [r7, #2]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000754:	e003      	b.n	800075e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000756:	887b      	ldrh	r3, [r7, #2]
 8000758:	041a      	lsls	r2, r3, #16
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	611a      	str	r2, [r3, #16]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d101      	bne.n	800077a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000776:	2301      	movs	r3, #1
 8000778:	e12b      	b.n	80009d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d106      	bne.n	8000794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2200      	movs	r2, #0
 800078a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f002 fdf0 	bl	8003374 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2224      	movs	r2, #36	@ 0x24
 8000798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f022 0201 	bic.w	r2, r2, #1
 80007aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80007ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80007ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007cc:	f000 fcda 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 80007d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	4a81      	ldr	r2, [pc, #516]	@ (80009dc <HAL_I2C_Init+0x274>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d807      	bhi.n	80007ec <HAL_I2C_Init+0x84>
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	4a80      	ldr	r2, [pc, #512]	@ (80009e0 <HAL_I2C_Init+0x278>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	bf94      	ite	ls
 80007e4:	2301      	movls	r3, #1
 80007e6:	2300      	movhi	r3, #0
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	e006      	b.n	80007fa <HAL_I2C_Init+0x92>
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	4a7d      	ldr	r2, [pc, #500]	@ (80009e4 <HAL_I2C_Init+0x27c>)
 80007f0:	4293      	cmp	r3, r2
 80007f2:	bf94      	ite	ls
 80007f4:	2301      	movls	r3, #1
 80007f6:	2300      	movhi	r3, #0
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80007fe:	2301      	movs	r3, #1
 8000800:	e0e7      	b.n	80009d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	4a78      	ldr	r2, [pc, #480]	@ (80009e8 <HAL_I2C_Init+0x280>)
 8000806:	fba2 2303 	umull	r2, r3, r2, r3
 800080a:	0c9b      	lsrs	r3, r3, #18
 800080c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	430a      	orrs	r2, r1
 8000820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	6a1b      	ldr	r3, [r3, #32]
 8000828:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	4a6a      	ldr	r2, [pc, #424]	@ (80009dc <HAL_I2C_Init+0x274>)
 8000832:	4293      	cmp	r3, r2
 8000834:	d802      	bhi.n	800083c <HAL_I2C_Init+0xd4>
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	3301      	adds	r3, #1
 800083a:	e009      	b.n	8000850 <HAL_I2C_Init+0xe8>
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	4a69      	ldr	r2, [pc, #420]	@ (80009ec <HAL_I2C_Init+0x284>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	099b      	lsrs	r3, r3, #6
 800084e:	3301      	adds	r3, #1
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	6812      	ldr	r2, [r2, #0]
 8000854:	430b      	orrs	r3, r1
 8000856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000862:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	495c      	ldr	r1, [pc, #368]	@ (80009dc <HAL_I2C_Init+0x274>)
 800086c:	428b      	cmp	r3, r1
 800086e:	d819      	bhi.n	80008a4 <HAL_I2C_Init+0x13c>
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	1e59      	subs	r1, r3, #1
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	685b      	ldr	r3, [r3, #4]
 8000878:	005b      	lsls	r3, r3, #1
 800087a:	fbb1 f3f3 	udiv	r3, r1, r3
 800087e:	1c59      	adds	r1, r3, #1
 8000880:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000884:	400b      	ands	r3, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	d00a      	beq.n	80008a0 <HAL_I2C_Init+0x138>
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	1e59      	subs	r1, r3, #1
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	685b      	ldr	r3, [r3, #4]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fbb1 f3f3 	udiv	r3, r1, r3
 8000898:	3301      	adds	r3, #1
 800089a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800089e:	e051      	b.n	8000944 <HAL_I2C_Init+0x1dc>
 80008a0:	2304      	movs	r3, #4
 80008a2:	e04f      	b.n	8000944 <HAL_I2C_Init+0x1dc>
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	689b      	ldr	r3, [r3, #8]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d111      	bne.n	80008d0 <HAL_I2C_Init+0x168>
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	1e58      	subs	r0, r3, #1
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	6859      	ldr	r1, [r3, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	440b      	add	r3, r1
 80008ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80008be:	3301      	adds	r3, #1
 80008c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf0c      	ite	eq
 80008c8:	2301      	moveq	r3, #1
 80008ca:	2300      	movne	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	e012      	b.n	80008f6 <HAL_I2C_Init+0x18e>
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	1e58      	subs	r0, r3, #1
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	6859      	ldr	r1, [r3, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	440b      	add	r3, r1
 80008de:	0099      	lsls	r1, r3, #2
 80008e0:	440b      	add	r3, r1
 80008e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80008e6:	3301      	adds	r3, #1
 80008e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	bf0c      	ite	eq
 80008f0:	2301      	moveq	r3, #1
 80008f2:	2300      	movne	r3, #0
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_I2C_Init+0x196>
 80008fa:	2301      	movs	r3, #1
 80008fc:	e022      	b.n	8000944 <HAL_I2C_Init+0x1dc>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d10e      	bne.n	8000924 <HAL_I2C_Init+0x1bc>
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	1e58      	subs	r0, r3, #1
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6859      	ldr	r1, [r3, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	440b      	add	r3, r1
 8000914:	fbb0 f3f3 	udiv	r3, r0, r3
 8000918:	3301      	adds	r3, #1
 800091a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800091e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000922:	e00f      	b.n	8000944 <HAL_I2C_Init+0x1dc>
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	1e58      	subs	r0, r3, #1
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6859      	ldr	r1, [r3, #4]
 800092c:	460b      	mov	r3, r1
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	0099      	lsls	r1, r3, #2
 8000934:	440b      	add	r3, r1
 8000936:	fbb0 f3f3 	udiv	r3, r0, r3
 800093a:	3301      	adds	r3, #1
 800093c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000940:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000944:	6879      	ldr	r1, [r7, #4]
 8000946:	6809      	ldr	r1, [r1, #0]
 8000948:	4313      	orrs	r3, r2
 800094a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	69da      	ldr	r2, [r3, #28]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6a1b      	ldr	r3, [r3, #32]
 800095e:	431a      	orrs	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	430a      	orrs	r2, r1
 8000966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000972:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	6911      	ldr	r1, [r2, #16]
 800097a:	687a      	ldr	r2, [r7, #4]
 800097c:	68d2      	ldr	r2, [r2, #12]
 800097e:	4311      	orrs	r1, r2
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	6812      	ldr	r2, [r2, #0]
 8000984:	430b      	orrs	r3, r1
 8000986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	68db      	ldr	r3, [r3, #12]
 800098e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	695a      	ldr	r2, [r3, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	699b      	ldr	r3, [r3, #24]
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	430a      	orrs	r2, r1
 80009a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0201 	orr.w	r2, r2, #1
 80009b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2220      	movs	r2, #32
 80009be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2200      	movs	r2, #0
 80009cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	000186a0 	.word	0x000186a0
 80009e0:	001e847f 	.word	0x001e847f
 80009e4:	003d08ff 	.word	0x003d08ff
 80009e8:	431bde83 	.word	0x431bde83
 80009ec:	10624dd3 	.word	0x10624dd3

080009f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d101      	bne.n	8000a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	e272      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	f000 8087 	beq.w	8000b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a10:	4b92      	ldr	r3, [pc, #584]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 030c 	and.w	r3, r3, #12
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d00c      	beq.n	8000a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 030c 	and.w	r3, r3, #12
 8000a24:	2b08      	cmp	r3, #8
 8000a26:	d112      	bne.n	8000a4e <HAL_RCC_OscConfig+0x5e>
 8000a28:	4b8c      	ldr	r3, [pc, #560]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a34:	d10b      	bne.n	8000a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a36:	4b89      	ldr	r3, [pc, #548]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d06c      	beq.n	8000b1c <HAL_RCC_OscConfig+0x12c>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d168      	bne.n	8000b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e24c      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000a56:	d106      	bne.n	8000a66 <HAL_RCC_OscConfig+0x76>
 8000a58:	4b80      	ldr	r3, [pc, #512]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a7f      	ldr	r2, [pc, #508]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a62:	6013      	str	r3, [r2, #0]
 8000a64:	e02e      	b.n	8000ac4 <HAL_RCC_OscConfig+0xd4>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d10c      	bne.n	8000a88 <HAL_RCC_OscConfig+0x98>
 8000a6e:	4b7b      	ldr	r3, [pc, #492]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a7a      	ldr	r2, [pc, #488]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000a78:	6013      	str	r3, [r2, #0]
 8000a7a:	4b78      	ldr	r3, [pc, #480]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4a77      	ldr	r2, [pc, #476]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	e01d      	b.n	8000ac4 <HAL_RCC_OscConfig+0xd4>
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000a90:	d10c      	bne.n	8000aac <HAL_RCC_OscConfig+0xbc>
 8000a92:	4b72      	ldr	r3, [pc, #456]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a71      	ldr	r2, [pc, #452]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000a98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000aa8:	6013      	str	r3, [r2, #0]
 8000aaa:	e00b      	b.n	8000ac4 <HAL_RCC_OscConfig+0xd4>
 8000aac:	4b6b      	ldr	r3, [pc, #428]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a6a      	ldr	r2, [pc, #424]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000ab2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ab6:	6013      	str	r3, [r2, #0]
 8000ab8:	4b68      	ldr	r3, [pc, #416]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a67      	ldr	r2, [pc, #412]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000abe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d013      	beq.n	8000af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000acc:	f7ff fb9e 	bl	800020c <HAL_GetTick>
 8000ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad2:	e008      	b.n	8000ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ad4:	f7ff fb9a 	bl	800020c <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	2b64      	cmp	r3, #100	@ 0x64
 8000ae0:	d901      	bls.n	8000ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e200      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0f0      	beq.n	8000ad4 <HAL_RCC_OscConfig+0xe4>
 8000af2:	e014      	b.n	8000b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000af4:	f7ff fb8a 	bl	800020c <HAL_GetTick>
 8000af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000afa:	e008      	b.n	8000b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000afc:	f7ff fb86 	bl	800020c <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b64      	cmp	r3, #100	@ 0x64
 8000b08:	d901      	bls.n	8000b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000b0a:	2303      	movs	r3, #3
 8000b0c:	e1ec      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b0e:	4b53      	ldr	r3, [pc, #332]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d1f0      	bne.n	8000afc <HAL_RCC_OscConfig+0x10c>
 8000b1a:	e000      	b.n	8000b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d063      	beq.n	8000bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 030c 	and.w	r3, r3, #12
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d00b      	beq.n	8000b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b36:	4b49      	ldr	r3, [pc, #292]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f003 030c 	and.w	r3, r3, #12
 8000b3e:	2b08      	cmp	r3, #8
 8000b40:	d11c      	bne.n	8000b7c <HAL_RCC_OscConfig+0x18c>
 8000b42:	4b46      	ldr	r3, [pc, #280]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d116      	bne.n	8000b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b4e:	4b43      	ldr	r3, [pc, #268]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d005      	beq.n	8000b66 <HAL_RCC_OscConfig+0x176>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d001      	beq.n	8000b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	e1c0      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b66:	4b3d      	ldr	r3, [pc, #244]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	00db      	lsls	r3, r3, #3
 8000b74:	4939      	ldr	r1, [pc, #228]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000b76:	4313      	orrs	r3, r2
 8000b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b7a:	e03a      	b.n	8000bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d020      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b84:	4b36      	ldr	r3, [pc, #216]	@ (8000c60 <HAL_RCC_OscConfig+0x270>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8a:	f7ff fb3f 	bl	800020c <HAL_GetTick>
 8000b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b90:	e008      	b.n	8000ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000b92:	f7ff fb3b 	bl	800020c <HAL_GetTick>
 8000b96:	4602      	mov	r2, r0
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d901      	bls.n	8000ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	e1a1      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 0302 	and.w	r3, r3, #2
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f0      	beq.n	8000b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	00db      	lsls	r3, r3, #3
 8000bbe:	4927      	ldr	r1, [pc, #156]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	600b      	str	r3, [r1, #0]
 8000bc4:	e015      	b.n	8000bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bc6:	4b26      	ldr	r3, [pc, #152]	@ (8000c60 <HAL_RCC_OscConfig+0x270>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff fb1e 	bl	800020c <HAL_GetTick>
 8000bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd2:	e008      	b.n	8000be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000bd4:	f7ff fb1a 	bl	800020c <HAL_GetTick>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	2b02      	cmp	r3, #2
 8000be0:	d901      	bls.n	8000be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000be2:	2303      	movs	r3, #3
 8000be4:	e180      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f0      	bne.n	8000bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f003 0308 	and.w	r3, r3, #8
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d03a      	beq.n	8000c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	699b      	ldr	r3, [r3, #24]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d019      	beq.n	8000c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c06:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_RCC_OscConfig+0x274>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c0c:	f7ff fafe 	bl	800020c <HAL_GetTick>
 8000c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c12:	e008      	b.n	8000c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c14:	f7ff fafa 	bl	800020c <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e160      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c26:	4b0d      	ldr	r3, [pc, #52]	@ (8000c5c <HAL_RCC_OscConfig+0x26c>)
 8000c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f0      	beq.n	8000c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f000 face 	bl	80011d4 <RCC_Delay>
 8000c38:	e01c      	b.n	8000c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_RCC_OscConfig+0x274>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c40:	f7ff fae4 	bl	800020c <HAL_GetTick>
 8000c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c46:	e00f      	b.n	8000c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000c48:	f7ff fae0 	bl	800020c <HAL_GetTick>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d908      	bls.n	8000c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000c56:	2303      	movs	r3, #3
 8000c58:	e146      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
 8000c5a:	bf00      	nop
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	42420000 	.word	0x42420000
 8000c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c68:	4b92      	ldr	r3, [pc, #584]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c6c:	f003 0302 	and.w	r3, r3, #2
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d1e9      	bne.n	8000c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 80a6 	beq.w	8000dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c86:	4b8b      	ldr	r3, [pc, #556]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d10d      	bne.n	8000cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	4b88      	ldr	r3, [pc, #544]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c94:	69db      	ldr	r3, [r3, #28]
 8000c96:	4a87      	ldr	r2, [pc, #540]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000c98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c9c:	61d3      	str	r3, [r2, #28]
 8000c9e:	4b85      	ldr	r3, [pc, #532]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000ca0:	69db      	ldr	r3, [r3, #28]
 8000ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ca6:	60bb      	str	r3, [r7, #8]
 8000ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000caa:	2301      	movs	r3, #1
 8000cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cae:	4b82      	ldr	r3, [pc, #520]	@ (8000eb8 <HAL_RCC_OscConfig+0x4c8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d118      	bne.n	8000cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cba:	4b7f      	ldr	r3, [pc, #508]	@ (8000eb8 <HAL_RCC_OscConfig+0x4c8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a7e      	ldr	r2, [pc, #504]	@ (8000eb8 <HAL_RCC_OscConfig+0x4c8>)
 8000cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cc6:	f7ff faa1 	bl	800020c <HAL_GetTick>
 8000cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ccc:	e008      	b.n	8000ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cce:	f7ff fa9d 	bl	800020c <HAL_GetTick>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	1ad3      	subs	r3, r2, r3
 8000cd8:	2b64      	cmp	r3, #100	@ 0x64
 8000cda:	d901      	bls.n	8000ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	e103      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ce0:	4b75      	ldr	r3, [pc, #468]	@ (8000eb8 <HAL_RCC_OscConfig+0x4c8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d0f0      	beq.n	8000cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d106      	bne.n	8000d02 <HAL_RCC_OscConfig+0x312>
 8000cf4:	4b6f      	ldr	r3, [pc, #444]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000cf6:	6a1b      	ldr	r3, [r3, #32]
 8000cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	6213      	str	r3, [r2, #32]
 8000d00:	e02d      	b.n	8000d5e <HAL_RCC_OscConfig+0x36e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	68db      	ldr	r3, [r3, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10c      	bne.n	8000d24 <HAL_RCC_OscConfig+0x334>
 8000d0a:	4b6a      	ldr	r3, [pc, #424]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d0c:	6a1b      	ldr	r3, [r3, #32]
 8000d0e:	4a69      	ldr	r2, [pc, #420]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d10:	f023 0301 	bic.w	r3, r3, #1
 8000d14:	6213      	str	r3, [r2, #32]
 8000d16:	4b67      	ldr	r3, [pc, #412]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d18:	6a1b      	ldr	r3, [r3, #32]
 8000d1a:	4a66      	ldr	r2, [pc, #408]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d1c:	f023 0304 	bic.w	r3, r3, #4
 8000d20:	6213      	str	r3, [r2, #32]
 8000d22:	e01c      	b.n	8000d5e <HAL_RCC_OscConfig+0x36e>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d10c      	bne.n	8000d46 <HAL_RCC_OscConfig+0x356>
 8000d2c:	4b61      	ldr	r3, [pc, #388]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	4a60      	ldr	r2, [pc, #384]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	6213      	str	r3, [r2, #32]
 8000d38:	4b5e      	ldr	r3, [pc, #376]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d3a:	6a1b      	ldr	r3, [r3, #32]
 8000d3c:	4a5d      	ldr	r2, [pc, #372]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	6213      	str	r3, [r2, #32]
 8000d44:	e00b      	b.n	8000d5e <HAL_RCC_OscConfig+0x36e>
 8000d46:	4b5b      	ldr	r3, [pc, #364]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d48:	6a1b      	ldr	r3, [r3, #32]
 8000d4a:	4a5a      	ldr	r2, [pc, #360]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	6213      	str	r3, [r2, #32]
 8000d52:	4b58      	ldr	r3, [pc, #352]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d54:	6a1b      	ldr	r3, [r3, #32]
 8000d56:	4a57      	ldr	r2, [pc, #348]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d58:	f023 0304 	bic.w	r3, r3, #4
 8000d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	68db      	ldr	r3, [r3, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d015      	beq.n	8000d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d66:	f7ff fa51 	bl	800020c <HAL_GetTick>
 8000d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d6c:	e00a      	b.n	8000d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d6e:	f7ff fa4d 	bl	800020c <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d7c:	4293      	cmp	r3, r2
 8000d7e:	d901      	bls.n	8000d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000d80:	2303      	movs	r3, #3
 8000d82:	e0b1      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d84:	4b4b      	ldr	r3, [pc, #300]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000d86:	6a1b      	ldr	r3, [r3, #32]
 8000d88:	f003 0302 	and.w	r3, r3, #2
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d0ee      	beq.n	8000d6e <HAL_RCC_OscConfig+0x37e>
 8000d90:	e014      	b.n	8000dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d92:	f7ff fa3b 	bl	800020c <HAL_GetTick>
 8000d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d98:	e00a      	b.n	8000db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d9a:	f7ff fa37 	bl	800020c <HAL_GetTick>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	693b      	ldr	r3, [r7, #16]
 8000da2:	1ad3      	subs	r3, r2, r3
 8000da4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e09b      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000db0:	4b40      	ldr	r3, [pc, #256]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000db2:	6a1b      	ldr	r3, [r3, #32]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1ee      	bne.n	8000d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000dbc:	7dfb      	ldrb	r3, [r7, #23]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d105      	bne.n	8000dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dc2:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000dc4:	69db      	ldr	r3, [r3, #28]
 8000dc6:	4a3b      	ldr	r2, [pc, #236]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000dc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	69db      	ldr	r3, [r3, #28]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f000 8087 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dd8:	4b36      	ldr	r3, [pc, #216]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 030c 	and.w	r3, r3, #12
 8000de0:	2b08      	cmp	r3, #8
 8000de2:	d061      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69db      	ldr	r3, [r3, #28]
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d146      	bne.n	8000e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000dec:	4b33      	ldr	r3, [pc, #204]	@ (8000ebc <HAL_RCC_OscConfig+0x4cc>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df2:	f7ff fa0b 	bl	800020c <HAL_GetTick>
 8000df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000df8:	e008      	b.n	8000e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000dfa:	f7ff fa07 	bl	800020c <HAL_GetTick>
 8000dfe:	4602      	mov	r2, r0
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d901      	bls.n	8000e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	e06d      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0c:	4b29      	ldr	r3, [pc, #164]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f0      	bne.n	8000dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a1b      	ldr	r3, [r3, #32]
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e20:	d108      	bne.n	8000e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000e22:	4b24      	ldr	r3, [pc, #144]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	4921      	ldr	r1, [pc, #132]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e34:	4b1f      	ldr	r3, [pc, #124]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6a19      	ldr	r1, [r3, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e44:	430b      	orrs	r3, r1
 8000e46:	491b      	ldr	r1, [pc, #108]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_RCC_OscConfig+0x4cc>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e52:	f7ff f9db 	bl	800020c <HAL_GetTick>
 8000e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e5a:	f7ff f9d7 	bl	800020c <HAL_GetTick>
 8000e5e:	4602      	mov	r2, r0
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e03d      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0x46a>
 8000e78:	e035      	b.n	8000ee6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_RCC_OscConfig+0x4cc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff f9c4 	bl	800020c <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000e88:	f7ff f9c0 	bl	800020c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e026      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <HAL_RCC_OscConfig+0x4c4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x498>
 8000ea6:	e01e      	b.n	8000ee6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	69db      	ldr	r3, [r3, #28]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d107      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	e019      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40007000 	.word	0x40007000
 8000ebc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_RCC_OscConfig+0x500>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6a1b      	ldr	r3, [r3, #32]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d106      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d001      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3718      	adds	r7, #24
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000

08000ef4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d101      	bne.n	8000f08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e0d0      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000f08:	4b6a      	ldr	r3, [pc, #424]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0307 	and.w	r3, r3, #7
 8000f10:	683a      	ldr	r2, [r7, #0]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d910      	bls.n	8000f38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f16:	4b67      	ldr	r3, [pc, #412]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f023 0207 	bic.w	r2, r3, #7
 8000f1e:	4965      	ldr	r1, [pc, #404]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f26:	4b63      	ldr	r3, [pc, #396]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	683a      	ldr	r2, [r7, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d001      	beq.n	8000f38 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0b8      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d020      	beq.n	8000f86 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f003 0304 	and.w	r3, r3, #4
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f50:	4b59      	ldr	r3, [pc, #356]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	4a58      	ldr	r2, [pc, #352]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8000f5a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f003 0308 	and.w	r3, r3, #8
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f68:	4b53      	ldr	r3, [pc, #332]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4a52      	ldr	r2, [pc, #328]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f6e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8000f72:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f74:	4b50      	ldr	r3, [pc, #320]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	494d      	ldr	r1, [pc, #308]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d040      	beq.n	8001014 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d107      	bne.n	8000faa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	4b47      	ldr	r3, [pc, #284]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d115      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e07f      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d107      	bne.n	8000fc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb2:	4b41      	ldr	r3, [pc, #260]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d109      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e073      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e06b      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fd2:	4b39      	ldr	r3, [pc, #228]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f023 0203 	bic.w	r2, r3, #3
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	4936      	ldr	r1, [pc, #216]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fe4:	f7ff f912 	bl	800020c <HAL_GetTick>
 8000fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fea:	e00a      	b.n	8001002 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fec:	f7ff f90e 	bl	800020c <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d901      	bls.n	8001002 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e053      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001002:	4b2d      	ldr	r3, [pc, #180]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f003 020c 	and.w	r2, r3, #12
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	429a      	cmp	r2, r3
 8001012:	d1eb      	bne.n	8000fec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001014:	4b27      	ldr	r3, [pc, #156]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	429a      	cmp	r2, r3
 8001020:	d210      	bcs.n	8001044 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001022:	4b24      	ldr	r3, [pc, #144]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f023 0207 	bic.w	r2, r3, #7
 800102a:	4922      	ldr	r1, [pc, #136]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	683a      	ldr	r2, [r7, #0]
 800103c:	429a      	cmp	r2, r3
 800103e:	d001      	beq.n	8001044 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e032      	b.n	80010aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	4916      	ldr	r1, [pc, #88]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 800105e:	4313      	orrs	r3, r2
 8001060:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	2b00      	cmp	r3, #0
 800106c:	d009      	beq.n	8001082 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	00db      	lsls	r3, r3, #3
 800107c:	490e      	ldr	r1, [pc, #56]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 800107e:	4313      	orrs	r3, r2
 8001080:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001082:	f000 f821 	bl	80010c8 <HAL_RCC_GetSysClockFreq>
 8001086:	4602      	mov	r2, r0
 8001088:	4b0b      	ldr	r3, [pc, #44]	@ (80010b8 <HAL_RCC_ClockConfig+0x1c4>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	091b      	lsrs	r3, r3, #4
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	490a      	ldr	r1, [pc, #40]	@ (80010bc <HAL_RCC_ClockConfig+0x1c8>)
 8001094:	5ccb      	ldrb	r3, [r1, r3]
 8001096:	fa22 f303 	lsr.w	r3, r2, r3
 800109a:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <HAL_RCC_ClockConfig+0x1cc>)
 800109c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800109e:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <HAL_RCC_ClockConfig+0x1d0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f870 	bl	8000188 <HAL_InitTick>

  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000
 80010b8:	40021000 	.word	0x40021000
 80010bc:	08005240 	.word	0x08005240
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000000 	.word	0x20000000

080010c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b087      	sub	sp, #28
 80010cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	2300      	movs	r3, #0
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_RCC_GetSysClockFreq+0x94>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	d002      	beq.n	80010f8 <HAL_RCC_GetSysClockFreq+0x30>
 80010f2:	2b08      	cmp	r3, #8
 80010f4:	d003      	beq.n	80010fe <HAL_RCC_GetSysClockFreq+0x36>
 80010f6:	e027      	b.n	8001148 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80010f8:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x98>)
 80010fa:	613b      	str	r3, [r7, #16]
      break;
 80010fc:	e027      	b.n	800114e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	0c9b      	lsrs	r3, r3, #18
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d010      	beq.n	8001138 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <HAL_RCC_GetSysClockFreq+0x94>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	0c5b      	lsrs	r3, r3, #17
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a0d      	ldr	r2, [pc, #52]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x98>)
 800112a:	fb03 f202 	mul.w	r2, r3, r2
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	fbb2 f3f3 	udiv	r3, r2, r3
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e004      	b.n	8001142 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a0c      	ldr	r2, [pc, #48]	@ (800116c <HAL_RCC_GetSysClockFreq+0xa4>)
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	613b      	str	r3, [r7, #16]
      break;
 8001146:	e002      	b.n	800114e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <HAL_RCC_GetSysClockFreq+0x98>)
 800114a:	613b      	str	r3, [r7, #16]
      break;
 800114c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800114e:	693b      	ldr	r3, [r7, #16]
}
 8001150:	4618      	mov	r0, r3
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	007a1200 	.word	0x007a1200
 8001164:	08003754 	.word	0x08003754
 8001168:	08003764 	.word	0x08003764
 800116c:	003d0900 	.word	0x003d0900

08001170 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001174:	4b02      	ldr	r3, [pc, #8]	@ (8001180 <HAL_RCC_GetHCLKFreq+0x10>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr
 8001180:	20000008 	.word	0x20000008

08001184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001188:	f7ff fff2 	bl	8001170 <HAL_RCC_GetHCLKFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	4903      	ldr	r1, [pc, #12]	@ (80011a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	08005250 	.word	0x08005250

080011ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80011b0:	f7ff ffde 	bl	8001170 <HAL_RCC_GetHCLKFreq>
 80011b4:	4602      	mov	r2, r0
 80011b6:	4b05      	ldr	r3, [pc, #20]	@ (80011cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	0adb      	lsrs	r3, r3, #11
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	4903      	ldr	r1, [pc, #12]	@ (80011d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80011c2:	5ccb      	ldrb	r3, [r1, r3]
 80011c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40021000 	.word	0x40021000
 80011d0:	08005250 	.word	0x08005250

080011d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80011dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <RCC_Delay+0x34>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <RCC_Delay+0x38>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0a5b      	lsrs	r3, r3, #9
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80011f0:	bf00      	nop
  }
  while (Delay --);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	1e5a      	subs	r2, r3, #1
 80011f6:	60fa      	str	r2, [r7, #12]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1f9      	bne.n	80011f0 <RCC_Delay+0x1c>
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3714      	adds	r7, #20
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	20000008 	.word	0x20000008
 800120c:	10624dd3 	.word	0x10624dd3

08001210 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e076      	b.n	8001310 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	2b00      	cmp	r3, #0
 8001228:	d108      	bne.n	800123c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001232:	d009      	beq.n	8001248 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
 800123a:	e005      	b.n	8001248 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f002 f8d6 	bl	8003414 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2202      	movs	r2, #2
 800126c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800127e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001290:	431a      	orrs	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	68db      	ldr	r3, [r3, #12]
 8001296:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800129a:	431a      	orrs	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	431a      	orrs	r2, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80012b8:	431a      	orrs	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012c2:	431a      	orrs	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012cc:	ea42 0103 	orr.w	r1, r2, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	0c1a      	lsrs	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f002 0204 	and.w	r2, r2, #4
 80012ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	69da      	ldr	r2, [r3, #28]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2200      	movs	r2, #0
 8001304:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d101      	bne.n	800132a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e042      	b.n	80013b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001330:	b2db      	uxtb	r3, r3
 8001332:	2b00      	cmp	r3, #0
 8001334:	d106      	bne.n	8001344 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f002 f8de 	bl	8003500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2224      	movs	r2, #36	@ 0x24
 8001348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68da      	ldr	r2, [r3, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800135a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f000 f82b 	bl	80013b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	691a      	ldr	r2, [r3, #16]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001370:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	695a      	ldr	r2, [r3, #20]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001380:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	68da      	ldr	r2, [r3, #12]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001390:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2200      	movs	r2, #0
 8001396:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2220      	movs	r2, #32
 800139c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2220      	movs	r2, #32
 80013a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	430a      	orrs	r2, r1
 80013d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	691b      	ldr	r3, [r3, #16]
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80013f2:	f023 030c 	bic.w	r3, r3, #12
 80013f6:	687a      	ldr	r2, [r7, #4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699a      	ldr	r2, [r3, #24]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	430a      	orrs	r2, r1
 8001414:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a2c      	ldr	r2, [pc, #176]	@ (80014cc <UART_SetConfig+0x114>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d103      	bne.n	8001428 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001420:	f7ff fec4 	bl	80011ac <HAL_RCC_GetPCLK2Freq>
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	e002      	b.n	800142e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001428:	f7ff feac 	bl	8001184 <HAL_RCC_GetPCLK1Freq>
 800142c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	009a      	lsls	r2, r3, #2
 8001438:	441a      	add	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	4a22      	ldr	r2, [pc, #136]	@ (80014d0 <UART_SetConfig+0x118>)
 8001446:	fba2 2303 	umull	r2, r3, r2, r3
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	0119      	lsls	r1, r3, #4
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4613      	mov	r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	009a      	lsls	r2, r3, #2
 8001458:	441a      	add	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	fbb2 f2f3 	udiv	r2, r2, r3
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <UART_SetConfig+0x118>)
 8001466:	fba3 0302 	umull	r0, r3, r3, r2
 800146a:	095b      	lsrs	r3, r3, #5
 800146c:	2064      	movs	r0, #100	@ 0x64
 800146e:	fb00 f303 	mul.w	r3, r0, r3
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	3332      	adds	r3, #50	@ 0x32
 8001478:	4a15      	ldr	r2, [pc, #84]	@ (80014d0 <UART_SetConfig+0x118>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	095b      	lsrs	r3, r3, #5
 8001480:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001484:	4419      	add	r1, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4613      	mov	r3, r2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	009a      	lsls	r2, r3, #2
 8001490:	441a      	add	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	fbb2 f2f3 	udiv	r2, r2, r3
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <UART_SetConfig+0x118>)
 800149e:	fba3 0302 	umull	r0, r3, r3, r2
 80014a2:	095b      	lsrs	r3, r3, #5
 80014a4:	2064      	movs	r0, #100	@ 0x64
 80014a6:	fb00 f303 	mul.w	r3, r0, r3
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	011b      	lsls	r3, r3, #4
 80014ae:	3332      	adds	r3, #50	@ 0x32
 80014b0:	4a07      	ldr	r2, [pc, #28]	@ (80014d0 <UART_SetConfig+0x118>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	095b      	lsrs	r3, r3, #5
 80014b8:	f003 020f 	and.w	r2, r3, #15
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	440a      	add	r2, r1
 80014c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80014c4:	bf00      	nop
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40013800 	.word	0x40013800
 80014d0:	51eb851f 	.word	0x51eb851f

080014d4 <H24_RGB565>:
{   
    return ((r & 0xFF) << 16) + ((g & 0xFF) << 8) + (b & 0xFF);
}

inline static uint16_t H24_RGB565(uint8_t reverse, uint32_t color24)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	71fb      	strb	r3, [r7, #7]
	uint8_t b = (color24 >> 16) & 0xFF;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	0c1b      	lsrs	r3, r3, #16
 80014e4:	73fb      	strb	r3, [r7, #15]
	uint8_t g = (color24 >> 8) & 0xFF;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	0a1b      	lsrs	r3, r3, #8
 80014ea:	73bb      	strb	r3, [r7, #14]
	uint8_t r = color24 & 0xFF;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	737b      	strb	r3, [r7, #13]
	if (reverse) return ((b / 8) << 11) | ((g / 4) << 5) | (r / 8);
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d013      	beq.n	800151e <H24_RGB565+0x4a>
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
 80014f8:	08db      	lsrs	r3, r3, #3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	02db      	lsls	r3, r3, #11
 80014fe:	b21a      	sxth	r2, r3
 8001500:	7bbb      	ldrb	r3, [r7, #14]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	b2db      	uxtb	r3, r3
 8001506:	015b      	lsls	r3, r3, #5
 8001508:	b21b      	sxth	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b21a      	sxth	r2, r3
 800150e:	7b7b      	ldrb	r3, [r7, #13]
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	b21b      	sxth	r3, r3
 8001516:	4313      	orrs	r3, r2
 8001518:	b21b      	sxth	r3, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	e012      	b.n	8001544 <H24_RGB565+0x70>
	else return ((r / 8) << 11) | ((g / 4) << 5) | (b / 8);
 800151e:	7b7b      	ldrb	r3, [r7, #13]
 8001520:	08db      	lsrs	r3, r3, #3
 8001522:	b2db      	uxtb	r3, r3
 8001524:	02db      	lsls	r3, r3, #11
 8001526:	b21a      	sxth	r2, r3
 8001528:	7bbb      	ldrb	r3, [r7, #14]
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	015b      	lsls	r3, r3, #5
 8001530:	b21b      	sxth	r3, r3
 8001532:	4313      	orrs	r3, r2
 8001534:	b21a      	sxth	r2, r3
 8001536:	7bfb      	ldrb	r3, [r7, #15]
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	b29b      	uxth	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
	...

08001550 <LCD_Bus>:

inline static void LCD_Bus(uint16_t val)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	80fb      	strh	r3, [r7, #6]
	if (((val >> 15)&0x01)==1) DB_15_S else DB_15_R
 800155a:	88fb      	ldrh	r3, [r7, #6]
 800155c:	0bdb      	lsrs	r3, r3, #15
 800155e:	b29b      	uxth	r3, r3
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <LCD_Bus+0x26>
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800156e:	4894      	ldr	r0, [pc, #592]	@ (80017c0 <LCD_Bus+0x270>)
 8001570:	f7ff f8e2 	bl	8000738 <HAL_GPIO_WritePin>
 8001574:	e005      	b.n	8001582 <LCD_Bus+0x32>
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800157c:	4890      	ldr	r0, [pc, #576]	@ (80017c0 <LCD_Bus+0x270>)
 800157e:	f7ff f8db 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 14)&0x01)==1) DB_14_S else DB_14_R
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	0b9b      	lsrs	r3, r3, #14
 8001586:	b29b      	uxth	r3, r3
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <LCD_Bus+0x4e>
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001596:	488a      	ldr	r0, [pc, #552]	@ (80017c0 <LCD_Bus+0x270>)
 8001598:	f7ff f8ce 	bl	8000738 <HAL_GPIO_WritePin>
 800159c:	e005      	b.n	80015aa <LCD_Bus+0x5a>
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015a4:	4886      	ldr	r0, [pc, #536]	@ (80017c0 <LCD_Bus+0x270>)
 80015a6:	f7ff f8c7 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 13)&0x01)==1) DB_13_S else DB_13_R
 80015aa:	88fb      	ldrh	r3, [r7, #6]
 80015ac:	0b5b      	lsrs	r3, r3, #13
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f003 0301 	and.w	r3, r3, #1
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <LCD_Bus+0x76>
 80015b8:	2201      	movs	r2, #1
 80015ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015be:	4880      	ldr	r0, [pc, #512]	@ (80017c0 <LCD_Bus+0x270>)
 80015c0:	f7ff f8ba 	bl	8000738 <HAL_GPIO_WritePin>
 80015c4:	e005      	b.n	80015d2 <LCD_Bus+0x82>
 80015c6:	2200      	movs	r2, #0
 80015c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80015cc:	487c      	ldr	r0, [pc, #496]	@ (80017c0 <LCD_Bus+0x270>)
 80015ce:	f7ff f8b3 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 12)&0x01)==1) DB_12_S else DB_12_R
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	0b1b      	lsrs	r3, r3, #12
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f003 0301 	and.w	r3, r3, #1
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d006      	beq.n	80015ee <LCD_Bus+0x9e>
 80015e0:	2201      	movs	r2, #1
 80015e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015e6:	4877      	ldr	r0, [pc, #476]	@ (80017c4 <LCD_Bus+0x274>)
 80015e8:	f7ff f8a6 	bl	8000738 <HAL_GPIO_WritePin>
 80015ec:	e005      	b.n	80015fa <LCD_Bus+0xaa>
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015f4:	4873      	ldr	r0, [pc, #460]	@ (80017c4 <LCD_Bus+0x274>)
 80015f6:	f7ff f89f 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 11)&0x01)==1) DB_11_S else DB_11_R
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	0adb      	lsrs	r3, r3, #11
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f003 0301 	and.w	r3, r3, #1
 8001604:	2b00      	cmp	r3, #0
 8001606:	d006      	beq.n	8001616 <LCD_Bus+0xc6>
 8001608:	2201      	movs	r2, #1
 800160a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800160e:	486d      	ldr	r0, [pc, #436]	@ (80017c4 <LCD_Bus+0x274>)
 8001610:	f7ff f892 	bl	8000738 <HAL_GPIO_WritePin>
 8001614:	e005      	b.n	8001622 <LCD_Bus+0xd2>
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800161c:	4869      	ldr	r0, [pc, #420]	@ (80017c4 <LCD_Bus+0x274>)
 800161e:	f7ff f88b 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 10)&0x01)==1) DB_10_S else DB_10_R
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	0a9b      	lsrs	r3, r3, #10
 8001626:	b29b      	uxth	r3, r3
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d006      	beq.n	800163e <LCD_Bus+0xee>
 8001630:	2201      	movs	r2, #1
 8001632:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001636:	4863      	ldr	r0, [pc, #396]	@ (80017c4 <LCD_Bus+0x274>)
 8001638:	f7ff f87e 	bl	8000738 <HAL_GPIO_WritePin>
 800163c:	e005      	b.n	800164a <LCD_Bus+0xfa>
 800163e:	2200      	movs	r2, #0
 8001640:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001644:	485f      	ldr	r0, [pc, #380]	@ (80017c4 <LCD_Bus+0x274>)
 8001646:	f7ff f877 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 9)&0x01)==1) DB_09_S else DB_09_R
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	0a5b      	lsrs	r3, r3, #9
 800164e:	b29b      	uxth	r3, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d006      	beq.n	8001666 <LCD_Bus+0x116>
 8001658:	2201      	movs	r2, #1
 800165a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800165e:	4859      	ldr	r0, [pc, #356]	@ (80017c4 <LCD_Bus+0x274>)
 8001660:	f7ff f86a 	bl	8000738 <HAL_GPIO_WritePin>
 8001664:	e005      	b.n	8001672 <LCD_Bus+0x122>
 8001666:	2200      	movs	r2, #0
 8001668:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800166c:	4855      	ldr	r0, [pc, #340]	@ (80017c4 <LCD_Bus+0x274>)
 800166e:	f7ff f863 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 8)&0x01)==1) DB_08_S else DB_08_R
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	b29b      	uxth	r3, r3
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	2b00      	cmp	r3, #0
 800167e:	d006      	beq.n	800168e <LCD_Bus+0x13e>
 8001680:	2201      	movs	r2, #1
 8001682:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001686:	484f      	ldr	r0, [pc, #316]	@ (80017c4 <LCD_Bus+0x274>)
 8001688:	f7ff f856 	bl	8000738 <HAL_GPIO_WritePin>
 800168c:	e005      	b.n	800169a <LCD_Bus+0x14a>
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001694:	484b      	ldr	r0, [pc, #300]	@ (80017c4 <LCD_Bus+0x274>)
 8001696:	f7ff f84f 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 7)&0x01)==1) DB_07_S else DB_07_R
 800169a:	88fb      	ldrh	r3, [r7, #6]
 800169c:	09db      	lsrs	r3, r3, #7
 800169e:	b29b      	uxth	r3, r3
 80016a0:	f003 0301 	and.w	r3, r3, #1
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <LCD_Bus+0x164>
 80016a8:	2201      	movs	r2, #1
 80016aa:	2180      	movs	r1, #128	@ 0x80
 80016ac:	4845      	ldr	r0, [pc, #276]	@ (80017c4 <LCD_Bus+0x274>)
 80016ae:	f7ff f843 	bl	8000738 <HAL_GPIO_WritePin>
 80016b2:	e004      	b.n	80016be <LCD_Bus+0x16e>
 80016b4:	2200      	movs	r2, #0
 80016b6:	2180      	movs	r1, #128	@ 0x80
 80016b8:	4842      	ldr	r0, [pc, #264]	@ (80017c4 <LCD_Bus+0x274>)
 80016ba:	f7ff f83d 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 6)&0x01)==1) DB_06_S else DB_06_R
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	099b      	lsrs	r3, r3, #6
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d005      	beq.n	80016d8 <LCD_Bus+0x188>
 80016cc:	2201      	movs	r2, #1
 80016ce:	2140      	movs	r1, #64	@ 0x40
 80016d0:	483c      	ldr	r0, [pc, #240]	@ (80017c4 <LCD_Bus+0x274>)
 80016d2:	f7ff f831 	bl	8000738 <HAL_GPIO_WritePin>
 80016d6:	e004      	b.n	80016e2 <LCD_Bus+0x192>
 80016d8:	2200      	movs	r2, #0
 80016da:	2140      	movs	r1, #64	@ 0x40
 80016dc:	4839      	ldr	r0, [pc, #228]	@ (80017c4 <LCD_Bus+0x274>)
 80016de:	f7ff f82b 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 5)&0x01)==1) DB_05_S else DB_05_R
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	f003 0301 	and.w	r3, r3, #1
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d005      	beq.n	80016fc <LCD_Bus+0x1ac>
 80016f0:	2201      	movs	r2, #1
 80016f2:	2120      	movs	r1, #32
 80016f4:	4833      	ldr	r0, [pc, #204]	@ (80017c4 <LCD_Bus+0x274>)
 80016f6:	f7ff f81f 	bl	8000738 <HAL_GPIO_WritePin>
 80016fa:	e004      	b.n	8001706 <LCD_Bus+0x1b6>
 80016fc:	2200      	movs	r2, #0
 80016fe:	2120      	movs	r1, #32
 8001700:	4830      	ldr	r0, [pc, #192]	@ (80017c4 <LCD_Bus+0x274>)
 8001702:	f7ff f819 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 4)&0x01)==1) DB_04_S else DB_04_R
 8001706:	88fb      	ldrh	r3, [r7, #6]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	b29b      	uxth	r3, r3
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <LCD_Bus+0x1d0>
 8001714:	2201      	movs	r2, #1
 8001716:	2110      	movs	r1, #16
 8001718:	482a      	ldr	r0, [pc, #168]	@ (80017c4 <LCD_Bus+0x274>)
 800171a:	f7ff f80d 	bl	8000738 <HAL_GPIO_WritePin>
 800171e:	e004      	b.n	800172a <LCD_Bus+0x1da>
 8001720:	2200      	movs	r2, #0
 8001722:	2110      	movs	r1, #16
 8001724:	4827      	ldr	r0, [pc, #156]	@ (80017c4 <LCD_Bus+0x274>)
 8001726:	f7ff f807 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 3)&0x01)==1) DB_03_S else DB_03_R
 800172a:	88fb      	ldrh	r3, [r7, #6]
 800172c:	08db      	lsrs	r3, r3, #3
 800172e:	b29b      	uxth	r3, r3
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <LCD_Bus+0x1f4>
 8001738:	2201      	movs	r2, #1
 800173a:	2108      	movs	r1, #8
 800173c:	4821      	ldr	r0, [pc, #132]	@ (80017c4 <LCD_Bus+0x274>)
 800173e:	f7fe fffb 	bl	8000738 <HAL_GPIO_WritePin>
 8001742:	e004      	b.n	800174e <LCD_Bus+0x1fe>
 8001744:	2200      	movs	r2, #0
 8001746:	2108      	movs	r1, #8
 8001748:	481e      	ldr	r0, [pc, #120]	@ (80017c4 <LCD_Bus+0x274>)
 800174a:	f7fe fff5 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 2)&0x01)==1) DB_02_S else DB_02_R
 800174e:	88fb      	ldrh	r3, [r7, #6]
 8001750:	089b      	lsrs	r3, r3, #2
 8001752:	b29b      	uxth	r3, r3
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d005      	beq.n	8001768 <LCD_Bus+0x218>
 800175c:	2201      	movs	r2, #1
 800175e:	2104      	movs	r1, #4
 8001760:	4818      	ldr	r0, [pc, #96]	@ (80017c4 <LCD_Bus+0x274>)
 8001762:	f7fe ffe9 	bl	8000738 <HAL_GPIO_WritePin>
 8001766:	e004      	b.n	8001772 <LCD_Bus+0x222>
 8001768:	2200      	movs	r2, #0
 800176a:	2104      	movs	r1, #4
 800176c:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <LCD_Bus+0x274>)
 800176e:	f7fe ffe3 	bl	8000738 <HAL_GPIO_WritePin>
	if (((val >> 1)&0x01)==1) DB_01_S else DB_01_R
 8001772:	88fb      	ldrh	r3, [r7, #6]
 8001774:	085b      	lsrs	r3, r3, #1
 8001776:	b29b      	uxth	r3, r3
 8001778:	f003 0301 	and.w	r3, r3, #1
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <LCD_Bus+0x23c>
 8001780:	2201      	movs	r2, #1
 8001782:	2102      	movs	r1, #2
 8001784:	480f      	ldr	r0, [pc, #60]	@ (80017c4 <LCD_Bus+0x274>)
 8001786:	f7fe ffd7 	bl	8000738 <HAL_GPIO_WritePin>
 800178a:	e004      	b.n	8001796 <LCD_Bus+0x246>
 800178c:	2200      	movs	r2, #0
 800178e:	2102      	movs	r1, #2
 8001790:	480c      	ldr	r0, [pc, #48]	@ (80017c4 <LCD_Bus+0x274>)
 8001792:	f7fe ffd1 	bl	8000738 <HAL_GPIO_WritePin>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	f003 0301 	and.w	r3, r3, #1
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <LCD_Bus+0x25c>
 80017a0:	2201      	movs	r2, #1
 80017a2:	2101      	movs	r1, #1
 80017a4:	4807      	ldr	r0, [pc, #28]	@ (80017c4 <LCD_Bus+0x274>)
 80017a6:	f7fe ffc7 	bl	8000738 <HAL_GPIO_WritePin>
}
 80017aa:	e004      	b.n	80017b6 <LCD_Bus+0x266>
	if ((val&0x01)==1)        DB_00_S else DB_00_R
 80017ac:	2200      	movs	r2, #0
 80017ae:	2101      	movs	r1, #1
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <LCD_Bus+0x274>)
 80017b2:	f7fe ffc1 	bl	8000738 <HAL_GPIO_WritePin>
}
 80017b6:	bf00      	nop
 80017b8:	3708      	adds	r7, #8
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40010c00 	.word	0x40010c00
 80017c4:	40010800 	.word	0x40010800

080017c8 <LCD_Send_Cmd>:

inline static void LCD_Send_Cmd(uint16_t cmd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	80fb      	strh	r3, [r7, #6]
	LCD_RS_R
 80017d2:	2200      	movs	r2, #0
 80017d4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017d8:	4810      	ldr	r0, [pc, #64]	@ (800181c <LCD_Send_Cmd+0x54>)
 80017da:	f7fe ffad 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_CS_R
 80017de:	2200      	movs	r2, #0
 80017e0:	2102      	movs	r1, #2
 80017e2:	480e      	ldr	r0, [pc, #56]	@ (800181c <LCD_Send_Cmd+0x54>)
 80017e4:	f7fe ffa8 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_Bus(cmd);
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff feb0 	bl	8001550 <LCD_Bus>
	LCD_WR_R
 80017f0:	2200      	movs	r2, #0
 80017f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80017f6:	4809      	ldr	r0, [pc, #36]	@ (800181c <LCD_Send_Cmd+0x54>)
 80017f8:	f7fe ff9e 	bl	8000738 <HAL_GPIO_WritePin>
	//_delay_us(5);
	LCD_WR_S
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001802:	4806      	ldr	r0, [pc, #24]	@ (800181c <LCD_Send_Cmd+0x54>)
 8001804:	f7fe ff98 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001808:	2201      	movs	r2, #1
 800180a:	2102      	movs	r1, #2
 800180c:	4803      	ldr	r0, [pc, #12]	@ (800181c <LCD_Send_Cmd+0x54>)
 800180e:	f7fe ff93 	bl	8000738 <HAL_GPIO_WritePin>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40010c00 	.word	0x40010c00

08001820 <LCD_Send_Dat>:

inline static void LCD_Send_Dat(uint16_t dat)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	80fb      	strh	r3, [r7, #6]
	LCD_RS_S
 800182a:	2201      	movs	r2, #1
 800182c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001830:	4810      	ldr	r0, [pc, #64]	@ (8001874 <LCD_Send_Dat+0x54>)
 8001832:	f7fe ff81 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_CS_R	
 8001836:	2200      	movs	r2, #0
 8001838:	2102      	movs	r1, #2
 800183a:	480e      	ldr	r0, [pc, #56]	@ (8001874 <LCD_Send_Dat+0x54>)
 800183c:	f7fe ff7c 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_Bus(dat);
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fe84 	bl	8001550 <LCD_Bus>
	LCD_WR_R
 8001848:	2200      	movs	r2, #0
 800184a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800184e:	4809      	ldr	r0, [pc, #36]	@ (8001874 <LCD_Send_Dat+0x54>)
 8001850:	f7fe ff72 	bl	8000738 <HAL_GPIO_WritePin>
//	_delay_us(5);
	LCD_WR_S
 8001854:	2201      	movs	r2, #1
 8001856:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800185a:	4806      	ldr	r0, [pc, #24]	@ (8001874 <LCD_Send_Dat+0x54>)
 800185c:	f7fe ff6c 	bl	8000738 <HAL_GPIO_WritePin>
	LCD_CS_S
 8001860:	2201      	movs	r2, #1
 8001862:	2102      	movs	r1, #2
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <LCD_Send_Dat+0x54>)
 8001866:	f7fe ff67 	bl	8000738 <HAL_GPIO_WritePin>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40010c00 	.word	0x40010c00

08001878 <LCD_Window>:


inline static void LCD_Window(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{		
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4604      	mov	r4, r0
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	80fb      	strh	r3, [r7, #6]
 800188a:	4603      	mov	r3, r0
 800188c:	80bb      	strh	r3, [r7, #4]
 800188e:	460b      	mov	r3, r1
 8001890:	807b      	strh	r3, [r7, #2]
 8001892:	4613      	mov	r3, r2
 8001894:	803b      	strh	r3, [r7, #0]
	uint8_t data[4] = { 0 };
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
	data[0] = x1 >> 8;
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	723b      	strb	r3, [r7, #8]
  data[1] = x1 & 0xFF;
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	727b      	strb	r3, [r7, #9]
  data[2] = x2 >> 8;
 80018aa:	887b      	ldrh	r3, [r7, #2]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	72bb      	strb	r3, [r7, #10]
  data[3] = x2 & 0xFF;
 80018b4:	887b      	ldrh	r3, [r7, #2]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Cmd(HX8357_CASET);
 80018ba:	202a      	movs	r0, #42	@ 0x2a
 80018bc:	f7ff ff84 	bl	80017c8 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e00a      	b.n	80018dc <LCD_Window+0x64>
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3310      	adds	r3, #16
 80018ca:	443b      	add	r3, r7
 80018cc:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ffa5 	bl	8001820 <LCD_Send_Dat>
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
 80018d8:	3301      	adds	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d9f1      	bls.n	80018c6 <LCD_Window+0x4e>
	data[0] = y1 >> 8;
 80018e2:	88bb      	ldrh	r3, [r7, #4]
 80018e4:	0a1b      	lsrs	r3, r3, #8
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	723b      	strb	r3, [r7, #8]
  data[1] = y1;
 80018ec:	88bb      	ldrh	r3, [r7, #4]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	727b      	strb	r3, [r7, #9]
  data[2] = y2 >> 8;
 80018f2:	883b      	ldrh	r3, [r7, #0]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	72bb      	strb	r3, [r7, #10]
  data[3] = y2;
 80018fc:	883b      	ldrh	r3, [r7, #0]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	72fb      	strb	r3, [r7, #11]
	LCD_Send_Cmd(HX8357_PASET);
 8001902:	202b      	movs	r0, #43	@ 0x2b
 8001904:	f7ff ff60 	bl	80017c8 <LCD_Send_Cmd>
	for (uint8_t i = 0; i < 4; i++) LCD_Send_Dat(data[i]);
 8001908:	2300      	movs	r3, #0
 800190a:	73bb      	strb	r3, [r7, #14]
 800190c:	e00a      	b.n	8001924 <LCD_Window+0xac>
 800190e:	7bbb      	ldrb	r3, [r7, #14]
 8001910:	3310      	adds	r3, #16
 8001912:	443b      	add	r3, r7
 8001914:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8001918:	4618      	mov	r0, r3
 800191a:	f7ff ff81 	bl	8001820 <LCD_Send_Dat>
 800191e:	7bbb      	ldrb	r3, [r7, #14]
 8001920:	3301      	adds	r3, #1
 8001922:	73bb      	strb	r3, [r7, #14]
 8001924:	7bbb      	ldrb	r3, [r7, #14]
 8001926:	2b03      	cmp	r3, #3
 8001928:	d9f1      	bls.n	800190e <LCD_Window+0x96>
  LCD_Send_Cmd(HX83h7_RAMWR);
 800192a:	202c      	movs	r0, #44	@ 0x2c
 800192c:	f7ff ff4c 	bl	80017c8 <LCD_Send_Cmd>
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <LCD_Rect_Fill>:
	LCD_Window(x, y, x, y);
	LCD_Send_Dat(H24_RGB565(0, color24));
}

void LCD_Rect_Fill(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint32_t color24)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	4603      	mov	r3, r0
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	807b      	strh	r3, [r7, #2]
 8001952:	4613      	mov	r3, r2
 8001954:	803b      	strh	r3, [r7, #0]
	uint32_t i = 0;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
	uint32_t j = (uint32_t) w * (uint32_t) h;
 800195a:	887b      	ldrh	r3, [r7, #2]
 800195c:	883a      	ldrh	r2, [r7, #0]
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	60bb      	str	r3, [r7, #8]
	LCD_Window(y, x, y + h - 1, x + w - 1);
 8001964:	88ba      	ldrh	r2, [r7, #4]
 8001966:	883b      	ldrh	r3, [r7, #0]
 8001968:	4413      	add	r3, r2
 800196a:	b29b      	uxth	r3, r3
 800196c:	3b01      	subs	r3, #1
 800196e:	b29c      	uxth	r4, r3
 8001970:	88fa      	ldrh	r2, [r7, #6]
 8001972:	887b      	ldrh	r3, [r7, #2]
 8001974:	4413      	add	r3, r2
 8001976:	b29b      	uxth	r3, r3
 8001978:	3b01      	subs	r3, #1
 800197a:	b29b      	uxth	r3, r3
 800197c:	88f9      	ldrh	r1, [r7, #6]
 800197e:	88b8      	ldrh	r0, [r7, #4]
 8001980:	4622      	mov	r2, r4
 8001982:	f7ff ff79 	bl	8001878 <LCD_Window>
	for (i = 0; i < j; i++) LCD_Send_Dat(H24_RGB565(1, color24));
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e00a      	b.n	80019a2 <LCD_Rect_Fill+0x6a>
 800198c:	6a39      	ldr	r1, [r7, #32]
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fda0 	bl	80014d4 <H24_RGB565>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ff42 	bl	8001820 <LCD_Send_Dat>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d3f0      	bcc.n	800198c <LCD_Rect_Fill+0x54>
}
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd90      	pop	{r4, r7, pc}

080019b4 <LCD_Line>:

void LCD_Line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint8_t size, uint32_t color24)
{
 80019b4:	b590      	push	{r4, r7, lr}
 80019b6:	b08b      	sub	sp, #44	@ 0x2c
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	4604      	mov	r4, r0
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4623      	mov	r3, r4
 80019c4:	80fb      	strh	r3, [r7, #6]
 80019c6:	4603      	mov	r3, r0
 80019c8:	80bb      	strh	r3, [r7, #4]
 80019ca:	460b      	mov	r3, r1
 80019cc:	807b      	strh	r3, [r7, #2]
 80019ce:	4613      	mov	r3, r2
 80019d0:	803b      	strh	r3, [r7, #0]
	int deltaX = abs(x2 - x1);
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	88fb      	ldrh	r3, [r7, #6]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bfb8      	it	lt
 80019dc:	425b      	neglt	r3, r3
 80019de:	61bb      	str	r3, [r7, #24]
	int deltaY = abs(y2 - y1);
 80019e0:	883a      	ldrh	r2, [r7, #0]
 80019e2:	88bb      	ldrh	r3, [r7, #4]
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfb8      	it	lt
 80019ea:	425b      	neglt	r3, r3
 80019ec:	617b      	str	r3, [r7, #20]
	int signX = x1 < x2 ? 1 : -1;
 80019ee:	88fa      	ldrh	r2, [r7, #6]
 80019f0:	887b      	ldrh	r3, [r7, #2]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d201      	bcs.n	80019fa <LCD_Line+0x46>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e001      	b.n	80019fe <LCD_Line+0x4a>
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	613b      	str	r3, [r7, #16]
	int signY = y1 < y2 ? 1 : -1;
 8001a00:	88ba      	ldrh	r2, [r7, #4]
 8001a02:	883b      	ldrh	r3, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d201      	bcs.n	8001a0c <LCD_Line+0x58>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e001      	b.n	8001a10 <LCD_Line+0x5c>
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a10:	60fb      	str	r3, [r7, #12]
	int error = deltaX - deltaY;
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	61fb      	str	r3, [r7, #28]
	int error2 = 0;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
	for (;;)
	{
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001a1e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001a28:	b29c      	uxth	r4, r3
 8001a2a:	88b9      	ldrh	r1, [r7, #4]
 8001a2c:	88f8      	ldrh	r0, [r7, #6]
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	4623      	mov	r3, r4
 8001a34:	f7ff ff80 	bl	8001938 <LCD_Rect_Fill>
		if (x1 == x2 && y1 == y2)
 8001a38:	88fa      	ldrh	r2, [r7, #6]
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d103      	bne.n	8001a48 <LCD_Line+0x94>
 8001a40:	88ba      	ldrh	r2, [r7, #4]
 8001a42:	883b      	ldrh	r3, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d01e      	beq.n	8001a86 <LCD_Line+0xd2>
		break;
		error2 = error * 2;
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	60bb      	str	r3, [r7, #8]
		if (error2 > -deltaY)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	425b      	negs	r3, r3
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	dd08      	ble.n	8001a6a <LCD_Line+0xb6>
		{
			error -= deltaY;
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	61fb      	str	r3, [r7, #28]
			x1 += signX;
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	b29a      	uxth	r2, r3
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	4413      	add	r3, r2
 8001a68:	80fb      	strh	r3, [r7, #6]
		}
		if (error2 < deltaX)
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	dad5      	bge.n	8001a1e <LCD_Line+0x6a>
		{
			error += deltaX;
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4413      	add	r3, r2
 8001a78:	61fb      	str	r3, [r7, #28]
			y1 += signY;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	88bb      	ldrh	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	80bb      	strh	r3, [r7, #4]
		LCD_Rect_Fill(x1, y1, size, size, color24);
 8001a84:	e7cb      	b.n	8001a1e <LCD_Line+0x6a>
		break;
 8001a86:	bf00      	nop
		}
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3724      	adds	r7, #36	@ 0x24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd90      	pop	{r4, r7, pc}

08001a90 <LCD_Triangle>:

void LCD_Triangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint8_t size, uint32_t color24)
{
 8001a90:	b590      	push	{r4, r7, lr}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	4604      	mov	r4, r0
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	80fb      	strh	r3, [r7, #6]
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80bb      	strh	r3, [r7, #4]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	807b      	strh	r3, [r7, #2]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	803b      	strh	r3, [r7, #0]
	LCD_Line(x1, y1, x2, y2, size, color24);
 8001aae:	883c      	ldrh	r4, [r7, #0]
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	88b9      	ldrh	r1, [r7, #4]
 8001ab4:	88f8      	ldrh	r0, [r7, #6]
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	9301      	str	r3, [sp, #4]
 8001aba:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	4623      	mov	r3, r4
 8001ac2:	f7ff ff77 	bl	80019b4 <LCD_Line>
	LCD_Line(x2, y2, x3, y3, size, color24);
 8001ac6:	8bbc      	ldrh	r4, [r7, #28]
 8001ac8:	8b3a      	ldrh	r2, [r7, #24]
 8001aca:	8839      	ldrh	r1, [r7, #0]
 8001acc:	8878      	ldrh	r0, [r7, #2]
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4623      	mov	r3, r4
 8001ada:	f7ff ff6b 	bl	80019b4 <LCD_Line>
	LCD_Line(x3, y3, x1, y1, size, color24);
 8001ade:	88bc      	ldrh	r4, [r7, #4]
 8001ae0:	88fa      	ldrh	r2, [r7, #6]
 8001ae2:	8bb9      	ldrh	r1, [r7, #28]
 8001ae4:	8b38      	ldrh	r0, [r7, #24]
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	4623      	mov	r3, r4
 8001af2:	f7ff ff5f 	bl	80019b4 <LCD_Line>
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd90      	pop	{r4, r7, pc}

08001afe <LCD_Triangle_Fill>:

#define ABS(x) ((x) > 0 ? (x) : -(x))

void LCD_Triangle_Fill(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3, uint32_t color24)
{
 8001afe:	b590      	push	{r4, r7, lr}
 8001b00:	b08d      	sub	sp, #52	@ 0x34
 8001b02:	af02      	add	r7, sp, #8
 8001b04:	4604      	mov	r4, r0
 8001b06:	4608      	mov	r0, r1
 8001b08:	4611      	mov	r1, r2
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	80fb      	strh	r3, [r7, #6]
 8001b10:	4603      	mov	r3, r0
 8001b12:	80bb      	strh	r3, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	823b      	strh	r3, [r7, #16]
 8001b20:	2300      	movs	r3, #0
 8001b22:	81fb      	strh	r3, [r7, #14]
 8001b24:	2300      	movs	r3, #0
 8001b26:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001b28:	2300      	movs	r3, #0
 8001b2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001b30:	2300      	movs	r3, #0
 8001b32:	843b      	strh	r3, [r7, #32]
	yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 8001b34:	2300      	movs	r3, #0
 8001b36:	83fb      	strh	r3, [r7, #30]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	83bb      	strh	r3, [r7, #28]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	837b      	strh	r3, [r7, #26]
 8001b40:	2300      	movs	r3, #0
 8001b42:	833b      	strh	r3, [r7, #24]
 8001b44:	2300      	movs	r3, #0
 8001b46:	82fb      	strh	r3, [r7, #22]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	82bb      	strh	r3, [r7, #20]
	curpixel = 0;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	827b      	strh	r3, [r7, #18]
	
	deltax = ABS(x2 - x1);
 8001b50:	887a      	ldrh	r2, [r7, #2]
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	bfb8      	it	lt
 8001b5a:	425b      	neglt	r3, r3
 8001b5c:	823b      	strh	r3, [r7, #16]
	deltay = ABS(y2 - y1);
 8001b5e:	883a      	ldrh	r2, [r7, #0]
 8001b60:	88bb      	ldrh	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bfb8      	it	lt
 8001b68:	425b      	neglt	r3, r3
 8001b6a:	81fb      	strh	r3, [r7, #14]
	x = x1;
 8001b6c:	88fb      	ldrh	r3, [r7, #6]
 8001b6e:	84fb      	strh	r3, [r7, #38]	@ 0x26
	y = y1;
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	84bb      	strh	r3, [r7, #36]	@ 0x24

	if (x2 >= x1)
 8001b74:	887a      	ldrh	r2, [r7, #2]
 8001b76:	88fb      	ldrh	r3, [r7, #6]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d304      	bcc.n	8001b86 <LCD_Triangle_Fill+0x88>
	{
		xinc1 = 1;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = 1;
 8001b80:	2301      	movs	r3, #1
 8001b82:	843b      	strh	r3, [r7, #32]
 8001b84:	e005      	b.n	8001b92 <LCD_Triangle_Fill+0x94>
	}
	else
	{
		xinc1 = -1;
 8001b86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b8a:	847b      	strh	r3, [r7, #34]	@ 0x22
		xinc2 = -1;
 8001b8c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b90:	843b      	strh	r3, [r7, #32]
	}

	if (y2 >= y1)
 8001b92:	883a      	ldrh	r2, [r7, #0]
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d304      	bcc.n	8001ba4 <LCD_Triangle_Fill+0xa6>
	{
		yinc1 = 1;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	83bb      	strh	r3, [r7, #28]
 8001ba2:	e005      	b.n	8001bb0 <LCD_Triangle_Fill+0xb2>
	}
	else
	{
		yinc1 = -1;
 8001ba4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ba8:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 8001baa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001bae:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay)
 8001bb0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	db10      	blt.n	8001bde <LCD_Triangle_Fill+0xe0>
	{
		xinc1 = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	847b      	strh	r3, [r7, #34]	@ 0x22
		yinc2 = 0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 8001bc4:	8a3b      	ldrh	r3, [r7, #16]
 8001bc6:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 8001bc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bcc:	0fda      	lsrs	r2, r3, #31
 8001bce:	4413      	add	r3, r2
 8001bd0:	105b      	asrs	r3, r3, #1
 8001bd2:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 8001bd4:	89fb      	ldrh	r3, [r7, #14]
 8001bd6:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax;
 8001bd8:	8a3b      	ldrh	r3, [r7, #16]
 8001bda:	82bb      	strh	r3, [r7, #20]
 8001bdc:	e00f      	b.n	8001bfe <LCD_Triangle_Fill+0x100>
	}
	else
	{
		xinc2 = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	843b      	strh	r3, [r7, #32]
		yinc1 = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 8001be6:	89fb      	ldrh	r3, [r7, #14]
 8001be8:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8001bea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bee:	0fda      	lsrs	r2, r3, #31
 8001bf0:	4413      	add	r3, r2
 8001bf2:	105b      	asrs	r3, r3, #1
 8001bf4:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 8001bf6:	8a3b      	ldrh	r3, [r7, #16]
 8001bf8:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay;
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	827b      	strh	r3, [r7, #18]
 8001c02:	e034      	b.n	8001c6e <LCD_Triangle_Fill+0x170>
	{
		LCD_Line(x, y, x3, y3, 1, color24);
 8001c04:	8cf8      	ldrh	r0, [r7, #38]	@ 0x26
 8001c06:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8001c08:	8fbc      	ldrh	r4, [r7, #60]	@ 0x3c
 8001c0a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8001c0c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2301      	movs	r3, #1
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	4623      	mov	r3, r4
 8001c16:	f7ff fecd 	bl	80019b4 <LCD_Line>

		num += numadd;
 8001c1a:	8b3a      	ldrh	r2, [r7, #24]
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	833b      	strh	r3, [r7, #24]
		if (num >= den)
 8001c24:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001c28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	db0e      	blt.n	8001c4e <LCD_Triangle_Fill+0x150>
		{
			num -= den;
 8001c30:	8b3a      	ldrh	r2, [r7, #24]
 8001c32:	8b7b      	ldrh	r3, [r7, #26]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	833b      	strh	r3, [r7, #24]
			x += xinc1;
 8001c3a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c3c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	84fb      	strh	r3, [r7, #38]	@ 0x26
			y += yinc1;
 8001c44:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c46:	8bfb      	ldrh	r3, [r7, #30]
 8001c48:	4413      	add	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		}
		x += xinc2;
 8001c4e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001c50:	8c3b      	ldrh	r3, [r7, #32]
 8001c52:	4413      	add	r3, r2
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	84fb      	strh	r3, [r7, #38]	@ 0x26
		y += yinc2;
 8001c58:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c5a:	8bbb      	ldrh	r3, [r7, #28]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	b29b      	uxth	r3, r3
 8001c60:	84bb      	strh	r3, [r7, #36]	@ 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8001c62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	827b      	strh	r3, [r7, #18]
 8001c6e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	ddc4      	ble.n	8001c04 <LCD_Triangle_Fill+0x106>
	}
}
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	372c      	adds	r7, #44	@ 0x2c
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd90      	pop	{r4, r7, pc}

08001c84 <LCD_Rect>:

void LCD_Rect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t size, uint32_t color24)
{
 8001c84:	b590      	push	{r4, r7, lr}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	4611      	mov	r1, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	80fb      	strh	r3, [r7, #6]
 8001c96:	4603      	mov	r3, r0
 8001c98:	80bb      	strh	r3, [r7, #4]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	807b      	strh	r3, [r7, #2]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	803b      	strh	r3, [r7, #0]
	LCD_Line(x, y, x + w, y, size, color24);
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	88bc      	ldrh	r4, [r7, #4]
 8001cac:	88b9      	ldrh	r1, [r7, #4]
 8001cae:	88f8      	ldrh	r0, [r7, #6]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	9301      	str	r3, [sp, #4]
 8001cb4:	7e3b      	ldrb	r3, [r7, #24]
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f7ff fe7b 	bl	80019b4 <LCD_Line>
	LCD_Line(x, y + h, x + w, y + h, size, color24);
 8001cbe:	88ba      	ldrh	r2, [r7, #4]
 8001cc0:	883b      	ldrh	r3, [r7, #0]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29c      	uxth	r4, r3
 8001cce:	88ba      	ldrh	r2, [r7, #4]
 8001cd0:	883b      	ldrh	r3, [r7, #0]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	88f8      	ldrh	r0, [r7, #6]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	7e3b      	ldrb	r3, [r7, #24]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	f7ff fe66 	bl	80019b4 <LCD_Line>
	LCD_Line(x, y, x, y + h, size, color24);
 8001ce8:	88ba      	ldrh	r2, [r7, #4]
 8001cea:	883b      	ldrh	r3, [r7, #0]
 8001cec:	4413      	add	r3, r2
 8001cee:	b29c      	uxth	r4, r3
 8001cf0:	88fa      	ldrh	r2, [r7, #6]
 8001cf2:	88b9      	ldrh	r1, [r7, #4]
 8001cf4:	88f8      	ldrh	r0, [r7, #6]
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	7e3b      	ldrb	r3, [r7, #24]
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	4623      	mov	r3, r4
 8001d00:	f7ff fe58 	bl	80019b4 <LCD_Line>
	LCD_Line(x + w, y, x + w, y + h, size, color24);
 8001d04:	88fa      	ldrh	r2, [r7, #6]
 8001d06:	887b      	ldrh	r3, [r7, #2]
 8001d08:	4413      	add	r3, r2
 8001d0a:	b298      	uxth	r0, r3
 8001d0c:	88fa      	ldrh	r2, [r7, #6]
 8001d0e:	887b      	ldrh	r3, [r7, #2]
 8001d10:	4413      	add	r3, r2
 8001d12:	b29c      	uxth	r4, r3
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	883b      	ldrh	r3, [r7, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	88b9      	ldrh	r1, [r7, #4]
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	7e3b      	ldrb	r3, [r7, #24]
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	4613      	mov	r3, r2
 8001d28:	4622      	mov	r2, r4
 8001d2a:	f7ff fe43 	bl	80019b4 <LCD_Line>
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd90      	pop	{r4, r7, pc}

08001d36 <LCD_Ellipse>:

void LCD_Ellipse(int16_t x0, int16_t y0, int16_t rx, int16_t ry, uint8_t fill, uint8_t size, uint32_t color24)
{
 8001d36:	b590      	push	{r4, r7, lr}
 8001d38:	b08b      	sub	sp, #44	@ 0x2c
 8001d3a:	af02      	add	r7, sp, #8
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	4608      	mov	r0, r1
 8001d40:	4611      	mov	r1, r2
 8001d42:	461a      	mov	r2, r3
 8001d44:	4623      	mov	r3, r4
 8001d46:	80fb      	strh	r3, [r7, #6]
 8001d48:	4603      	mov	r3, r0
 8001d4a:	80bb      	strh	r3, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	803b      	strh	r3, [r7, #0]
	int16_t x, y;
	int32_t rx2 = rx * rx;
 8001d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001d58:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
	int32_t ry2 = ry * ry;
 8001d62:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d66:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	613b      	str	r3, [r7, #16]
	int32_t fx2 = 4 * rx2;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	60fb      	str	r3, [r7, #12]
	int32_t fy2 = 4 * ry2;
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	60bb      	str	r3, [r7, #8]
	int32_t s;
	if (fill)
 8001d7c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 8101 	beq.w	8001f88 <LCD_Ellipse+0x252>
	{
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	83fb      	strh	r3, [r7, #30]
 8001d8a:	883b      	ldrh	r3, [r7, #0]
 8001d8c:	83bb      	strh	r3, [r7, #28]
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	005a      	lsls	r2, r3, #1
 8001d92:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	f1c3 0301 	rsb	r3, r3, #1
 8001d9c:	6979      	ldr	r1, [r7, #20]
 8001d9e:	fb01 f303 	mul.w	r3, r1, r3
 8001da2:	4413      	add	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	e062      	b.n	8001e6e <LCD_Ellipse+0x138>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8001da8:	88fa      	ldrh	r2, [r7, #6]
 8001daa:	8bfb      	ldrh	r3, [r7, #30]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	b298      	uxth	r0, r3
 8001db0:	88ba      	ldrh	r2, [r7, #4]
 8001db2:	8bbb      	ldrh	r3, [r7, #28]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	b299      	uxth	r1, r3
 8001db8:	88fa      	ldrh	r2, [r7, #6]
 8001dba:	8bfb      	ldrh	r3, [r7, #30]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b29a      	uxth	r2, r3
 8001dc0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b29c      	uxth	r4, r3
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	8bbb      	ldrh	r3, [r7, #28]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4613      	mov	r3, r2
 8001de2:	4622      	mov	r2, r4
 8001de4:	f7ff fde6 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8001de8:	88fa      	ldrh	r2, [r7, #6]
 8001dea:	8bfb      	ldrh	r3, [r7, #30]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b298      	uxth	r0, r3
 8001df0:	88ba      	ldrh	r2, [r7, #4]
 8001df2:	8bbb      	ldrh	r3, [r7, #28]
 8001df4:	4413      	add	r3, r2
 8001df6:	b299      	uxth	r1, r3
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	8bfb      	ldrh	r3, [r7, #30]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	b29c      	uxth	r4, r3
 8001e0e:	88ba      	ldrh	r2, [r7, #4]
 8001e10:	8bbb      	ldrh	r3, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001e1e:	9300      	str	r3, [sp, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	4622      	mov	r2, r4
 8001e24:	f7ff fdc6 	bl	80019b4 <LCD_Line>
			if (s >= 0)
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	db0f      	blt.n	8001e4e <LCD_Ellipse+0x118>
			{
				s += fx2 * (1 - y);
 8001e2e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e32:	f1c3 0301 	rsb	r3, r3, #1
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	fb02 f303 	mul.w	r3, r2, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4413      	add	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
				y--;
 8001e42:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	83bb      	strh	r3, [r7, #28]
			}
			s += ry2 * ((4 * x) + 6);
 8001e4e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	3306      	adds	r3, #6
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	fb02 f303 	mul.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4413      	add	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8001e62:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	83fb      	strh	r3, [r7, #30]
 8001e6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	fb03 f202 	mul.w	r2, r3, r2
 8001e78:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e7c:	6979      	ldr	r1, [r7, #20]
 8001e7e:	fb01 f303 	mul.w	r3, r1, r3
 8001e82:	429a      	cmp	r2, r3
 8001e84:	dd90      	ble.n	8001da8 <LCD_Ellipse+0x72>
		}
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8001e86:	887b      	ldrh	r3, [r7, #2]
 8001e88:	83fb      	strh	r3, [r7, #30]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	83bb      	strh	r3, [r7, #28]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	f1c3 0301 	rsb	r3, r3, #1
 8001e9c:	6939      	ldr	r1, [r7, #16]
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e062      	b.n	8001f6e <LCD_Ellipse+0x238>
		{
			LCD_Line(x0 - x, y0 - y, x0 + x + 1 - size, y0 - y, size, color24);
 8001ea8:	88fa      	ldrh	r2, [r7, #6]
 8001eaa:	8bfb      	ldrh	r3, [r7, #30]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	b298      	uxth	r0, r3
 8001eb0:	88ba      	ldrh	r2, [r7, #4]
 8001eb2:	8bbb      	ldrh	r3, [r7, #28]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	b299      	uxth	r1, r3
 8001eb8:	88fa      	ldrh	r2, [r7, #6]
 8001eba:	8bfb      	ldrh	r3, [r7, #30]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	3301      	adds	r3, #1
 8001ecc:	b29c      	uxth	r4, r3
 8001ece:	88ba      	ldrh	r2, [r7, #4]
 8001ed0:	8bbb      	ldrh	r3, [r7, #28]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	4622      	mov	r2, r4
 8001ee4:	f7ff fd66 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 - x, y0 + y, x0 + x + 1 - size, y0 + y, size, color24);
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	8bfb      	ldrh	r3, [r7, #30]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	b298      	uxth	r0, r3
 8001ef0:	88ba      	ldrh	r2, [r7, #4]
 8001ef2:	8bbb      	ldrh	r3, [r7, #28]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	b299      	uxth	r1, r3
 8001ef8:	88fa      	ldrh	r2, [r7, #6]
 8001efa:	8bfb      	ldrh	r3, [r7, #30]
 8001efc:	4413      	add	r3, r2
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	b29c      	uxth	r4, r3
 8001f0e:	88ba      	ldrh	r2, [r7, #4]
 8001f10:	8bbb      	ldrh	r3, [r7, #28]
 8001f12:	4413      	add	r3, r2
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f18:	9301      	str	r3, [sp, #4]
 8001f1a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	4613      	mov	r3, r2
 8001f22:	4622      	mov	r2, r4
 8001f24:	f7ff fd46 	bl	80019b4 <LCD_Line>
			if (s >= 0)
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	db0f      	blt.n	8001f4e <LCD_Ellipse+0x218>
			{
				s += fy2 * (1 - x);
 8001f2e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f32:	f1c3 0301 	rsb	r3, r3, #1
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	fb02 f303 	mul.w	r3, r2, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4413      	add	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
				x--;
 8001f42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	83fb      	strh	r3, [r7, #30]
			}
			s += rx2 * ((4 * y) + 6);
 8001f4e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	3306      	adds	r3, #6
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	fb02 f303 	mul.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4413      	add	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1-2 * rx); rx2 * y <= ry2 * x; y++)
 8001f62:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	83bb      	strh	r3, [r7, #28]
 8001f6e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	fb03 f202 	mul.w	r2, r3, r2
 8001f78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	429a      	cmp	r2, r3
 8001f84:	dd90      	ble.n	8001ea8 <LCD_Ellipse+0x172>
				x--;
			}
			s += rx2 * ((4 * y) + 6);
		}
	}
}
 8001f86:	e117      	b.n	80021b8 <LCD_Ellipse+0x482>
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	83fb      	strh	r3, [r7, #30]
 8001f8c:	883b      	ldrh	r3, [r7, #0]
 8001f8e:	83bb      	strh	r3, [r7, #28]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	005a      	lsls	r2, r3, #1
 8001f94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	f1c3 0301 	rsb	r3, r3, #1
 8001f9e:	6979      	ldr	r1, [r7, #20]
 8001fa0:	fb01 f303 	mul.w	r3, r1, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
 8001fa8:	e06e      	b.n	8002088 <LCD_Ellipse+0x352>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8001faa:	88fa      	ldrh	r2, [r7, #6]
 8001fac:	8bfb      	ldrh	r3, [r7, #30]
 8001fae:	4413      	add	r3, r2
 8001fb0:	b298      	uxth	r0, r3
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	8bbb      	ldrh	r3, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	b299      	uxth	r1, r3
 8001fba:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fc4:	b29c      	uxth	r4, r3
 8001fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	4623      	mov	r3, r4
 8001fcc:	f7ff fcb4 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	8bfb      	ldrh	r3, [r7, #30]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	88ba      	ldrh	r2, [r7, #4]
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	4413      	add	r3, r2
 8001fde:	b299      	uxth	r1, r3
 8001fe0:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fe4:	b29a      	uxth	r2, r3
 8001fe6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001fea:	b29c      	uxth	r4, r3
 8001fec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	f7ff fca1 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 8001ff6:	88fa      	ldrh	r2, [r7, #6]
 8001ff8:	8bfb      	ldrh	r3, [r7, #30]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	b298      	uxth	r0, r3
 8001ffe:	88ba      	ldrh	r2, [r7, #4]
 8002000:	8bbb      	ldrh	r3, [r7, #28]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	b299      	uxth	r1, r3
 8002006:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800200a:	b29a      	uxth	r2, r3
 800200c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002010:	b29c      	uxth	r4, r3
 8002012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	4623      	mov	r3, r4
 8002018:	f7ff fc8e 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	8bfb      	ldrh	r3, [r7, #30]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	b298      	uxth	r0, r3
 8002024:	88ba      	ldrh	r2, [r7, #4]
 8002026:	8bbb      	ldrh	r3, [r7, #28]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b299      	uxth	r1, r3
 800202c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002030:	b29a      	uxth	r2, r3
 8002032:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002036:	b29c      	uxth	r4, r3
 8002038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4623      	mov	r3, r4
 800203e:	f7ff fc7b 	bl	8001938 <LCD_Rect_Fill>
			if (s >= 0)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0f      	blt.n	8002068 <LCD_Ellipse+0x332>
				s += fx2 * (1 - y);
 8002048:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800204c:	f1c3 0301 	rsb	r3, r3, #1
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4413      	add	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
				y--;
 800205c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29b      	uxth	r3, r3
 8002066:	83bb      	strh	r3, [r7, #28]
			s += ry2 * ((4 * x) + 6);
 8002068:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3306      	adds	r3, #6
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4413      	add	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
		for (x = 0, y = ry, s = 2 * ry2 + rx2 * (1 - 2 * ry); ry2 * x <= rx2 * y; x++)
 800207c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002080:	b29b      	uxth	r3, r3
 8002082:	3301      	adds	r3, #1
 8002084:	b29b      	uxth	r3, r3
 8002086:	83fb      	strh	r3, [r7, #30]
 8002088:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	fb03 f202 	mul.w	r2, r3, r2
 8002092:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002096:	6979      	ldr	r1, [r7, #20]
 8002098:	fb01 f303 	mul.w	r3, r1, r3
 800209c:	429a      	cmp	r2, r3
 800209e:	dd84      	ble.n	8001faa <LCD_Ellipse+0x274>
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 80020a0:	887b      	ldrh	r3, [r7, #2]
 80020a2:	83fb      	strh	r3, [r7, #30]
 80020a4:	2300      	movs	r3, #0
 80020a6:	83bb      	strh	r3, [r7, #28]
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	005a      	lsls	r2, r3, #1
 80020ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	f1c3 0301 	rsb	r3, r3, #1
 80020b6:	6939      	ldr	r1, [r7, #16]
 80020b8:	fb01 f303 	mul.w	r3, r1, r3
 80020bc:	4413      	add	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	e06e      	b.n	80021a0 <LCD_Ellipse+0x46a>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	8bfb      	ldrh	r3, [r7, #30]
 80020c6:	4413      	add	r3, r2
 80020c8:	b298      	uxth	r0, r3
 80020ca:	88ba      	ldrh	r2, [r7, #4]
 80020cc:	8bbb      	ldrh	r3, [r7, #28]
 80020ce:	4413      	add	r3, r2
 80020d0:	b299      	uxth	r1, r3
 80020d2:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020dc:	b29c      	uxth	r4, r3
 80020de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020e0:	9300      	str	r3, [sp, #0]
 80020e2:	4623      	mov	r3, r4
 80020e4:	f7ff fc28 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 80020e8:	88fa      	ldrh	r2, [r7, #6]
 80020ea:	8bfb      	ldrh	r3, [r7, #30]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	b298      	uxth	r0, r3
 80020f0:	88ba      	ldrh	r2, [r7, #4]
 80020f2:	8bbb      	ldrh	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	b299      	uxth	r1, r3
 80020f8:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002102:	b29c      	uxth	r4, r3
 8002104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	4623      	mov	r3, r4
 800210a:	f7ff fc15 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 800210e:	88fa      	ldrh	r2, [r7, #6]
 8002110:	8bfb      	ldrh	r3, [r7, #30]
 8002112:	4413      	add	r3, r2
 8002114:	b298      	uxth	r0, r3
 8002116:	88ba      	ldrh	r2, [r7, #4]
 8002118:	8bbb      	ldrh	r3, [r7, #28]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	b299      	uxth	r1, r3
 800211e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002122:	b29a      	uxth	r2, r3
 8002124:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002128:	b29c      	uxth	r4, r3
 800212a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	4623      	mov	r3, r4
 8002130:	f7ff fc02 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 8002134:	88fa      	ldrh	r2, [r7, #6]
 8002136:	8bfb      	ldrh	r3, [r7, #30]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	b298      	uxth	r0, r3
 800213c:	88ba      	ldrh	r2, [r7, #4]
 800213e:	8bbb      	ldrh	r3, [r7, #28]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	b299      	uxth	r1, r3
 8002144:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8002148:	b29a      	uxth	r2, r3
 800214a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800214e:	b29c      	uxth	r4, r3
 8002150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	4623      	mov	r3, r4
 8002156:	f7ff fbef 	bl	8001938 <LCD_Rect_Fill>
			if (s >= 0)
 800215a:	69bb      	ldr	r3, [r7, #24]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0f      	blt.n	8002180 <LCD_Ellipse+0x44a>
				s += fy2 * (1 - x);
 8002160:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002164:	f1c3 0301 	rsb	r3, r3, #1
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
				x--;
 8002174:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29b      	uxth	r3, r3
 800217e:	83fb      	strh	r3, [r7, #30]
			s += rx2 * ((4 * y) + 6);
 8002180:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	3306      	adds	r3, #6
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
		for (x = rx, y = 0, s = 2 * rx2 + ry2 * (1 - 2 * rx); rx2 * y <= ry2 * x; y++)
 8002194:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002198:	b29b      	uxth	r3, r3
 800219a:	3301      	adds	r3, #1
 800219c:	b29b      	uxth	r3, r3
 800219e:	83bb      	strh	r3, [r7, #28]
 80021a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80021ae:	6939      	ldr	r1, [r7, #16]
 80021b0:	fb01 f303 	mul.w	r3, r1, r3
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dd84      	ble.n	80020c2 <LCD_Ellipse+0x38c>
}
 80021b8:	bf00      	nop
 80021ba:	3724      	adds	r7, #36	@ 0x24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <LCD_Circle>:

void LCD_Circle(uint16_t x, uint16_t y, uint8_t radius, uint8_t fill, uint8_t size, uint32_t color24)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4603      	mov	r3, r0
 80021d4:	80bb      	strh	r3, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	70fb      	strb	r3, [r7, #3]
 80021da:	4613      	mov	r3, r2
 80021dc:	70bb      	strb	r3, [r7, #2]
	int a_, b_, P;
	a_ = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
	b_ = radius;
 80021e2:	78fb      	ldrb	r3, [r7, #3]
 80021e4:	613b      	str	r3, [r7, #16]
	P = 1 - radius;
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	f1c3 0301 	rsb	r3, r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
	while (a_ <= b_)
 80021ee:	e0fc      	b.n	80023ea <LCD_Circle+0x22a>
	{
		if (fill == 1)
 80021f0:	78bb      	ldrb	r3, [r7, #2]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d136      	bne.n	8002264 <LCD_Circle+0xa4>
		{
			LCD_Rect_Fill(x - a_, y - b_, 2 * a_ + 1, 2 * b_ + 1, color24);
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	b298      	uxth	r0, r3
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	b29b      	uxth	r3, r3
 8002204:	88ba      	ldrh	r2, [r7, #4]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	b299      	uxth	r1, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	b29b      	uxth	r3, r3
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	b29b      	uxth	r3, r3
 8002212:	3301      	adds	r3, #1
 8002214:	b29a      	uxth	r2, r3
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	b29b      	uxth	r3, r3
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	b29b      	uxth	r3, r3
 800221e:	3301      	adds	r3, #1
 8002220:	b29c      	uxth	r4, r3
 8002222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002224:	9300      	str	r3, [sp, #0]
 8002226:	4623      	mov	r3, r4
 8002228:	f7ff fb86 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, 2 * b_ + 1, 2 * a_ + 1, color24);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	b29b      	uxth	r3, r3
 8002230:	88fa      	ldrh	r2, [r7, #6]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	b298      	uxth	r0, r3
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	b29b      	uxth	r3, r3
 800223a:	88ba      	ldrh	r2, [r7, #4]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	b299      	uxth	r1, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	b29b      	uxth	r3, r3
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	b29b      	uxth	r3, r3
 8002248:	3301      	adds	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	b29b      	uxth	r3, r3
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	b29b      	uxth	r3, r3
 8002254:	3301      	adds	r3, #1
 8002256:	b29c      	uxth	r4, r3
 8002258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4623      	mov	r3, r4
 800225e:	f7ff fb6b 	bl	8001938 <LCD_Rect_Fill>
 8002262:	e0a7      	b.n	80023b4 <LCD_Circle+0x1f4>
		}
		else
		{
			LCD_Rect_Fill(a_ + x, b_ + y, size, size, color24);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	b29a      	uxth	r2, r3
 8002268:	88fb      	ldrh	r3, [r7, #6]
 800226a:	4413      	add	r3, r2
 800226c:	b298      	uxth	r0, r3
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	b29a      	uxth	r2, r3
 8002272:	88bb      	ldrh	r3, [r7, #4]
 8002274:	4413      	add	r3, r2
 8002276:	b299      	uxth	r1, r3
 8002278:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800227c:	b29a      	uxth	r2, r3
 800227e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002282:	b29c      	uxth	r4, r3
 8002284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	4623      	mov	r3, r4
 800228a:	f7ff fb55 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, a_ + y, size, size, color24);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	b29a      	uxth	r2, r3
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	4413      	add	r3, r2
 8002296:	b298      	uxth	r0, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	b29a      	uxth	r2, r3
 800229c:	88bb      	ldrh	r3, [r7, #4]
 800229e:	4413      	add	r3, r2
 80022a0:	b299      	uxth	r1, r3
 80022a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022ac:	b29c      	uxth	r4, r3
 80022ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	4623      	mov	r3, r4
 80022b4:	f7ff fb40 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, b_ + y, size, size, color24);
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	88fa      	ldrh	r2, [r7, #6]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	b298      	uxth	r0, r3
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	88bb      	ldrh	r3, [r7, #4]
 80022c8:	4413      	add	r3, r2
 80022ca:	b299      	uxth	r1, r3
 80022cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022d6:	b29c      	uxth	r4, r3
 80022d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022da:	9300      	str	r3, [sp, #0]
 80022dc:	4623      	mov	r3, r4
 80022de:	f7ff fb2b 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, a_ + y, size, size, color24);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	b298      	uxth	r0, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	88bb      	ldrh	r3, [r7, #4]
 80022f2:	4413      	add	r3, r2
 80022f4:	b299      	uxth	r1, r3
 80022f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002300:	b29c      	uxth	r4, r3
 8002302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	4623      	mov	r3, r4
 8002308:	f7ff fb16 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(b_ + x, y - a_, size, size, color24);
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	b29a      	uxth	r2, r3
 8002310:	88fb      	ldrh	r3, [r7, #6]
 8002312:	4413      	add	r3, r2
 8002314:	b298      	uxth	r0, r3
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	b29b      	uxth	r3, r3
 800231a:	88ba      	ldrh	r2, [r7, #4]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	b299      	uxth	r1, r3
 8002320:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002324:	b29a      	uxth	r2, r3
 8002326:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800232a:	b29c      	uxth	r4, r3
 800232c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	4623      	mov	r3, r4
 8002332:	f7ff fb01 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(a_ + x, y - b_, size, size, color24);
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	b29a      	uxth	r2, r3
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	4413      	add	r3, r2
 800233e:	b298      	uxth	r0, r3
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	b29b      	uxth	r3, r3
 8002344:	88ba      	ldrh	r2, [r7, #4]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	b299      	uxth	r1, r3
 800234a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800234e:	b29a      	uxth	r2, r3
 8002350:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002354:	b29c      	uxth	r4, r3
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	4623      	mov	r3, r4
 800235c:	f7ff faec 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - a_, y - b_, size, size, color24);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	b29b      	uxth	r3, r3
 8002364:	88fa      	ldrh	r2, [r7, #6]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b298      	uxth	r0, r3
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	b29b      	uxth	r3, r3
 800236e:	88ba      	ldrh	r2, [r7, #4]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b299      	uxth	r1, r3
 8002374:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002378:	b29a      	uxth	r2, r3
 800237a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800237e:	b29c      	uxth	r4, r3
 8002380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	4623      	mov	r3, r4
 8002386:	f7ff fad7 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x - b_, y - a_, size, size, color24);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	b29b      	uxth	r3, r3
 800238e:	88fa      	ldrh	r2, [r7, #6]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	b298      	uxth	r0, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	b29b      	uxth	r3, r3
 8002398:	88ba      	ldrh	r2, [r7, #4]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	b299      	uxth	r1, r3
 800239e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023a8:	b29c      	uxth	r4, r3
 80023aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	4623      	mov	r3, r4
 80023b0:	f7ff fac2 	bl	8001938 <LCD_Rect_Fill>
		}
		if (P < 0)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	da09      	bge.n	80023ce <LCD_Circle+0x20e>
		{
			P = (P + 3) + (2 * a_);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1cda      	adds	r2, r3, #3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
			a_++;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00d      	b.n	80023ea <LCD_Circle+0x22a>
		}
		else
		{
			P = (P + 5) + (2 * (a_ - b_));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1d5a      	adds	r2, r3, #5
 80023d2:	6979      	ldr	r1, [r7, #20]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1acb      	subs	r3, r1, r3
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	4413      	add	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
			a_++;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
			b_--;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	613b      	str	r3, [r7, #16]
	while (a_ <= b_)
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	f77f aefe 	ble.w	80021f0 <LCD_Circle+0x30>
		}
	}
}
 80023f4:	bf00      	nop
 80023f6:	bf00      	nop
 80023f8:	371c      	adds	r7, #28
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd90      	pop	{r4, r7, pc}

080023fe <LCD_Circle_Helper>:

void LCD_Circle_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, uint8_t size, uint32_t color24)
{
 80023fe:	b590      	push	{r4, r7, lr}
 8002400:	b089      	sub	sp, #36	@ 0x24
 8002402:	af02      	add	r7, sp, #8
 8002404:	4604      	mov	r4, r0
 8002406:	4608      	mov	r0, r1
 8002408:	4611      	mov	r1, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4623      	mov	r3, r4
 800240e:	80fb      	strh	r3, [r7, #6]
 8002410:	4603      	mov	r3, r0
 8002412:	80bb      	strh	r3, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	807b      	strh	r3, [r7, #2]
 8002418:	4613      	mov	r3, r2
 800241a:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	f1c3 0301 	rsb	r3, r3, #1
 8002422:	b29b      	uxth	r3, r3
 8002424:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 800242a:	887b      	ldrh	r3, [r7, #2]
 800242c:	461a      	mov	r2, r3
 800242e:	03d2      	lsls	r2, r2, #15
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	b29b      	uxth	r3, r3
 8002436:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800243c:	887b      	ldrh	r3, [r7, #2]
 800243e:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8002440:	e0cd      	b.n	80025de <LCD_Circle_Helper+0x1e0>
		if (f >= 0) {
 8002442:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002446:	2b00      	cmp	r3, #0
 8002448:	db0e      	blt.n	8002468 <LCD_Circle_Helper+0x6a>
			y--;
 800244a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800244e:	b29b      	uxth	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b29b      	uxth	r3, r3
 8002454:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002456:	8a7b      	ldrh	r3, [r7, #18]
 8002458:	3302      	adds	r3, #2
 800245a:	b29b      	uxth	r3, r3
 800245c:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 800245e:	8afa      	ldrh	r2, [r7, #22]
 8002460:	8a7b      	ldrh	r3, [r7, #18]
 8002462:	4413      	add	r3, r2
 8002464:	b29b      	uxth	r3, r3
 8002466:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002468:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800246c:	b29b      	uxth	r3, r3
 800246e:	3301      	adds	r3, #1
 8002470:	b29b      	uxth	r3, r3
 8002472:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8002474:	8abb      	ldrh	r3, [r7, #20]
 8002476:	3302      	adds	r3, #2
 8002478:	b29b      	uxth	r3, r3
 800247a:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 800247c:	8afa      	ldrh	r2, [r7, #22]
 800247e:	8abb      	ldrh	r3, [r7, #20]
 8002480:	4413      	add	r3, r2
 8002482:	b29b      	uxth	r3, r3
 8002484:	82fb      	strh	r3, [r7, #22]
		if (cornername & 0x4) {
 8002486:	787b      	ldrb	r3, [r7, #1]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d025      	beq.n	80024dc <LCD_Circle_Helper+0xde>
			LCD_Rect_Fill(x0 + x, y0 + y, size, size, color24);
 8002490:	88fa      	ldrh	r2, [r7, #6]
 8002492:	8a3b      	ldrh	r3, [r7, #16]
 8002494:	4413      	add	r3, r2
 8002496:	b298      	uxth	r0, r3
 8002498:	88ba      	ldrh	r2, [r7, #4]
 800249a:	89fb      	ldrh	r3, [r7, #14]
 800249c:	4413      	add	r3, r2
 800249e:	b299      	uxth	r1, r3
 80024a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024aa:	b29c      	uxth	r4, r3
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	4623      	mov	r3, r4
 80024b2:	f7ff fa41 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 + x, size, size, color24);
 80024b6:	88fa      	ldrh	r2, [r7, #6]
 80024b8:	89fb      	ldrh	r3, [r7, #14]
 80024ba:	4413      	add	r3, r2
 80024bc:	b298      	uxth	r0, r3
 80024be:	88ba      	ldrh	r2, [r7, #4]
 80024c0:	8a3b      	ldrh	r3, [r7, #16]
 80024c2:	4413      	add	r3, r2
 80024c4:	b299      	uxth	r1, r3
 80024c6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024d0:	b29c      	uxth	r4, r3
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	4623      	mov	r3, r4
 80024d8:	f7ff fa2e 	bl	8001938 <LCD_Rect_Fill>
		}
		if (cornername & 0x2) {
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d025      	beq.n	8002532 <LCD_Circle_Helper+0x134>
			LCD_Rect_Fill(x0 + x, y0 - y, size, size, color24);
 80024e6:	88fa      	ldrh	r2, [r7, #6]
 80024e8:	8a3b      	ldrh	r3, [r7, #16]
 80024ea:	4413      	add	r3, r2
 80024ec:	b298      	uxth	r0, r3
 80024ee:	88ba      	ldrh	r2, [r7, #4]
 80024f0:	89fb      	ldrh	r3, [r7, #14]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	b299      	uxth	r1, r3
 80024f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002500:	b29c      	uxth	r4, r3
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	4623      	mov	r3, r4
 8002508:	f7ff fa16 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 + y, y0 - x, size, size, color24);
 800250c:	88fa      	ldrh	r2, [r7, #6]
 800250e:	89fb      	ldrh	r3, [r7, #14]
 8002510:	4413      	add	r3, r2
 8002512:	b298      	uxth	r0, r3
 8002514:	88ba      	ldrh	r2, [r7, #4]
 8002516:	8a3b      	ldrh	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	b299      	uxth	r1, r3
 800251c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002520:	b29a      	uxth	r2, r3
 8002522:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002526:	b29c      	uxth	r4, r3
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252a:	9300      	str	r3, [sp, #0]
 800252c:	4623      	mov	r3, r4
 800252e:	f7ff fa03 	bl	8001938 <LCD_Rect_Fill>
		}
		if (cornername & 0x8) {
 8002532:	787b      	ldrb	r3, [r7, #1]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d025      	beq.n	8002588 <LCD_Circle_Helper+0x18a>
			LCD_Rect_Fill(x0 - y, y0 + x, size, size, color24);
 800253c:	88fa      	ldrh	r2, [r7, #6]
 800253e:	89fb      	ldrh	r3, [r7, #14]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	b298      	uxth	r0, r3
 8002544:	88ba      	ldrh	r2, [r7, #4]
 8002546:	8a3b      	ldrh	r3, [r7, #16]
 8002548:	4413      	add	r3, r2
 800254a:	b299      	uxth	r1, r3
 800254c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002550:	b29a      	uxth	r2, r3
 8002552:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002556:	b29c      	uxth	r4, r3
 8002558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	4623      	mov	r3, r4
 800255e:	f7ff f9eb 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 + y, size, size, color24);
 8002562:	88fa      	ldrh	r2, [r7, #6]
 8002564:	8a3b      	ldrh	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	b298      	uxth	r0, r3
 800256a:	88ba      	ldrh	r2, [r7, #4]
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	4413      	add	r3, r2
 8002570:	b299      	uxth	r1, r3
 8002572:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002576:	b29a      	uxth	r2, r3
 8002578:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800257c:	b29c      	uxth	r4, r3
 800257e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	4623      	mov	r3, r4
 8002584:	f7ff f9d8 	bl	8001938 <LCD_Rect_Fill>
		}
		if (cornername & 0x1) {
 8002588:	787b      	ldrb	r3, [r7, #1]
 800258a:	f003 0301 	and.w	r3, r3, #1
 800258e:	2b00      	cmp	r3, #0
 8002590:	d025      	beq.n	80025de <LCD_Circle_Helper+0x1e0>
			LCD_Rect_Fill(x0 - y, y0 - x, size, size, color24);
 8002592:	88fa      	ldrh	r2, [r7, #6]
 8002594:	89fb      	ldrh	r3, [r7, #14]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	b298      	uxth	r0, r3
 800259a:	88ba      	ldrh	r2, [r7, #4]
 800259c:	8a3b      	ldrh	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	b299      	uxth	r1, r3
 80025a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025ac:	b29c      	uxth	r4, r3
 80025ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	4623      	mov	r3, r4
 80025b4:	f7ff f9c0 	bl	8001938 <LCD_Rect_Fill>
			LCD_Rect_Fill(x0 - x, y0 - y, size, size, color24);
 80025b8:	88fa      	ldrh	r2, [r7, #6]
 80025ba:	8a3b      	ldrh	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	b298      	uxth	r0, r3
 80025c0:	88ba      	ldrh	r2, [r7, #4]
 80025c2:	89fb      	ldrh	r3, [r7, #14]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	b299      	uxth	r1, r3
 80025c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80025d2:	b29c      	uxth	r4, r3
 80025d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	4623      	mov	r3, r4
 80025da:	f7ff f9ad 	bl	8001938 <LCD_Rect_Fill>
	while (x < y) {
 80025de:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80025e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	f6ff af2b 	blt.w	8002442 <LCD_Circle_Helper+0x44>
		}
	}
}
 80025ec:	bf00      	nop
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}

080025f6 <LCD_Rect_Round>:

void LCD_Rect_Round(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint8_t size, uint32_t color24)
{
 80025f6:	b590      	push	{r4, r7, lr}
 80025f8:	b085      	sub	sp, #20
 80025fa:	af02      	add	r7, sp, #8
 80025fc:	4604      	mov	r4, r0
 80025fe:	4608      	mov	r0, r1
 8002600:	4611      	mov	r1, r2
 8002602:	461a      	mov	r2, r3
 8002604:	4623      	mov	r3, r4
 8002606:	80fb      	strh	r3, [r7, #6]
 8002608:	4603      	mov	r3, r0
 800260a:	80bb      	strh	r3, [r7, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	807b      	strh	r3, [r7, #2]
 8002610:	4613      	mov	r3, r2
 8002612:	803b      	strh	r3, [r7, #0]
	LCD_Line(x + (r + 2), y, x + length + size - (r + 2), y, size, color24);
 8002614:	8b3a      	ldrh	r2, [r7, #24]
 8002616:	88fb      	ldrh	r3, [r7, #6]
 8002618:	4413      	add	r3, r2
 800261a:	b29b      	uxth	r3, r3
 800261c:	3302      	adds	r3, #2
 800261e:	b298      	uxth	r0, r3
 8002620:	88fa      	ldrh	r2, [r7, #6]
 8002622:	887b      	ldrh	r3, [r7, #2]
 8002624:	4413      	add	r3, r2
 8002626:	b29a      	uxth	r2, r3
 8002628:	7f3b      	ldrb	r3, [r7, #28]
 800262a:	b29b      	uxth	r3, r3
 800262c:	4413      	add	r3, r2
 800262e:	b29a      	uxth	r2, r3
 8002630:	8b3b      	ldrh	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	b29b      	uxth	r3, r3
 8002636:	3b02      	subs	r3, #2
 8002638:	b29a      	uxth	r2, r3
 800263a:	88bc      	ldrh	r4, [r7, #4]
 800263c:	88b9      	ldrh	r1, [r7, #4]
 800263e:	6a3b      	ldr	r3, [r7, #32]
 8002640:	9301      	str	r3, [sp, #4]
 8002642:	7f3b      	ldrb	r3, [r7, #28]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	4623      	mov	r3, r4
 8002648:	f7ff f9b4 	bl	80019b4 <LCD_Line>
	LCD_Line(x + (r + 2), y + width - 1, x + length + size - (r + 2), y + width - 1, size, color24);
 800264c:	8b3a      	ldrh	r2, [r7, #24]
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	4413      	add	r3, r2
 8002652:	b29b      	uxth	r3, r3
 8002654:	3302      	adds	r3, #2
 8002656:	b298      	uxth	r0, r3
 8002658:	88ba      	ldrh	r2, [r7, #4]
 800265a:	883b      	ldrh	r3, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b299      	uxth	r1, r3
 8002664:	88fa      	ldrh	r2, [r7, #6]
 8002666:	887b      	ldrh	r3, [r7, #2]
 8002668:	4413      	add	r3, r2
 800266a:	b29a      	uxth	r2, r3
 800266c:	7f3b      	ldrb	r3, [r7, #28]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4413      	add	r3, r2
 8002672:	b29a      	uxth	r2, r3
 8002674:	8b3b      	ldrh	r3, [r7, #24]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b02      	subs	r3, #2
 800267c:	b29c      	uxth	r4, r3
 800267e:	88ba      	ldrh	r2, [r7, #4]
 8002680:	883b      	ldrh	r3, [r7, #0]
 8002682:	4413      	add	r3, r2
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	7f3b      	ldrb	r3, [r7, #28]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	4613      	mov	r3, r2
 8002694:	4622      	mov	r2, r4
 8002696:	f7ff f98d 	bl	80019b4 <LCD_Line>
	LCD_Line(x, y + (r + 2), x, y + width - size - (r + 2), size, color24);
 800269a:	8b3a      	ldrh	r2, [r7, #24]
 800269c:	88bb      	ldrh	r3, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	3302      	adds	r3, #2
 80026a4:	b299      	uxth	r1, r3
 80026a6:	88ba      	ldrh	r2, [r7, #4]
 80026a8:	883b      	ldrh	r3, [r7, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	7f3b      	ldrb	r3, [r7, #28]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	8b3b      	ldrh	r3, [r7, #24]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b02      	subs	r3, #2
 80026be:	b29c      	uxth	r4, r3
 80026c0:	88fa      	ldrh	r2, [r7, #6]
 80026c2:	88f8      	ldrh	r0, [r7, #6]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	9301      	str	r3, [sp, #4]
 80026c8:	7f3b      	ldrb	r3, [r7, #28]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	4623      	mov	r3, r4
 80026ce:	f7ff f971 	bl	80019b4 <LCD_Line>
	LCD_Line(x + length - 1, y + (r + 2), x + length - 1, y + width - size - (r + 2), size, color24);
 80026d2:	88fa      	ldrh	r2, [r7, #6]
 80026d4:	887b      	ldrh	r3, [r7, #2]
 80026d6:	4413      	add	r3, r2
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b298      	uxth	r0, r3
 80026de:	8b3a      	ldrh	r2, [r7, #24]
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	4413      	add	r3, r2
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3302      	adds	r3, #2
 80026e8:	b299      	uxth	r1, r3
 80026ea:	88fa      	ldrh	r2, [r7, #6]
 80026ec:	887b      	ldrh	r3, [r7, #2]
 80026ee:	4413      	add	r3, r2
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	3b01      	subs	r3, #1
 80026f4:	b29c      	uxth	r4, r3
 80026f6:	88ba      	ldrh	r2, [r7, #4]
 80026f8:	883b      	ldrh	r3, [r7, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	7f3b      	ldrb	r3, [r7, #28]
 8002700:	b29b      	uxth	r3, r3
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	b29a      	uxth	r2, r3
 8002706:	8b3b      	ldrh	r3, [r7, #24]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b02      	subs	r3, #2
 800270e:	b29a      	uxth	r2, r3
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	7f3b      	ldrb	r3, [r7, #28]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	4622      	mov	r2, r4
 800271c:	f7ff f94a 	bl	80019b4 <LCD_Line>

	LCD_Circle_Helper(x + (r + 2), y + (r + 2), (r + 2), 1, size, color24);
 8002720:	8b3a      	ldrh	r2, [r7, #24]
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	4413      	add	r3, r2
 8002726:	b29b      	uxth	r3, r3
 8002728:	3302      	adds	r3, #2
 800272a:	b29b      	uxth	r3, r3
 800272c:	b218      	sxth	r0, r3
 800272e:	8b3a      	ldrh	r2, [r7, #24]
 8002730:	88bb      	ldrh	r3, [r7, #4]
 8002732:	4413      	add	r3, r2
 8002734:	b29b      	uxth	r3, r3
 8002736:	3302      	adds	r3, #2
 8002738:	b29b      	uxth	r3, r3
 800273a:	b219      	sxth	r1, r3
 800273c:	8b3b      	ldrh	r3, [r7, #24]
 800273e:	3302      	adds	r3, #2
 8002740:	b29b      	uxth	r3, r3
 8002742:	b21a      	sxth	r2, r3
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	7f3b      	ldrb	r3, [r7, #28]
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2301      	movs	r3, #1
 800274e:	f7ff fe56 	bl	80023fe <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + (r + 2), (r + 2), 2, size, color24);
 8002752:	88fa      	ldrh	r2, [r7, #6]
 8002754:	887b      	ldrh	r3, [r7, #2]
 8002756:	4413      	add	r3, r2
 8002758:	b29a      	uxth	r2, r3
 800275a:	8b3b      	ldrh	r3, [r7, #24]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	b29b      	uxth	r3, r3
 8002760:	3b03      	subs	r3, #3
 8002762:	b29b      	uxth	r3, r3
 8002764:	b218      	sxth	r0, r3
 8002766:	8b3a      	ldrh	r2, [r7, #24]
 8002768:	88bb      	ldrh	r3, [r7, #4]
 800276a:	4413      	add	r3, r2
 800276c:	b29b      	uxth	r3, r3
 800276e:	3302      	adds	r3, #2
 8002770:	b29b      	uxth	r3, r3
 8002772:	b219      	sxth	r1, r3
 8002774:	8b3b      	ldrh	r3, [r7, #24]
 8002776:	3302      	adds	r3, #2
 8002778:	b29b      	uxth	r3, r3
 800277a:	b21a      	sxth	r2, r3
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	7f3b      	ldrb	r3, [r7, #28]
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2302      	movs	r3, #2
 8002786:	f7ff fe3a 	bl	80023fe <LCD_Circle_Helper>
	LCD_Circle_Helper(x + length - (r + 2) - 1, y + width - (r + 2) - 1, (r + 2), 4, size, color24);
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	4413      	add	r3, r2
 8002790:	b29a      	uxth	r2, r3
 8002792:	8b3b      	ldrh	r3, [r7, #24]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b03      	subs	r3, #3
 800279a:	b29b      	uxth	r3, r3
 800279c:	b218      	sxth	r0, r3
 800279e:	88ba      	ldrh	r2, [r7, #4]
 80027a0:	883b      	ldrh	r3, [r7, #0]
 80027a2:	4413      	add	r3, r2
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	8b3b      	ldrh	r3, [r7, #24]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b03      	subs	r3, #3
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	b219      	sxth	r1, r3
 80027b2:	8b3b      	ldrh	r3, [r7, #24]
 80027b4:	3302      	adds	r3, #2
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	b21a      	sxth	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	7f3b      	ldrb	r3, [r7, #28]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2304      	movs	r3, #4
 80027c4:	f7ff fe1b 	bl	80023fe <LCD_Circle_Helper>
	LCD_Circle_Helper(x + (r + 2), y + width - (r + 2) - 1, (r + 2), 8, size, color24);
 80027c8:	8b3a      	ldrh	r2, [r7, #24]
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	4413      	add	r3, r2
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	3302      	adds	r3, #2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b218      	sxth	r0, r3
 80027d6:	88ba      	ldrh	r2, [r7, #4]
 80027d8:	883b      	ldrh	r3, [r7, #0]
 80027da:	4413      	add	r3, r2
 80027dc:	b29a      	uxth	r2, r3
 80027de:	8b3b      	ldrh	r3, [r7, #24]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	3b03      	subs	r3, #3
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	b219      	sxth	r1, r3
 80027ea:	8b3b      	ldrh	r3, [r7, #24]
 80027ec:	3302      	adds	r3, #2
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	b21a      	sxth	r2, r3
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	7f3b      	ldrb	r3, [r7, #28]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2308      	movs	r3, #8
 80027fc:	f7ff fdff 	bl	80023fe <LCD_Circle_Helper>
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bd90      	pop	{r4, r7, pc}

08002808 <LCD_Circle_Fill_Helper>:

void LCD_Circle_Fill_Helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint32_t color24)
{
 8002808:	b590      	push	{r4, r7, lr}
 800280a:	b089      	sub	sp, #36	@ 0x24
 800280c:	af02      	add	r7, sp, #8
 800280e:	4604      	mov	r4, r0
 8002810:	4608      	mov	r0, r1
 8002812:	4611      	mov	r1, r2
 8002814:	461a      	mov	r2, r3
 8002816:	4623      	mov	r3, r4
 8002818:	80fb      	strh	r3, [r7, #6]
 800281a:	4603      	mov	r3, r0
 800281c:	80bb      	strh	r3, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	807b      	strh	r3, [r7, #2]
 8002822:	4613      	mov	r3, r2
 8002824:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	f1c3 0301 	rsb	r3, r3, #1
 800282c:	b29b      	uxth	r3, r3
 800282e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8002830:	2301      	movs	r3, #1
 8002832:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	461a      	mov	r2, r3
 8002838:	03d2      	lsls	r2, r2, #15
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 800284a:	e0ab      	b.n	80029a4 <LCD_Circle_Fill_Helper+0x19c>
		if (f >= 0) {
 800284c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0e      	blt.n	8002872 <LCD_Circle_Fill_Helper+0x6a>
			y--;
 8002854:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29b      	uxth	r3, r3
 800285e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8002860:	8a7b      	ldrh	r3, [r7, #18]
 8002862:	3302      	adds	r3, #2
 8002864:	b29b      	uxth	r3, r3
 8002866:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8002868:	8afa      	ldrh	r2, [r7, #22]
 800286a:	8a7b      	ldrh	r3, [r7, #18]
 800286c:	4413      	add	r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8002872:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002876:	b29b      	uxth	r3, r3
 8002878:	3301      	adds	r3, #1
 800287a:	b29b      	uxth	r3, r3
 800287c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800287e:	8abb      	ldrh	r3, [r7, #20]
 8002880:	3302      	adds	r3, #2
 8002882:	b29b      	uxth	r3, r3
 8002884:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8002886:	8afa      	ldrh	r2, [r7, #22]
 8002888:	8abb      	ldrh	r3, [r7, #20]
 800288a:	4413      	add	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d03f      	beq.n	800291a <LCD_Circle_Fill_Helper+0x112>
			LCD_Line(x0 + x, y0 - y, x0 + x, y0 - y + 2 * y + delta, 1, color24);
 800289a:	88fa      	ldrh	r2, [r7, #6]
 800289c:	8a3b      	ldrh	r3, [r7, #16]
 800289e:	4413      	add	r3, r2
 80028a0:	b298      	uxth	r0, r3
 80028a2:	88ba      	ldrh	r2, [r7, #4]
 80028a4:	89fb      	ldrh	r3, [r7, #14]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	b299      	uxth	r1, r3
 80028aa:	88fa      	ldrh	r2, [r7, #6]
 80028ac:	8a3b      	ldrh	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	b29c      	uxth	r4, r3
 80028b2:	88ba      	ldrh	r2, [r7, #4]
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	89fb      	ldrh	r3, [r7, #14]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	b29b      	uxth	r3, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80028c6:	4413      	add	r3, r2
 80028c8:	b29a      	uxth	r2, r3
 80028ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028cc:	9301      	str	r3, [sp, #4]
 80028ce:	2301      	movs	r3, #1
 80028d0:	9300      	str	r3, [sp, #0]
 80028d2:	4613      	mov	r3, r2
 80028d4:	4622      	mov	r2, r4
 80028d6:	f7ff f86d 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 + y, y0 - x, x0 + y, y0 - x + 2 * x + delta, 1, color24);
 80028da:	88fa      	ldrh	r2, [r7, #6]
 80028dc:	89fb      	ldrh	r3, [r7, #14]
 80028de:	4413      	add	r3, r2
 80028e0:	b298      	uxth	r0, r3
 80028e2:	88ba      	ldrh	r2, [r7, #4]
 80028e4:	8a3b      	ldrh	r3, [r7, #16]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	b299      	uxth	r1, r3
 80028ea:	88fa      	ldrh	r2, [r7, #6]
 80028ec:	89fb      	ldrh	r3, [r7, #14]
 80028ee:	4413      	add	r3, r2
 80028f0:	b29c      	uxth	r4, r3
 80028f2:	88ba      	ldrh	r2, [r7, #4]
 80028f4:	8a3b      	ldrh	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	8a3b      	ldrh	r3, [r7, #16]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	b29b      	uxth	r3, r3
 8002900:	4413      	add	r3, r2
 8002902:	b29a      	uxth	r2, r3
 8002904:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002906:	4413      	add	r3, r2
 8002908:	b29a      	uxth	r2, r3
 800290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	2301      	movs	r3, #1
 8002910:	9300      	str	r3, [sp, #0]
 8002912:	4613      	mov	r3, r2
 8002914:	4622      	mov	r2, r4
 8002916:	f7ff f84d 	bl	80019b4 <LCD_Line>
		}
		if (cornername & 0x2) {
 800291a:	787b      	ldrb	r3, [r7, #1]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03f      	beq.n	80029a4 <LCD_Circle_Fill_Helper+0x19c>
			LCD_Line(x0 - x, y0 - y, x0 - x, y0 - y + 2 * y + delta, 1, color24);
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	8a3b      	ldrh	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	b298      	uxth	r0, r3
 800292c:	88ba      	ldrh	r2, [r7, #4]
 800292e:	89fb      	ldrh	r3, [r7, #14]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	b299      	uxth	r1, r3
 8002934:	88fa      	ldrh	r2, [r7, #6]
 8002936:	8a3b      	ldrh	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b29c      	uxth	r4, r3
 800293c:	88ba      	ldrh	r2, [r7, #4]
 800293e:	89fb      	ldrh	r3, [r7, #14]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	b29a      	uxth	r2, r3
 8002944:	89fb      	ldrh	r3, [r7, #14]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	b29b      	uxth	r3, r3
 800294a:	4413      	add	r3, r2
 800294c:	b29a      	uxth	r2, r3
 800294e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002950:	4413      	add	r3, r2
 8002952:	b29a      	uxth	r2, r3
 8002954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	2301      	movs	r3, #1
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	4613      	mov	r3, r2
 800295e:	4622      	mov	r2, r4
 8002960:	f7ff f828 	bl	80019b4 <LCD_Line>
			LCD_Line(x0 - y, y0 - x, x0 - y, y0 - x + 2 * x + delta, 1, color24);
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	89fb      	ldrh	r3, [r7, #14]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	b298      	uxth	r0, r3
 800296c:	88ba      	ldrh	r2, [r7, #4]
 800296e:	8a3b      	ldrh	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	b299      	uxth	r1, r3
 8002974:	88fa      	ldrh	r2, [r7, #6]
 8002976:	89fb      	ldrh	r3, [r7, #14]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	b29c      	uxth	r4, r3
 800297c:	88ba      	ldrh	r2, [r7, #4]
 800297e:	8a3b      	ldrh	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	b29a      	uxth	r2, r3
 8002984:	8a3b      	ldrh	r3, [r7, #16]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	b29b      	uxth	r3, r3
 800298a:	4413      	add	r3, r2
 800298c:	b29a      	uxth	r2, r3
 800298e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002990:	4413      	add	r3, r2
 8002992:	b29a      	uxth	r2, r3
 8002994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	2301      	movs	r3, #1
 800299a:	9300      	str	r3, [sp, #0]
 800299c:	4613      	mov	r3, r2
 800299e:	4622      	mov	r2, r4
 80029a0:	f7ff f808 	bl	80019b4 <LCD_Line>
	while (x < y) {
 80029a4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80029a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	f6ff af4d 	blt.w	800284c <LCD_Circle_Fill_Helper+0x44>
		}
	}
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd90      	pop	{r4, r7, pc}

080029bc <LCD_Rect_Round_Fill>:

void LCD_Rect_Round_Fill(uint16_t x, uint16_t y, uint16_t length, uint16_t width, uint16_t r, uint32_t color24)
{
 80029bc:	b590      	push	{r4, r7, lr}
 80029be:	b085      	sub	sp, #20
 80029c0:	af02      	add	r7, sp, #8
 80029c2:	4604      	mov	r4, r0
 80029c4:	4608      	mov	r0, r1
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	80fb      	strh	r3, [r7, #6]
 80029ce:	4603      	mov	r3, r0
 80029d0:	80bb      	strh	r3, [r7, #4]
 80029d2:	460b      	mov	r3, r1
 80029d4:	807b      	strh	r3, [r7, #2]
 80029d6:	4613      	mov	r3, r2
 80029d8:	803b      	strh	r3, [r7, #0]
	LCD_Rect_Fill(x + r, y, length - 2 * r, width, color24);
 80029da:	88fa      	ldrh	r2, [r7, #6]
 80029dc:	8b3b      	ldrh	r3, [r7, #24]
 80029de:	4413      	add	r3, r2
 80029e0:	b298      	uxth	r0, r3
 80029e2:	8b3b      	ldrh	r3, [r7, #24]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	887a      	ldrh	r2, [r7, #2]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	883c      	ldrh	r4, [r7, #0]
 80029f0:	88b9      	ldrh	r1, [r7, #4]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	4623      	mov	r3, r4
 80029f8:	f7fe ff9e 	bl	8001938 <LCD_Rect_Fill>
	LCD_Circle_Fill_Helper(x + length - r - 1, y + r, r, 1, width - 2 * r - 1, color24);
 80029fc:	88fa      	ldrh	r2, [r7, #6]
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	4413      	add	r3, r2
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	8b3b      	ldrh	r3, [r7, #24]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	b218      	sxth	r0, r3
 8002a10:	88ba      	ldrh	r2, [r7, #4]
 8002a12:	8b3b      	ldrh	r3, [r7, #24]
 8002a14:	4413      	add	r3, r2
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	b219      	sxth	r1, r3
 8002a1a:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002a1e:	8b3b      	ldrh	r3, [r7, #24]
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	883a      	ldrh	r2, [r7, #0]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29b      	uxth	r3, r3
 8002a2e:	b21b      	sxth	r3, r3
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	9201      	str	r2, [sp, #4]
 8002a34:	9300      	str	r3, [sp, #0]
 8002a36:	2301      	movs	r3, #1
 8002a38:	4622      	mov	r2, r4
 8002a3a:	f7ff fee5 	bl	8002808 <LCD_Circle_Fill_Helper>
	LCD_Circle_Fill_Helper(x + r, y + r, r, 2, width - 2 * r - 1, color24);
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	8b3b      	ldrh	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b218      	sxth	r0, r3
 8002a48:	88ba      	ldrh	r2, [r7, #4]
 8002a4a:	8b3b      	ldrh	r3, [r7, #24]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	b219      	sxth	r1, r3
 8002a52:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8002a56:	8b3b      	ldrh	r3, [r7, #24]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	883a      	ldrh	r2, [r7, #0]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	b21b      	sxth	r3, r3
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	9201      	str	r2, [sp, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2302      	movs	r3, #2
 8002a70:	4622      	mov	r2, r4
 8002a72:	f7ff fec9 	bl	8002808 <LCD_Circle_Fill_Helper>
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}

08002a7e <LCD_Char>:

static void LCD_Char(int16_t x, int16_t y, const GFXglyph *glyph, const GFXfont *font, uint8_t size, uint32_t color24)
{
 8002a7e:	b590      	push	{r4, r7, lr}
 8002a80:	b08b      	sub	sp, #44	@ 0x2c
 8002a82:	af02      	add	r7, sp, #8
 8002a84:	60ba      	str	r2, [r7, #8]
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	4603      	mov	r3, r0
 8002a8a:	81fb      	strh	r3, [r7, #14]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	81bb      	strh	r3, [r7, #12]
	uint8_t  *bitmap = font -> bitmap;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	617b      	str	r3, [r7, #20]
	uint16_t bo = glyph -> bitmapOffset;
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	881b      	ldrh	r3, [r3, #0]
 8002a9a:	83fb      	strh	r3, [r7, #30]
	uint8_t bits = 0, bit = 0;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	777b      	strb	r3, [r7, #29]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	773b      	strb	r3, [r7, #28]
	uint16_t set_pixels = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	837b      	strh	r3, [r7, #26]
	uint8_t  cur_x, cur_y;
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	763b      	strb	r3, [r7, #24]
 8002aac:	e093      	b.n	8002bd6 <LCD_Char+0x158>
	{
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002aae:	2300      	movs	r3, #0
 8002ab0:	767b      	strb	r3, [r7, #25]
 8002ab2:	e052      	b.n	8002b5a <LCD_Char+0xdc>
		{
			if(bit == 0)
 8002ab4:	7f3b      	ldrb	r3, [r7, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <LCD_Char+0x50>
			{
				bits = (*(const unsigned char *)(&bitmap[bo++]));
 8002aba:	8bfb      	ldrh	r3, [r7, #30]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	83fa      	strh	r2, [r7, #30]
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	777b      	strb	r3, [r7, #29]
				bit  = 0x80;
 8002aca:	2380      	movs	r3, #128	@ 0x80
 8002acc:	773b      	strb	r3, [r7, #28]
			}
			if(bits & bit)
 8002ace:	7f7a      	ldrb	r2, [r7, #29]
 8002ad0:	7f3b      	ldrb	r3, [r7, #28]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d003      	beq.n	8002ae2 <LCD_Char+0x64>
			{
				set_pixels++;
 8002ada:	8b7b      	ldrh	r3, [r7, #26]
 8002adc:	3301      	adds	r3, #1
 8002ade:	837b      	strh	r3, [r7, #26]
 8002ae0:	e035      	b.n	8002b4e <LCD_Char+0xd0>
			}
			else if (set_pixels > 0)
 8002ae2:	8b7b      	ldrh	r3, [r7, #26]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d032      	beq.n	8002b4e <LCD_Char+0xd0>
			{
				LCD_Rect_Fill(x + (glyph -> xOffset + cur_x - set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002aee:	461a      	mov	r2, r3
 8002af0:	7e7b      	ldrb	r3, [r7, #25]
 8002af2:	441a      	add	r2, r3
 8002af4:	8b7b      	ldrh	r3, [r7, #26]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002afe:	b292      	uxth	r2, r2
 8002b00:	fb02 f303 	mul.w	r3, r2, r3
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	4413      	add	r3, r2
 8002b0a:	b298      	uxth	r0, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002b12:	461a      	mov	r2, r3
 8002b14:	7e3b      	ldrb	r3, [r7, #24]
 8002b16:	4413      	add	r3, r2
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002b1e:	b292      	uxth	r2, r2
 8002b20:	fb02 f303 	mul.w	r3, r2, r3
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	89bb      	ldrh	r3, [r7, #12]
 8002b28:	4413      	add	r3, r2
 8002b2a:	b299      	uxth	r1, r3
 8002b2c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	8b7a      	ldrh	r2, [r7, #26]
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002b3e:	b29c      	uxth	r4, r3
 8002b40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	4623      	mov	r3, r4
 8002b46:	f7fe fef7 	bl	8001938 <LCD_Rect_Fill>
				set_pixels = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	837b      	strh	r3, [r7, #26]
			}
			bit >>= 1;
 8002b4e:	7f3b      	ldrb	r3, [r7, #28]
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	773b      	strb	r3, [r7, #28]
		for(cur_x = 0; cur_x < glyph -> width; cur_x++)
 8002b54:	7e7b      	ldrb	r3, [r7, #25]
 8002b56:	3301      	adds	r3, #1
 8002b58:	767b      	strb	r3, [r7, #25]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	789b      	ldrb	r3, [r3, #2]
 8002b5e:	7e7a      	ldrb	r2, [r7, #25]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d3a7      	bcc.n	8002ab4 <LCD_Char+0x36>
		}
		if (set_pixels > 0)
 8002b64:	8b7b      	ldrh	r3, [r7, #26]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d032      	beq.n	8002bd0 <LCD_Char+0x152>
		{
			LCD_Rect_Fill(x + (glyph -> xOffset + cur_x-set_pixels) * size, y + (glyph -> yOffset + cur_y) * size, size * set_pixels, size, color24);
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002b70:	461a      	mov	r2, r3
 8002b72:	7e7b      	ldrb	r3, [r7, #25]
 8002b74:	441a      	add	r2, r3
 8002b76:	8b7b      	ldrh	r3, [r7, #26]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002b80:	b292      	uxth	r2, r2
 8002b82:	fb02 f303 	mul.w	r3, r2, r3
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	89fb      	ldrh	r3, [r7, #14]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	b298      	uxth	r0, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8002b94:	461a      	mov	r2, r3
 8002b96:	7e3b      	ldrb	r3, [r7, #24]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002ba0:	b292      	uxth	r2, r2
 8002ba2:	fb02 f303 	mul.w	r3, r2, r3
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	89bb      	ldrh	r3, [r7, #12]
 8002baa:	4413      	add	r3, r2
 8002bac:	b299      	uxth	r1, r3
 8002bae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	8b7a      	ldrh	r2, [r7, #26]
 8002bb6:	fb02 f303 	mul.w	r3, r2, r3
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002bc0:	b29c      	uxth	r4, r3
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	4623      	mov	r3, r4
 8002bc8:	f7fe feb6 	bl	8001938 <LCD_Rect_Fill>
			set_pixels = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	837b      	strh	r3, [r7, #26]
	for(cur_y = 0; cur_y < glyph -> height; cur_y++)
 8002bd0:	7e3b      	ldrb	r3, [r7, #24]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	763b      	strb	r3, [r7, #24]
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	78db      	ldrb	r3, [r3, #3]
 8002bda:	7e3a      	ldrb	r2, [r7, #24]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	f4ff af66 	bcc.w	8002aae <LCD_Char+0x30>
		}
	}
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	3724      	adds	r7, #36	@ 0x24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd90      	pop	{r4, r7, pc}

08002bec <LCD_Font>:

void LCD_Font(uint16_t x, uint16_t y, const char *text, const GFXfont *p_font, uint8_t size, uint32_t color24)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b08f      	sub	sp, #60	@ 0x3c
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60ba      	str	r2, [r7, #8]
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	81fb      	strh	r3, [r7, #14]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	81bb      	strh	r3, [r7, #12]
	int16_t cursor_x = x;
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	int16_t cursor_y = y;
 8002c02:	89bb      	ldrh	r3, [r7, #12]
 8002c04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	GFXfont font;
	memcpy((&font), (p_font), (sizeof(GFXfont)));
 8002c06:	f107 031c 	add.w	r3, r7, #28
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 fd54 	bl	80036bc <memcpy>
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002c18:	e056      	b.n	8002cc8 <LCD_Font+0xdc>
	{
		char c = text[text_pos];
 8002c1a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
		if(c == '\n')
 8002c26:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c2a:	2b0a      	cmp	r3, #10
 8002c2c:	d10f      	bne.n	8002c4e <LCD_Font+0x62>
		{
			cursor_x = x;
 8002c2e:	89fb      	ldrh	r3, [r7, #14]
 8002c30:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			cursor_y += font.yAdvance * size;
 8002c32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002c36:	461a      	mov	r2, r3
 8002c38:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	fb02 f303 	mul.w	r3, r2, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002c46:	4413      	add	r3, r2
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002c4c:	e039      	b.n	8002cc2 <LCD_Font+0xd6>
		}
		else if(c >= font.first && c <= font.last && c != '\r')
 8002c4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c52:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d333      	bcc.n	8002cc2 <LCD_Font+0xd6>
 8002c5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c5e:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d82d      	bhi.n	8002cc2 <LCD_Font+0xd6>
 8002c66:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c6a:	2b0d      	cmp	r3, #13
 8002c6c:	d029      	beq.n	8002cc2 <LCD_Font+0xd6>
		{
			GFXglyph glyph;
			memcpy((&glyph), (&font.glyph[c - font.first]), (sizeof(GFXglyph)));
 8002c6e:	6a3a      	ldr	r2, [r7, #32]
 8002c70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c74:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8002c78:	1a5b      	subs	r3, r3, r1
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	18d1      	adds	r1, r2, r3
 8002c7e:	f107 0314 	add.w	r3, r7, #20
 8002c82:	2208      	movs	r2, #8
 8002c84:	4618      	mov	r0, r3
 8002c86:	f000 fd19 	bl	80036bc <memcpy>
			LCD_Char(cursor_x, cursor_y, &glyph, &font, size, color24);
 8002c8a:	f107 041c 	add.w	r4, r7, #28
 8002c8e:	f107 0214 	add.w	r2, r7, #20
 8002c92:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 8002c96:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 8002c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	4623      	mov	r3, r4
 8002ca6:	f7ff feea 	bl	8002a7e <LCD_Char>
			cursor_x += glyph.xAdvance * size;
 8002caa:	7e3b      	ldrb	r3, [r7, #24]
 8002cac:	461a      	mov	r2, r3
 8002cae:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	fb02 f303 	mul.w	r3, r2, r3
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002cbc:	4413      	add	r3, r2
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	for(uint16_t text_pos = 0; text_pos < strlen(text); text_pos++)
 8002cc2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002cc8:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8002cca:	68b8      	ldr	r0, [r7, #8]
 8002ccc:	f7fd fa3e 	bl	800014c <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	429c      	cmp	r4, r3
 8002cd4:	d3a1      	bcc.n	8002c1a <LCD_Font+0x2e>
		}
	}
}
 8002cd6:	bf00      	nop
 8002cd8:	bf00      	nop
 8002cda:	3734      	adds	r7, #52	@ 0x34
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd90      	pop	{r4, r7, pc}

08002ce0 <LCD_Init>:

void LCD_Init(void)
{	
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
	LCD_RST_S
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <LCD_Init+0x3c>)
 8002cea:	f7fd fd25 	bl	8000738 <HAL_GPIO_WritePin>
	
  LCD_Send_Cmd(HX8357_SLPOUT);
 8002cee:	2011      	movs	r0, #17
 8002cf0:	f7fe fd6a 	bl	80017c8 <LCD_Send_Cmd>
  HAL_Delay(120);
 8002cf4:	2078      	movs	r0, #120	@ 0x78
 8002cf6:	f7fd fa93 	bl	8000220 <HAL_Delay>
	LCD_Send_Cmd(HX8357_COLMOD);
 8002cfa:	203a      	movs	r0, #58	@ 0x3a
 8002cfc:	f7fe fd64 	bl	80017c8 <LCD_Send_Cmd>
	LCD_Send_Dat(0x55);
 8002d00:	2055      	movs	r0, #85	@ 0x55
 8002d02:	f7fe fd8d 	bl	8001820 <LCD_Send_Dat>
  HAL_Delay(5);
 8002d06:	2005      	movs	r0, #5
 8002d08:	f7fd fa8a 	bl	8000220 <HAL_Delay>
  LCD_Send_Cmd(HX8357_DISPON);
 8002d0c:	2029      	movs	r0, #41	@ 0x29
 8002d0e:	f7fe fd5b 	bl	80017c8 <LCD_Send_Cmd>
	
	LCD_Orientation(DEFAULT_ORIENTATION);
 8002d12:	2002      	movs	r0, #2
 8002d14:	f000 f804 	bl	8002d20 <LCD_Orientation>
//	if (DEFAULT_ORIENTATION == 1 || DEFAULT_ORIENTATION == 3) 
//	LCD_Rect_Fill(0, 0, 320, 480, BLACK);
//	else LCD_Rect_Fill(0, 0, 480, 320, BLACK);
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40010c00 	.word	0x40010c00

08002d20 <LCD_Orientation>:

void LCD_Orientation(uint8_t orientation)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	4603      	mov	r3, r0
 8002d28:	71fb      	strb	r3, [r7, #7]
	LCD_Send_Cmd(HX8357_MADCTL);
 8002d2a:	2036      	movs	r0, #54	@ 0x36
 8002d2c:	f7fe fd4c 	bl	80017c8 <LCD_Send_Cmd>
	switch (orientation)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d81a      	bhi.n	8002d6c <LCD_Orientation+0x4c>
 8002d36:	a201      	add	r2, pc, #4	@ (adr r2, 8002d3c <LCD_Orientation+0x1c>)
 8002d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3c:	08002d4d 	.word	0x08002d4d
 8002d40:	08002d55 	.word	0x08002d55
 8002d44:	08002d5d 	.word	0x08002d5d
 8002d48:	08002d65 	.word	0x08002d65
	{
	case 0:
	if (BGR) LCD_Send_Dat(MADCTL_BGR);
 8002d4c:	2008      	movs	r0, #8
 8002d4e:	f7fe fd67 	bl	8001820 <LCD_Send_Dat>
	else LCD_Send_Dat(MADCTL_RGB);
	break;
 8002d52:	e00b      	b.n	8002d6c <LCD_Orientation+0x4c>
	
	case 1:
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MY | MADCTL_MV);
 8002d54:	20a8      	movs	r0, #168	@ 0xa8
 8002d56:	f7fe fd63 	bl	8001820 <LCD_Send_Dat>
	else LCD_Send_Dat(MADCTL_RGB | MADCTL_MY | MADCTL_MV);
	break;
 8002d5a:	e007      	b.n	8002d6c <LCD_Orientation+0x4c>
	
	case 2:
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MY | MADCTL_MX);
 8002d5c:	20c8      	movs	r0, #200	@ 0xc8
 8002d5e:	f7fe fd5f 	bl	8001820 <LCD_Send_Dat>
	else LCD_Send_Dat(MADCTL_RGB | MADCTL_MY | MADCTL_MX);
	break;
 8002d62:	e003      	b.n	8002d6c <LCD_Orientation+0x4c>
	
	case 3:
	if (BGR) LCD_Send_Dat(MADCTL_BGR | MADCTL_MV | MADCTL_MX);
 8002d64:	2068      	movs	r0, #104	@ 0x68
 8002d66:	f7fe fd5b 	bl	8001820 <LCD_Send_Dat>
	else LCD_Send_Dat(MADCTL_RGB | MADCTL_MV | MADCTL_MX);
	break;
 8002d6a:	bf00      	nop
	}
}
 8002d6c:	bf00      	nop
 8002d6e:	3708      	adds	r7, #8
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d7a:	f7fd f9ef 	bl	800015c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d7e:	f000 f967 	bl	8003050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d82:	f000 fa39 	bl	80031f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002d86:	f000 f9a9 	bl	80030dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002d8a:	f000 fa0b 	bl	80031a4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8002d8e:	f000 f9d3 	bl	8003138 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	
	LCD_Init();
 8002d92:	f7ff ffa5 	bl	8002ce0 <LCD_Init>

	LCD_Rect_Fill(0, 0, 480, 320, BLUE);
 8002d96:	23ff      	movs	r3, #255	@ 0xff
 8002d98:	9300      	str	r3, [sp, #0]
 8002d9a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002d9e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002da2:	2100      	movs	r1, #0
 8002da4:	2000      	movs	r0, #0
 8002da6:	f7fe fdc7 	bl	8001938 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 478, 318, BLACK);
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	f44f 739f 	mov.w	r3, #318	@ 0x13e
 8002db2:	f44f 72ef 	mov.w	r2, #478	@ 0x1de
 8002db6:	2101      	movs	r1, #1
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7fe fdbd 	bl	8001938 <LCD_Rect_Fill>
	
//	HAL_Delay(250);
	LCD_Rect_Fill(0, 0, 160, 128, BLACK);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	2380      	movs	r3, #128	@ 0x80
 8002dc4:	22a0      	movs	r2, #160	@ 0xa0
 8002dc6:	2100      	movs	r1, #0
 8002dc8:	2000      	movs	r0, #0
 8002dca:	f7fe fdb5 	bl	8001938 <LCD_Rect_Fill>
	for(uint8_t x = 8; x <= 160; x += 8)
 8002dce:	2308      	movs	r3, #8
 8002dd0:	71fb      	strb	r3, [r7, #7]
 8002dd2:	e00e      	b.n	8002df2 <main+0x7e>
	{
		LCD_Line(0, 0, x, 128, 1, GREEN);
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002ddc:	9301      	str	r3, [sp, #4]
 8002dde:	2301      	movs	r3, #1
 8002de0:	9300      	str	r3, [sp, #0]
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	2100      	movs	r1, #0
 8002de6:	2000      	movs	r0, #0
 8002de8:	f7fe fde4 	bl	80019b4 <LCD_Line>
	for(uint8_t x = 8; x <= 160; x += 8)
 8002dec:	79fb      	ldrb	r3, [r7, #7]
 8002dee:	3308      	adds	r3, #8
 8002df0:	71fb      	strb	r3, [r7, #7]
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002df6:	d9ed      	bls.n	8002dd4 <main+0x60>
	}
	for(uint8_t y = 8; y <= 128; y += 8) {
 8002df8:	2308      	movs	r3, #8
 8002dfa:	71bb      	strb	r3, [r7, #6]
 8002dfc:	e00e      	b.n	8002e1c <main+0xa8>
		LCD_Line(0, 0, 160, y, 1, GREEN);
 8002dfe:	79bb      	ldrb	r3, [r7, #6]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8002e06:	9201      	str	r2, [sp, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	22a0      	movs	r2, #160	@ 0xa0
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2000      	movs	r0, #0
 8002e12:	f7fe fdcf 	bl	80019b4 <LCD_Line>
	for(uint8_t y = 8; y <= 128; y += 8) {
 8002e16:	79bb      	ldrb	r3, [r7, #6]
 8002e18:	3308      	adds	r3, #8
 8002e1a:	71bb      	strb	r3, [r7, #6]
 8002e1c:	79bb      	ldrb	r3, [r7, #6]
 8002e1e:	2b80      	cmp	r3, #128	@ 0x80
 8002e20:	d9ed      	bls.n	8002dfe <main+0x8a>
	}
	HAL_Delay(250);
 8002e22:	20fa      	movs	r0, #250	@ 0xfa
 8002e24:	f7fd f9fc 	bl	8000220 <HAL_Delay>

	uint8_t h = 16;
 8002e28:	2310      	movs	r3, #16
 8002e2a:	717b      	strb	r3, [r7, #5]
	uint8_t w = 20;
 8002e2c:	2314      	movs	r3, #20
 8002e2e:	713b      	strb	r3, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8002e30:	2300      	movs	r3, #0
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	e01e      	b.n	8002e74 <main+0x100>
	{
		LCD_Rect(80 - w / 2, 64 - h / 2, w, h, 2, YELLOW);
 8002e36:	793b      	ldrb	r3, [r7, #4]
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f1c3 0350 	rsb	r3, r3, #80	@ 0x50
 8002e40:	b298      	uxth	r0, r3
 8002e42:	797b      	ldrb	r3, [r7, #5]
 8002e44:	085b      	lsrs	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	793b      	ldrb	r3, [r7, #4]
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	797b      	ldrb	r3, [r7, #5]
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	4c73      	ldr	r4, [pc, #460]	@ (8003024 <main+0x2b0>)
 8002e58:	9401      	str	r4, [sp, #4]
 8002e5a:	2402      	movs	r4, #2
 8002e5c:	9400      	str	r4, [sp, #0]
 8002e5e:	f7fe ff11 	bl	8001c84 <LCD_Rect>
		h += 16;
 8002e62:	797b      	ldrb	r3, [r7, #5]
 8002e64:	3310      	adds	r3, #16
 8002e66:	717b      	strb	r3, [r7, #5]
		w += 20;
 8002e68:	793b      	ldrb	r3, [r7, #4]
 8002e6a:	3314      	adds	r3, #20
 8002e6c:	713b      	strb	r3, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	3301      	adds	r3, #1
 8002e72:	70fb      	strb	r3, [r7, #3]
 8002e74:	78fb      	ldrb	r3, [r7, #3]
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d9dd      	bls.n	8002e36 <main+0xc2>
	}
	HAL_Delay(250);
 8002e7a:	20fa      	movs	r0, #250	@ 0xfa
 8002e7c:	f7fd f9d0 	bl	8000220 <HAL_Delay>
	LCD_Rect_Fill(0, 0, 160, 128, BLUE);
 8002e80:	23ff      	movs	r3, #255	@ 0xff
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	2380      	movs	r3, #128	@ 0x80
 8002e86:	22a0      	movs	r2, #160	@ 0xa0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	f7fe fd54 	bl	8001938 <LCD_Rect_Fill>
	LCD_Rect_Fill(1, 1, 158, 126, BLACK);
 8002e90:	2300      	movs	r3, #0
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	237e      	movs	r3, #126	@ 0x7e
 8002e96:	229e      	movs	r2, #158	@ 0x9e
 8002e98:	2101      	movs	r1, #1
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	f7fe fd4c 	bl	8001938 <LCD_Rect_Fill>
	LCD_Font(5, 40, "This is\n just a Test\n TomThumb Ext\n", _3_TomThumb_Extended, 1, YELLOW);
 8002ea0:	4b60      	ldr	r3, [pc, #384]	@ (8003024 <main+0x2b0>)
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	4b5f      	ldr	r3, [pc, #380]	@ (8003028 <main+0x2b4>)
 8002eaa:	4a60      	ldr	r2, [pc, #384]	@ (800302c <main+0x2b8>)
 8002eac:	2128      	movs	r1, #40	@ 0x28
 8002eae:	2005      	movs	r0, #5
 8002eb0:	f7ff fe9c 	bl	8002bec <LCD_Font>
	LCD_Line(23, 20, 137, 20, 1, MAGENTA);
 8002eb4:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2301      	movs	r3, #1
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2314      	movs	r3, #20
 8002ec0:	2289      	movs	r2, #137	@ 0x89
 8002ec2:	2114      	movs	r1, #20
 8002ec4:	2017      	movs	r0, #23
 8002ec6:	f7fe fd75 	bl	80019b4 <LCD_Line>
	LCD_Line(23, 21, 137, 21, 1, BLUE);
 8002eca:	23ff      	movs	r3, #255	@ 0xff
 8002ecc:	9301      	str	r3, [sp, #4]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	2315      	movs	r3, #21
 8002ed4:	2289      	movs	r2, #137	@ 0x89
 8002ed6:	2115      	movs	r1, #21
 8002ed8:	2017      	movs	r0, #23
 8002eda:	f7fe fd6b 	bl	80019b4 <LCD_Line>
	LCD_Line(23, 21, 137, 21, 1, BLUE);
 8002ede:	23ff      	movs	r3, #255	@ 0xff
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2315      	movs	r3, #21
 8002ee8:	2289      	movs	r2, #137	@ 0x89
 8002eea:	2115      	movs	r1, #21
 8002eec:	2017      	movs	r0, #23
 8002eee:	f7fe fd61 	bl	80019b4 <LCD_Line>
	LCD_Font(41, 10, "DISPLAY DRIVER", _5_Org, 1, MAGENTA);
 8002ef2:	f04f 13ff 	mov.w	r3, #16711935	@ 0xff00ff
 8002ef6:	9301      	str	r3, [sp, #4]
 8002ef8:	2301      	movs	r3, #1
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	4b4c      	ldr	r3, [pc, #304]	@ (8003030 <main+0x2bc>)
 8002efe:	4a4d      	ldr	r2, [pc, #308]	@ (8003034 <main+0x2c0>)
 8002f00:	210a      	movs	r1, #10
 8002f02:	2029      	movs	r0, #41	@ 0x29
 8002f04:	f7ff fe72 	bl	8002bec <LCD_Font>
	LCD_Font(45, 35, "SERIF BOLD", _9_Serif_Bold, 1, RED);
 8002f08:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002f0c:	9301      	str	r3, [sp, #4]
 8002f0e:	2301      	movs	r3, #1
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <main+0x2c4>)
 8002f14:	4a49      	ldr	r2, [pc, #292]	@ (800303c <main+0x2c8>)
 8002f16:	2123      	movs	r1, #35	@ 0x23
 8002f18:	202d      	movs	r0, #45	@ 0x2d
 8002f1a:	f7ff fe67 	bl	8002bec <LCD_Font>
	LCD_Circle(40, 90, 30, 0, 1, RED);
 8002f1e:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002f22:	9301      	str	r3, [sp, #4]
 8002f24:	2301      	movs	r3, #1
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2300      	movs	r3, #0
 8002f2a:	221e      	movs	r2, #30
 8002f2c:	215a      	movs	r1, #90	@ 0x5a
 8002f2e:	2028      	movs	r0, #40	@ 0x28
 8002f30:	f7ff f946 	bl	80021c0 <LCD_Circle>
	LCD_Circle(45, 90, 20, 1, 1, BLUE);
 8002f34:	23ff      	movs	r3, #255	@ 0xff
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	2301      	movs	r3, #1
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	2214      	movs	r2, #20
 8002f40:	215a      	movs	r1, #90	@ 0x5a
 8002f42:	202d      	movs	r0, #45	@ 0x2d
 8002f44:	f7ff f93c 	bl	80021c0 <LCD_Circle>
	LCD_Triangle_Fill(5, 5, 5, 20, 25, 25, BLUE);
 8002f48:	23ff      	movs	r3, #255	@ 0xff
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	9301      	str	r3, [sp, #4]
 8002f50:	2319      	movs	r3, #25
 8002f52:	9300      	str	r3, [sp, #0]
 8002f54:	2314      	movs	r3, #20
 8002f56:	2205      	movs	r2, #5
 8002f58:	2105      	movs	r1, #5
 8002f5a:	2005      	movs	r0, #5
 8002f5c:	f7fe fdcf 	bl	8001afe <LCD_Triangle_Fill>
	LCD_Triangle(5, 5, 5, 20, 25, 25, 1, RED);
 8002f60:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002f64:	9303      	str	r3, [sp, #12]
 8002f66:	2301      	movs	r3, #1
 8002f68:	9302      	str	r3, [sp, #8]
 8002f6a:	2319      	movs	r3, #25
 8002f6c:	9301      	str	r3, [sp, #4]
 8002f6e:	2319      	movs	r3, #25
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	2314      	movs	r3, #20
 8002f74:	2205      	movs	r2, #5
 8002f76:	2105      	movs	r1, #5
 8002f78:	2005      	movs	r0, #5
 8002f7a:	f7fe fd89 	bl	8001a90 <LCD_Triangle>
	LCD_Rect(60, 45, 30, 20, 2, GREEN);
 8002f7e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2314      	movs	r3, #20
 8002f8a:	221e      	movs	r2, #30
 8002f8c:	212d      	movs	r1, #45	@ 0x2d
 8002f8e:	203c      	movs	r0, #60	@ 0x3c
 8002f90:	f7fe fe78 	bl	8001c84 <LCD_Rect>
	LCD_Rect_Round(80, 70, 60, 25, 10, 3, WHITE);
 8002f94:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8002f98:	9302      	str	r3, [sp, #8]
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	9301      	str	r3, [sp, #4]
 8002f9e:	230a      	movs	r3, #10
 8002fa0:	9300      	str	r3, [sp, #0]
 8002fa2:	2319      	movs	r3, #25
 8002fa4:	223c      	movs	r2, #60	@ 0x3c
 8002fa6:	2146      	movs	r1, #70	@ 0x46
 8002fa8:	2050      	movs	r0, #80	@ 0x50
 8002faa:	f7ff fb24 	bl	80025f6 <LCD_Rect_Round>
	LCD_Rect_Round_Fill(80, 100, 60, 25, 10, WHITE);
 8002fae:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8002fb2:	9301      	str	r3, [sp, #4]
 8002fb4:	230a      	movs	r3, #10
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2319      	movs	r3, #25
 8002fba:	223c      	movs	r2, #60	@ 0x3c
 8002fbc:	2164      	movs	r1, #100	@ 0x64
 8002fbe:	2050      	movs	r0, #80	@ 0x50
 8002fc0:	f7ff fcfc 	bl	80029bc <LCD_Rect_Round_Fill>
	LCD_Ellipse(60, 100, 30, 20, 0, 2, YELLOW);
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <main+0x2b0>)
 8002fc6:	9302      	str	r3, [sp, #8]
 8002fc8:	2302      	movs	r3, #2
 8002fca:	9301      	str	r3, [sp, #4]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	9300      	str	r3, [sp, #0]
 8002fd0:	2314      	movs	r3, #20
 8002fd2:	221e      	movs	r2, #30
 8002fd4:	2164      	movs	r1, #100	@ 0x64
 8002fd6:	203c      	movs	r0, #60	@ 0x3c
 8002fd8:	f7fe fead 	bl	8001d36 <LCD_Ellipse>
	LCD_Ellipse(125, 60, 25, 15, 1, 1, YELLOW);
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <main+0x2b0>)
 8002fde:	9302      	str	r3, [sp, #8]
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	230f      	movs	r3, #15
 8002fea:	2219      	movs	r2, #25
 8002fec:	213c      	movs	r1, #60	@ 0x3c
 8002fee:	207d      	movs	r0, #125	@ 0x7d
 8002ff0:	f7fe fea1 	bl	8001d36 <LCD_Ellipse>
	LCD_Font(0, 200, "1234567890", _32_Segment_7_Num_Plus, 1, RED);
 8002ff4:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <main+0x2cc>)
 8003000:	4a10      	ldr	r2, [pc, #64]	@ (8003044 <main+0x2d0>)
 8003002:	21c8      	movs	r1, #200	@ 0xc8
 8003004:	2000      	movs	r0, #0
 8003006:	f7ff fdf1 	bl	8002bec <LCD_Font>
	LCD_Font(10, 220, "1234567890 Default Font", _8_Default, 1, RED);
 800300a:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2301      	movs	r3, #1
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <main+0x2d4>)
 8003016:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <main+0x2d8>)
 8003018:	21dc      	movs	r1, #220	@ 0xdc
 800301a:	200a      	movs	r0, #10
 800301c:	f7ff fde6 	bl	8002bec <LCD_Font>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <main+0x2ac>
 8003024:	00ffff00 	.word	0x00ffff00
 8003028:	08003c04 	.word	0x08003c04
 800302c:	080036f0 	.word	0x080036f0
 8003030:	08004018 	.word	0x08004018
 8003034:	08003714 	.word	0x08003714
 8003038:	08004c4c 	.word	0x08004c4c
 800303c:	08003724 	.word	0x08003724
 8003040:	08005234 	.word	0x08005234
 8003044:	08003730 	.word	0x08003730
 8003048:	080044bc 	.word	0x080044bc
 800304c:	0800373c 	.word	0x0800373c

08003050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b090      	sub	sp, #64	@ 0x40
 8003054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003056:	f107 0318 	add.w	r3, r7, #24
 800305a:	2228      	movs	r2, #40	@ 0x28
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f000 faff 	bl	8003662 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003072:	2301      	movs	r3, #1
 8003074:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003076:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800307a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003080:	2301      	movs	r3, #1
 8003082:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003084:	2302      	movs	r3, #2
 8003086:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003088:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800308c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800308e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fca9 	bl	80009f0 <HAL_RCC_OscConfig>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80030a4:	f000 f92e 	bl	8003304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a8:	230f      	movs	r3, #15
 80030aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030ac:	2302      	movs	r3, #2
 80030ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030b0:	2300      	movs	r3, #0
 80030b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80030ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030c0:	1d3b      	adds	r3, r7, #4
 80030c2:	2102      	movs	r1, #2
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fd ff15 	bl	8000ef4 <HAL_RCC_ClockConfig>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80030d0:	f000 f918 	bl	8003304 <Error_Handler>
  }
}
 80030d4:	bf00      	nop
 80030d6:	3740      	adds	r7, #64	@ 0x40
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80030e0:	4b12      	ldr	r3, [pc, #72]	@ (800312c <MX_I2C1_Init+0x50>)
 80030e2:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <MX_I2C1_Init+0x54>)
 80030e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80030e6:	4b11      	ldr	r3, [pc, #68]	@ (800312c <MX_I2C1_Init+0x50>)
 80030e8:	4a12      	ldr	r2, [pc, #72]	@ (8003134 <MX_I2C1_Init+0x58>)
 80030ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80030ec:	4b0f      	ldr	r3, [pc, #60]	@ (800312c <MX_I2C1_Init+0x50>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80030f2:	4b0e      	ldr	r3, [pc, #56]	@ (800312c <MX_I2C1_Init+0x50>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80030f8:	4b0c      	ldr	r3, [pc, #48]	@ (800312c <MX_I2C1_Init+0x50>)
 80030fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80030fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003100:	4b0a      	ldr	r3, [pc, #40]	@ (800312c <MX_I2C1_Init+0x50>)
 8003102:	2200      	movs	r2, #0
 8003104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003106:	4b09      	ldr	r3, [pc, #36]	@ (800312c <MX_I2C1_Init+0x50>)
 8003108:	2200      	movs	r2, #0
 800310a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <MX_I2C1_Init+0x50>)
 800310e:	2200      	movs	r2, #0
 8003110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003112:	4b06      	ldr	r3, [pc, #24]	@ (800312c <MX_I2C1_Init+0x50>)
 8003114:	2200      	movs	r2, #0
 8003116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003118:	4804      	ldr	r0, [pc, #16]	@ (800312c <MX_I2C1_Init+0x50>)
 800311a:	f7fd fb25 	bl	8000768 <HAL_I2C_Init>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d001      	beq.n	8003128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003124:	f000 f8ee 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003128:	bf00      	nop
 800312a:	bd80      	pop	{r7, pc}
 800312c:	2000002c 	.word	0x2000002c
 8003130:	40005400 	.word	0x40005400
 8003134:	000186a0 	.word	0x000186a0

08003138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800313c:	4b17      	ldr	r3, [pc, #92]	@ (800319c <MX_SPI1_Init+0x64>)
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <MX_SPI1_Init+0x68>)
 8003140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003142:	4b16      	ldr	r3, [pc, #88]	@ (800319c <MX_SPI1_Init+0x64>)
 8003144:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800314a:	4b14      	ldr	r3, [pc, #80]	@ (800319c <MX_SPI1_Init+0x64>)
 800314c:	2200      	movs	r2, #0
 800314e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003150:	4b12      	ldr	r3, [pc, #72]	@ (800319c <MX_SPI1_Init+0x64>)
 8003152:	2200      	movs	r2, #0
 8003154:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <MX_SPI1_Init+0x64>)
 8003158:	2200      	movs	r2, #0
 800315a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800315c:	4b0f      	ldr	r3, [pc, #60]	@ (800319c <MX_SPI1_Init+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <MX_SPI1_Init+0x64>)
 8003164:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8003168:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316a:	4b0c      	ldr	r3, [pc, #48]	@ (800319c <MX_SPI1_Init+0x64>)
 800316c:	2200      	movs	r2, #0
 800316e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <MX_SPI1_Init+0x64>)
 8003172:	2200      	movs	r2, #0
 8003174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003176:	4b09      	ldr	r3, [pc, #36]	@ (800319c <MX_SPI1_Init+0x64>)
 8003178:	2200      	movs	r2, #0
 800317a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800317c:	4b07      	ldr	r3, [pc, #28]	@ (800319c <MX_SPI1_Init+0x64>)
 800317e:	2200      	movs	r2, #0
 8003180:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <MX_SPI1_Init+0x64>)
 8003184:	220a      	movs	r2, #10
 8003186:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003188:	4804      	ldr	r0, [pc, #16]	@ (800319c <MX_SPI1_Init+0x64>)
 800318a:	f7fe f841 	bl	8001210 <HAL_SPI_Init>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d001      	beq.n	8003198 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003194:	f000 f8b6 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003198:	bf00      	nop
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20000080 	.word	0x20000080
 80031a0:	40013000 	.word	0x40013000

080031a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80031a8:	4b11      	ldr	r3, [pc, #68]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031aa:	4a12      	ldr	r2, [pc, #72]	@ (80031f4 <MX_USART1_UART_Init+0x50>)
 80031ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80031ae:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80031b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80031b6:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031be:	2200      	movs	r2, #0
 80031c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031ca:	220c      	movs	r2, #12
 80031cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <MX_USART1_UART_Init+0x4c>)
 80031dc:	f7fe f89c 	bl	8001318 <HAL_UART_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80031e6:	f000 f88d 	bl	8003304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200000d8 	.word	0x200000d8
 80031f4:	40013800 	.word	0x40013800

080031f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031fe:	f107 0310 	add.w	r3, r7, #16
 8003202:	2200      	movs	r2, #0
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	609a      	str	r2, [r3, #8]
 800320a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800320c:	4b39      	ldr	r3, [pc, #228]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a38      	ldr	r2, [pc, #224]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003212:	f043 0310 	orr.w	r3, r3, #16
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b36      	ldr	r3, [pc, #216]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003224:	4b33      	ldr	r3, [pc, #204]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	4a32      	ldr	r2, [pc, #200]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800322a:	f043 0320 	orr.w	r3, r3, #32
 800322e:	6193      	str	r3, [r2, #24]
 8003230:	4b30      	ldr	r3, [pc, #192]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	60bb      	str	r3, [r7, #8]
 800323a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	4b2d      	ldr	r3, [pc, #180]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	4a2c      	ldr	r2, [pc, #176]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	6193      	str	r3, [r2, #24]
 8003248:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800324a:	699b      	ldr	r3, [r3, #24]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003254:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	4a26      	ldr	r2, [pc, #152]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 800325a:	f043 0308 	orr.w	r3, r3, #8
 800325e:	6193      	str	r3, [r2, #24]
 8003260:	4b24      	ldr	r3, [pc, #144]	@ (80032f4 <MX_GPIO_Init+0xfc>)
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800326c:	2200      	movs	r2, #0
 800326e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003272:	4821      	ldr	r0, [pc, #132]	@ (80032f8 <MX_GPIO_Init+0x100>)
 8003274:	f7fd fa60 	bl	8000738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 8003278:	2200      	movs	r2, #0
 800327a:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 800327e:	481f      	ldr	r0, [pc, #124]	@ (80032fc <MX_GPIO_Init+0x104>)
 8003280:	f7fd fa5a 	bl	8000738 <HAL_GPIO_WritePin>
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin
                          |DB8_Pin|DB9_Pin|DB10_Pin|DB11_Pin
                          |DB12_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin|LCD_RS_Pin
 8003284:	2200      	movs	r2, #0
 8003286:	f64e 4103 	movw	r1, #60419	@ 0xec03
 800328a:	481d      	ldr	r0, [pc, #116]	@ (8003300 <MX_GPIO_Init+0x108>)
 800328c:	f7fd fa54 	bl	8000738 <HAL_GPIO_WritePin>
                          |DB13_Pin|DB14_Pin|DB15_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003290:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003294:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003296:	2301      	movs	r3, #1
 8003298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329a:	2300      	movs	r3, #0
 800329c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329e:	2302      	movs	r3, #2
 80032a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80032a2:	f107 0310 	add.w	r3, r7, #16
 80032a6:	4619      	mov	r1, r3
 80032a8:	4813      	ldr	r0, [pc, #76]	@ (80032f8 <MX_GPIO_Init+0x100>)
 80032aa:	f7fd f8c1 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pins : DB0_Pin DB1_Pin DB2_Pin DB3_Pin
                           DB4_Pin DB5_Pin DB6_Pin DB7_Pin
                           DB8_Pin DB9_Pin DB10_Pin DB11_Pin
                           DB12_Pin */
  GPIO_InitStruct.Pin = DB0_Pin|DB1_Pin|DB2_Pin|DB3_Pin
 80032ae:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80032b2:	613b      	str	r3, [r7, #16]
                          |DB4_Pin|DB5_Pin|DB6_Pin|DB7_Pin
                          |DB8_Pin|DB9_Pin|DB10_Pin|DB11_Pin
                          |DB12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b4:	2301      	movs	r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032bc:	2302      	movs	r3, #2
 80032be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c0:	f107 0310 	add.w	r3, r7, #16
 80032c4:	4619      	mov	r1, r3
 80032c6:	480d      	ldr	r0, [pc, #52]	@ (80032fc <MX_GPIO_Init+0x104>)
 80032c8:	f7fd f8b2 	bl	8000430 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin LCD_WR_Pin LCD_RS_Pin
                           DB13_Pin DB14_Pin DB15_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin|LCD_WR_Pin|LCD_RS_Pin
 80032cc:	f64e 4303 	movw	r3, #60419	@ 0xec03
 80032d0:	613b      	str	r3, [r7, #16]
                          |DB13_Pin|DB14_Pin|DB15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d2:	2301      	movs	r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032da:	2302      	movs	r3, #2
 80032dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032de:	f107 0310 	add.w	r3, r7, #16
 80032e2:	4619      	mov	r1, r3
 80032e4:	4806      	ldr	r0, [pc, #24]	@ (8003300 <MX_GPIO_Init+0x108>)
 80032e6:	f7fd f8a3 	bl	8000430 <HAL_GPIO_Init>

}
 80032ea:	bf00      	nop
 80032ec:	3720      	adds	r7, #32
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40010800 	.word	0x40010800
 8003300:	40010c00 	.word	0x40010c00

08003304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003308:	bf00      	nop
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr

08003310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <HAL_MspInit+0x5c>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4a14      	ldr	r2, [pc, #80]	@ (800336c <HAL_MspInit+0x5c>)
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	6193      	str	r3, [r2, #24]
 8003322:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_MspInit+0x5c>)
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	60bb      	str	r3, [r7, #8]
 800332c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_MspInit+0x5c>)
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4a0e      	ldr	r2, [pc, #56]	@ (800336c <HAL_MspInit+0x5c>)
 8003334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003338:	61d3      	str	r3, [r2, #28]
 800333a:	4b0c      	ldr	r3, [pc, #48]	@ (800336c <HAL_MspInit+0x5c>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003342:	607b      	str	r3, [r7, #4]
 8003344:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003346:	4b0a      	ldr	r3, [pc, #40]	@ (8003370 <HAL_MspInit+0x60>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003352:	60fb      	str	r3, [r7, #12]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <HAL_MspInit+0x60>)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	bc80      	pop	{r7}
 800336a:	4770      	bx	lr
 800336c:	40021000 	.word	0x40021000
 8003370:	40010000 	.word	0x40010000

08003374 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 0314 	add.w	r3, r7, #20
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1d      	ldr	r2, [pc, #116]	@ (8003404 <HAL_I2C_MspInit+0x90>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d132      	bne.n	80033fa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003394:	4b1c      	ldr	r3, [pc, #112]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	4a1b      	ldr	r2, [pc, #108]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 800339a:	f043 0308 	orr.w	r3, r3, #8
 800339e:	6193      	str	r3, [r2, #24]
 80033a0:	4b19      	ldr	r3, [pc, #100]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	613b      	str	r3, [r7, #16]
 80033aa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80033b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033b2:	2312      	movs	r3, #18
 80033b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ba:	f107 0314 	add.w	r3, r7, #20
 80033be:	4619      	mov	r1, r3
 80033c0:	4812      	ldr	r0, [pc, #72]	@ (800340c <HAL_I2C_MspInit+0x98>)
 80033c2:	f7fd f835 	bl	8000430 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80033c6:	4b12      	ldr	r3, [pc, #72]	@ (8003410 <HAL_I2C_MspInit+0x9c>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d6:	f043 0302 	orr.w	r3, r3, #2
 80033da:	627b      	str	r3, [r7, #36]	@ 0x24
 80033dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003410 <HAL_I2C_MspInit+0x9c>)
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033e2:	4b09      	ldr	r3, [pc, #36]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4a08      	ldr	r2, [pc, #32]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 80033e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033ec:	61d3      	str	r3, [r2, #28]
 80033ee:	4b06      	ldr	r3, [pc, #24]	@ (8003408 <HAL_I2C_MspInit+0x94>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033f6:	60fb      	str	r3, [r7, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033fa:	bf00      	nop
 80033fc:	3728      	adds	r7, #40	@ 0x28
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40005400 	.word	0x40005400
 8003408:	40021000 	.word	0x40021000
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40010000 	.word	0x40010000

08003414 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b08a      	sub	sp, #40	@ 0x28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800341c:	f107 0314 	add.w	r3, r7, #20
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2f      	ldr	r2, [pc, #188]	@ (80034ec <HAL_SPI_MspInit+0xd8>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d156      	bne.n	80034e2 <HAL_SPI_MspInit+0xce>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003434:	4b2e      	ldr	r3, [pc, #184]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	4a2d      	ldr	r2, [pc, #180]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 800343a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800343e:	6193      	str	r3, [r2, #24]
 8003440:	4b2b      	ldr	r3, [pc, #172]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800344c:	4b28      	ldr	r3, [pc, #160]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	4a27      	ldr	r2, [pc, #156]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 8003452:	f043 0304 	orr.w	r3, r3, #4
 8003456:	6193      	str	r3, [r2, #24]
 8003458:	4b25      	ldr	r3, [pc, #148]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003464:	4b22      	ldr	r3, [pc, #136]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	4a21      	ldr	r2, [pc, #132]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 800346a:	f043 0308 	orr.w	r3, r3, #8
 800346e:	6193      	str	r3, [r2, #24]
 8003470:	4b1f      	ldr	r3, [pc, #124]	@ (80034f0 <HAL_SPI_MspInit+0xdc>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f003 0308 	and.w	r3, r3, #8
 8003478:	60bb      	str	r3, [r7, #8]
 800347a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800347c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003482:	2302      	movs	r3, #2
 8003484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003486:	2303      	movs	r3, #3
 8003488:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	4818      	ldr	r0, [pc, #96]	@ (80034f4 <HAL_SPI_MspInit+0xe0>)
 8003492:	f7fc ffcd 	bl	8000430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003496:	2328      	movs	r3, #40	@ 0x28
 8003498:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800349a:	2302      	movs	r3, #2
 800349c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f107 0314 	add.w	r3, r7, #20
 80034a6:	4619      	mov	r1, r3
 80034a8:	4813      	ldr	r0, [pc, #76]	@ (80034f8 <HAL_SPI_MspInit+0xe4>)
 80034aa:	f7fc ffc1 	bl	8000430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80034ae:	2310      	movs	r3, #16
 80034b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	480d      	ldr	r0, [pc, #52]	@ (80034f8 <HAL_SPI_MspInit+0xe4>)
 80034c2:	f7fc ffb5 	bl	8000430 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 80034c6:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <HAL_SPI_MspInit+0xe8>)
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80034cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ce:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80034d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80034d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	627b      	str	r3, [r7, #36]	@ 0x24
 80034dc:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <HAL_SPI_MspInit+0xe8>)
 80034de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e0:	6053      	str	r3, [r2, #4]

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80034e2:	bf00      	nop
 80034e4:	3728      	adds	r7, #40	@ 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40013000 	.word	0x40013000
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40010800 	.word	0x40010800
 80034f8:	40010c00 	.word	0x40010c00
 80034fc:	40010000 	.word	0x40010000

08003500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b08a      	sub	sp, #40	@ 0x28
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003508:	f107 0314 	add.w	r3, r7, #20
 800350c:	2200      	movs	r2, #0
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	605a      	str	r2, [r3, #4]
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <HAL_UART_MspInit+0xa4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d13d      	bne.n	800359c <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003520:	4b21      	ldr	r3, [pc, #132]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 8003526:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800352a:	6193      	str	r3, [r2, #24]
 800352c:	4b1e      	ldr	r3, [pc, #120]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003534:	613b      	str	r3, [r7, #16]
 8003536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003538:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 800353a:	699b      	ldr	r3, [r3, #24]
 800353c:	4a1a      	ldr	r2, [pc, #104]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 800353e:	f043 0308 	orr.w	r3, r3, #8
 8003542:	6193      	str	r3, [r2, #24]
 8003544:	4b18      	ldr	r3, [pc, #96]	@ (80035a8 <HAL_UART_MspInit+0xa8>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003550:	2340      	movs	r3, #64	@ 0x40
 8003552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003554:	2302      	movs	r3, #2
 8003556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003558:	2303      	movs	r3, #3
 800355a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4619      	mov	r1, r3
 8003562:	4812      	ldr	r0, [pc, #72]	@ (80035ac <HAL_UART_MspInit+0xac>)
 8003564:	f7fc ff64 	bl	8000430 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003568:	2380      	movs	r3, #128	@ 0x80
 800356a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003574:	f107 0314 	add.w	r3, r7, #20
 8003578:	4619      	mov	r1, r3
 800357a:	480c      	ldr	r0, [pc, #48]	@ (80035ac <HAL_UART_MspInit+0xac>)
 800357c:	f7fc ff58 	bl	8000430 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_UART_MspInit+0xb0>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
 8003586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003588:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800358c:	627b      	str	r3, [r7, #36]	@ 0x24
 800358e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003590:	f043 0304 	orr.w	r3, r3, #4
 8003594:	627b      	str	r3, [r7, #36]	@ 0x24
 8003596:	4a06      	ldr	r2, [pc, #24]	@ (80035b0 <HAL_UART_MspInit+0xb0>)
 8003598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359a:	6053      	str	r3, [r2, #4]

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800359c:	bf00      	nop
 800359e:	3728      	adds	r7, #40	@ 0x28
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40013800 	.word	0x40013800
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40010c00 	.word	0x40010c00
 80035b0:	40010000 	.word	0x40010000

080035b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <NMI_Handler+0x4>

080035bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <HardFault_Handler+0x4>

080035c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035c8:	bf00      	nop
 80035ca:	e7fd      	b.n	80035c8 <MemManage_Handler+0x4>

080035cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035d0:	bf00      	nop
 80035d2:	e7fd      	b.n	80035d0 <BusFault_Handler+0x4>

080035d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035d8:	bf00      	nop
 80035da:	e7fd      	b.n	80035d8 <UsageFault_Handler+0x4>

080035dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035f8:	bf00      	nop
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003604:	f7fc fdf0 	bl	80001e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003608:	bf00      	nop
 800360a:	bd80      	pop	{r7, pc}

0800360c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800360c:	b480      	push	{r7}
 800360e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003618:	f7ff fff8 	bl	800360c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800361c:	480b      	ldr	r0, [pc, #44]	@ (800364c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800361e:	490c      	ldr	r1, [pc, #48]	@ (8003650 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003620:	4a0c      	ldr	r2, [pc, #48]	@ (8003654 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003624:	e002      	b.n	800362c <LoopCopyDataInit>

08003626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800362a:	3304      	adds	r3, #4

0800362c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800362c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800362e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003630:	d3f9      	bcc.n	8003626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003632:	4a09      	ldr	r2, [pc, #36]	@ (8003658 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003634:	4c09      	ldr	r4, [pc, #36]	@ (800365c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003638:	e001      	b.n	800363e <LoopFillZerobss>

0800363a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800363a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800363c:	3204      	adds	r2, #4

0800363e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800363e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003640:	d3fb      	bcc.n	800363a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003642:	f000 f817 	bl	8003674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003646:	f7ff fb95 	bl	8002d74 <main>
  bx lr
 800364a:	4770      	bx	lr
  ldr r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003650:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8003654:	08005268 	.word	0x08005268
  ldr r2, =_sbss
 8003658:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800365c:	20000120 	.word	0x20000120

08003660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC1_2_IRQHandler>

08003662 <memset>:
 8003662:	4603      	mov	r3, r0
 8003664:	4402      	add	r2, r0
 8003666:	4293      	cmp	r3, r2
 8003668:	d100      	bne.n	800366c <memset+0xa>
 800366a:	4770      	bx	lr
 800366c:	f803 1b01 	strb.w	r1, [r3], #1
 8003670:	e7f9      	b.n	8003666 <memset+0x4>
	...

08003674 <__libc_init_array>:
 8003674:	b570      	push	{r4, r5, r6, lr}
 8003676:	2600      	movs	r6, #0
 8003678:	4d0c      	ldr	r5, [pc, #48]	@ (80036ac <__libc_init_array+0x38>)
 800367a:	4c0d      	ldr	r4, [pc, #52]	@ (80036b0 <__libc_init_array+0x3c>)
 800367c:	1b64      	subs	r4, r4, r5
 800367e:	10a4      	asrs	r4, r4, #2
 8003680:	42a6      	cmp	r6, r4
 8003682:	d109      	bne.n	8003698 <__libc_init_array+0x24>
 8003684:	f000 f828 	bl	80036d8 <_init>
 8003688:	2600      	movs	r6, #0
 800368a:	4d0a      	ldr	r5, [pc, #40]	@ (80036b4 <__libc_init_array+0x40>)
 800368c:	4c0a      	ldr	r4, [pc, #40]	@ (80036b8 <__libc_init_array+0x44>)
 800368e:	1b64      	subs	r4, r4, r5
 8003690:	10a4      	asrs	r4, r4, #2
 8003692:	42a6      	cmp	r6, r4
 8003694:	d105      	bne.n	80036a2 <__libc_init_array+0x2e>
 8003696:	bd70      	pop	{r4, r5, r6, pc}
 8003698:	f855 3b04 	ldr.w	r3, [r5], #4
 800369c:	4798      	blx	r3
 800369e:	3601      	adds	r6, #1
 80036a0:	e7ee      	b.n	8003680 <__libc_init_array+0xc>
 80036a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036a6:	4798      	blx	r3
 80036a8:	3601      	adds	r6, #1
 80036aa:	e7f2      	b.n	8003692 <__libc_init_array+0x1e>
 80036ac:	08005260 	.word	0x08005260
 80036b0:	08005260 	.word	0x08005260
 80036b4:	08005260 	.word	0x08005260
 80036b8:	08005264 	.word	0x08005264

080036bc <memcpy>:
 80036bc:	440a      	add	r2, r1
 80036be:	4291      	cmp	r1, r2
 80036c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80036c4:	d100      	bne.n	80036c8 <memcpy+0xc>
 80036c6:	4770      	bx	lr
 80036c8:	b510      	push	{r4, lr}
 80036ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ce:	4291      	cmp	r1, r2
 80036d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036d4:	d1f9      	bne.n	80036ca <memcpy+0xe>
 80036d6:	bd10      	pop	{r4, pc}

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	bf00      	nop
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	bf00      	nop
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
